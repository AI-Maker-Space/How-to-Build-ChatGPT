"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/threads/[threadId]/messages/route";
exports.ids = ["app/api/threads/[threadId]/messages/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&page=%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute.ts&appDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&page=%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute.ts&appDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_chris_Code_AI_Makerspace_Events_OpenAI_Responses_API_chatgpt_app_api_threads_threadId_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/threads/[threadId]/messages/route.ts */ \"(rsc)/./app/api/threads/[threadId]/messages/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/threads/[threadId]/messages/route\",\n        pathname: \"/api/threads/[threadId]/messages\",\n        filename: \"route\",\n        bundlePath: \"app/api/threads/[threadId]/messages/route\"\n    },\n    resolvedPagePath: \"/home/chris/Code/AI Makerspace/Events/OpenAI Responses API/chatgpt/app/api/threads/[threadId]/messages/route.ts\",\n    nextConfigOutput,\n    userland: _home_chris_Code_AI_Makerspace_Events_OpenAI_Responses_API_chatgpt_app_api_threads_threadId_messages_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/threads/[threadId]/messages/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0aHJlYWRzJTJGJTVCdGhyZWFkSWQlNUQlMkZtZXNzYWdlcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGhyZWFkcyUyRiU1QnRocmVhZElkJTVEJTJGbWVzc2FnZXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ0aHJlYWRzJTJGJTVCdGhyZWFkSWQlNUQlMkZtZXNzYWdlcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGY2hyaXMlMkZDb2RlJTJGQUklMjBNYWtlcnNwYWNlJTJGRXZlbnRzJTJGT3BlbkFJJTIwUmVzcG9uc2VzJTIwQVBJJTJGY2hhdGdwdCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGaG9tZSUyRmNocmlzJTJGQ29kZSUyRkFJJTIwTWFrZXJzcGFjZSUyRkV2ZW50cyUyRk9wZW5BSSUyMFJlc3BvbnNlcyUyMEFQSSUyRmNoYXRncHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDK0Q7QUFDNUk7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUM2Sjs7QUFFN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Z3B0LWNsb25lLz9lNmU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9ob21lL2NocmlzL0NvZGUvQUkgTWFrZXJzcGFjZS9FdmVudHMvT3BlbkFJIFJlc3BvbnNlcyBBUEkvY2hhdGdwdC9hcHAvYXBpL3RocmVhZHMvW3RocmVhZElkXS9tZXNzYWdlcy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGhyZWFkcy9bdGhyZWFkSWRdL21lc3NhZ2VzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdGhyZWFkcy9bdGhyZWFkSWRdL21lc3NhZ2VzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS90aHJlYWRzL1t0aHJlYWRJZF0vbWVzc2FnZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvaG9tZS9jaHJpcy9Db2RlL0FJIE1ha2Vyc3BhY2UvRXZlbnRzL09wZW5BSSBSZXNwb25zZXMgQVBJL2NoYXRncHQvYXBwL2FwaS90aHJlYWRzL1t0aHJlYWRJZF0vbWVzc2FnZXMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdGhyZWFkcy9bdGhyZWFkSWRdL21lc3NhZ2VzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&page=%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute.ts&appDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/threads/[threadId]/messages/route.ts":
/*!******************************************************!*\
  !*** ./app/api/threads/[threadId]/messages/route.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./lib/openai.ts\");\n/* harmony import */ var _lib_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/store */ \"(rsc)/./lib/store.ts\");\n/* harmony import */ var _lib_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/tools */ \"(rsc)/./lib/tools.ts\");\n\n\n\n\n\nconst delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nfunction flattenContent(blocks) {\n    return blocks.map((block)=>{\n        if (block.type === \"text\") return block.text;\n        if (block.type === \"tool-call\") {\n            return `Tool call → ${block.toolName}: ${JSON.stringify(block.arguments)}`;\n        }\n        if (block.type === \"tool-result\") {\n            return `Tool result ← ${block.toolName}: ${block.output}`;\n        }\n        if (block.type === \"error\") {\n            return `Error: ${block.error}`;\n        }\n        return \"\";\n    }).filter(Boolean).join(\"\\n\");\n}\nfunction toResponseInput(thread) {\n    return thread.messages.map((message)=>({\n            role: message.role,\n            content: [\n                {\n                    type: \"text\",\n                    text: flattenContent(message.content)\n                }\n            ]\n        }));\n}\nfunction buildAssistantMessageText(response) {\n    if (!response) return \"\";\n    const output = Array.isArray(response.output) ? response.output : [];\n    const chunks = [];\n    for (const item of output){\n        const content = Array.isArray(item?.content) ? item.content : [];\n        for (const block of content){\n            if (typeof block?.text === \"string\") {\n                chunks.push(block.text);\n            } else if (block?.type === \"output_text\" && typeof block?.text === \"string\") {\n                chunks.push(block.text);\n            }\n        }\n    }\n    const aggregated = chunks.join(\"\").trim();\n    return aggregated;\n}\nfunction extractToolCalls(response) {\n    const required = response?.required_action;\n    if (!required || required.type !== \"submit_tool_outputs\") {\n        return [];\n    }\n    return required.submit_tool_outputs?.tool_calls ?? [];\n}\nasync function persistThread(thread) {\n    await _lib_store__WEBPACK_IMPORTED_MODULE_3__.threadStore.updateThread(thread);\n    // Avoid an empty microtask queue on Vercel edge runtime.\n    await delay(0);\n}\nasync function POST(request, { params }) {\n    const thread = await _lib_store__WEBPACK_IMPORTED_MODULE_3__.threadStore.getThread(params.threadId);\n    if (!thread) {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Thread not found\"\n        }, {\n            status: 404\n        });\n    }\n    const body = await request.json();\n    if (!body?.message?.trim()) {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Message text is required\"\n        }, {\n            status: 400\n        });\n    }\n    const model = body.model ?? thread.model ?? _lib_openai__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_MODEL;\n    const connectorIds = body.connectorIds ?? thread.connectorIds;\n    const toolIds = body.toolIds ?? thread.toolIds;\n    const systemPrompt = body.systemPrompt ?? thread.systemPrompt;\n    const timestamp = new Date().toISOString();\n    const userMessage = {\n        id: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)(),\n        role: \"user\",\n        createdAt: timestamp,\n        content: [\n            {\n                type: \"text\",\n                text: body.message.trim()\n            }\n        ]\n    };\n    let workingThread = (0,_lib_store__WEBPACK_IMPORTED_MODULE_3__.appendMessage)(thread, userMessage);\n    if (!thread.title || thread.title.toLowerCase().startsWith(\"new chat\")) {\n        workingThread = {\n            ...workingThread,\n            title: body.message.trim().slice(0, 60) || \"New chat\"\n        };\n    }\n    await persistThread(workingThread);\n    const baseInput = toResponseInput(workingThread);\n    const openAiInput = systemPrompt ? [\n        {\n            role: \"system\",\n            content: [\n                {\n                    type: \"text\",\n                    text: systemPrompt\n                }\n            ]\n        },\n        ...baseInput\n    ] : baseInput;\n    const connectorsPayload = connectorIds?.map((id)=>({\n            id\n        })) ?? [];\n    const toolsPayload = (0,_lib_tools__WEBPACK_IMPORTED_MODULE_4__.getOpenAIToolDefinitions)(toolIds ?? []);\n    let response = await _lib_openai__WEBPACK_IMPORTED_MODULE_2__.openai.responses.create({\n        model,\n        input: openAiInput,\n        connectors: connectorsPayload.length ? connectorsPayload : undefined,\n        tools: toolsPayload.length ? toolsPayload : undefined\n    });\n    const assistantMessages = [];\n    // Handle tool-call loops until the model produces a final message.\n    // eslint-disable-next-line no-constant-condition\n    while(true){\n        const toolCalls = extractToolCalls(response);\n        if (toolCalls.length === 0) {\n            break;\n        }\n        const toolCallMessages = toolCalls.map((call)=>{\n            const args = call.function?.arguments ?? \"{}\";\n            let parsed = {};\n            try {\n                parsed = JSON.parse(args);\n            } catch (error) {\n                parsed = {\n                    error: `Failed to parse tool arguments: ${error.message}`,\n                    raw: args\n                };\n            }\n            return {\n                id: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)(),\n                role: \"assistant\",\n                createdAt: new Date().toISOString(),\n                content: [\n                    {\n                        type: \"tool-call\",\n                        toolCallId: call.id,\n                        toolName: call.function?.name ?? \"function\",\n                        arguments: parsed\n                    }\n                ]\n            };\n        });\n        for (const message of toolCallMessages){\n            workingThread = (0,_lib_store__WEBPACK_IMPORTED_MODULE_3__.appendMessage)(workingThread, message);\n        }\n        await persistThread(workingThread);\n        const outputs = await (0,_lib_tools__WEBPACK_IMPORTED_MODULE_4__.resolveToolCalls)(toolCalls);\n        const toolResultMessages = outputs.map((output)=>{\n            const toolCall = toolCalls.find((call)=>call.id === output.tool_call_id);\n            return {\n                id: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)(),\n                role: \"tool\",\n                createdAt: new Date().toISOString(),\n                content: [\n                    {\n                        type: \"tool-result\",\n                        toolCallId: output.tool_call_id,\n                        toolName: toolCall?.function?.name ?? \"tool\",\n                        output: output.output\n                    }\n                ]\n            };\n        });\n        for (const message of toolResultMessages){\n            workingThread = (0,_lib_store__WEBPACK_IMPORTED_MODULE_3__.appendMessage)(workingThread, message);\n        }\n        await persistThread(workingThread);\n        response = await _lib_openai__WEBPACK_IMPORTED_MODULE_2__.openai.responses.submitToolOutputs(response.id, {\n            tool_outputs: outputs\n        });\n    }\n    const assistantText = buildAssistantMessageText(response);\n    const assistantMessage = {\n        id: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)(),\n        role: \"assistant\",\n        createdAt: new Date().toISOString(),\n        content: assistantText ? [\n            {\n                type: \"text\",\n                text: assistantText\n            }\n        ] : [\n            {\n                type: \"error\",\n                error: \"The model did not return any assistant content.\"\n            }\n        ]\n    };\n    assistantMessages.push(assistantMessage);\n    for (const message of assistantMessages){\n        workingThread = (0,_lib_store__WEBPACK_IMPORTED_MODULE_3__.appendMessage)(workingThread, message);\n    }\n    await persistThread(workingThread);\n    const refreshed = await _lib_store__WEBPACK_IMPORTED_MODULE_3__.threadStore.getThread(params.threadId);\n    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n        thread: refreshed,\n        assistantMessage\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/threads/[threadId]/messages/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/openai.ts":
/*!***********************!*\
  !*** ./lib/openai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MODEL: () => (/* binding */ DEFAULT_MODEL),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\nif (!process.env.OPENAI_API_KEY) {\n    console.warn(\"OPENAI_API_KEY is not set. API routes will fail until it is configured.\");\n}\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst DEFAULT_MODEL = process.env.OPENAI_MODEL ?? \"gpt-4.1-mini\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvb3BlbmFpLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUU1QixJQUFJLENBQUNDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYyxFQUFFO0lBQy9CQyxRQUFRQyxJQUFJLENBQUM7QUFDZjtBQUVPLE1BQU1DLFNBQVMsSUFBSU4sOENBQU1BLENBQUM7SUFDL0JPLFFBQVFOLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUNwQyxHQUFHO0FBRUksTUFBTUssZ0JBQWdCUCxRQUFRQyxHQUFHLENBQUNPLFlBQVksSUFBSSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGdwdC1jbG9uZS8uL2xpYi9vcGVuYWkudHM/MDBkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT3BlbkFJIGZyb20gXCJvcGVuYWlcIjtcblxuaWYgKCFwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSkge1xuICBjb25zb2xlLndhcm4oXCJPUEVOQUlfQVBJX0tFWSBpcyBub3Qgc2V0LiBBUEkgcm91dGVzIHdpbGwgZmFpbCB1bnRpbCBpdCBpcyBjb25maWd1cmVkLlwiKTtcbn1cblxuZXhwb3J0IGNvbnN0IG9wZW5haSA9IG5ldyBPcGVuQUkoe1xuICBhcGlLZXk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZLFxufSk7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX01PREVMID0gcHJvY2Vzcy5lbnYuT1BFTkFJX01PREVMID8/IFwiZ3B0LTQuMS1taW5pXCI7XG4iXSwibmFtZXMiOlsiT3BlbkFJIiwicHJvY2VzcyIsImVudiIsIk9QRU5BSV9BUElfS0VZIiwiY29uc29sZSIsIndhcm4iLCJvcGVuYWkiLCJhcGlLZXkiLCJERUZBVUxUX01PREVMIiwiT1BFTkFJX01PREVMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/openai.ts\n");

/***/ }),

/***/ "(rsc)/./lib/store.ts":
/*!**********************!*\
  !*** ./lib/store.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendMessage: () => (/* binding */ appendMessage),\n/* harmony export */   threadStore: () => (/* binding */ threadStore)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n\n\nconst THREAD_KEY_PREFIX = \"thread:\";\nconst THREAD_INDEX_KEY = \"thread:index\";\nfunction now() {\n    return new Date().toISOString();\n}\nfunction createSummary(thread) {\n    const lastMessage = thread.messages.at(-1);\n    const preview = lastMessage?.content.find((block)=>block.type === \"text\");\n    return {\n        id: thread.id,\n        title: thread.title,\n        createdAt: thread.createdAt,\n        updatedAt: thread.updatedAt,\n        lastMessagePreview: preview && \"text\" in preview ? preview.text.slice(0, 140) : \"\"\n    };\n}\nclass RedisThreadStore {\n    constructor(client){\n        this.client = client;\n    }\n    async createThread(partial) {\n        const id = partial.id ?? (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        const timestamp = now();\n        const thread = {\n            id,\n            title: partial.title ?? \"New Chat\",\n            createdAt: timestamp,\n            updatedAt: timestamp,\n            messages: partial.messages ?? [],\n            model: partial.model ?? \"gpt-4.1-mini\",\n            connectorIds: partial.connectorIds ?? [],\n            toolIds: partial.toolIds ?? [],\n            systemPrompt: partial.systemPrompt\n        };\n        await this.client.set(`${THREAD_KEY_PREFIX}${id}`, JSON.stringify(thread));\n        await this.client.zadd(THREAD_INDEX_KEY, {\n            score: Date.parse(thread.updatedAt),\n            member: id\n        });\n        return thread;\n    }\n    async getThread(id) {\n        const payload = await this.client.get(`${THREAD_KEY_PREFIX}${id}`);\n        if (!payload) return null;\n        return JSON.parse(payload);\n    }\n    async listThreads() {\n        const ids = await this.client.zrevrange(THREAD_INDEX_KEY, 0, -1);\n        if (!ids.length) return [];\n        const entries = await this.client.mget(...ids.map((id)=>`${THREAD_KEY_PREFIX}${id}`));\n        return entries.map((item)=>item ? JSON.parse(item) : null).filter((thread)=>Boolean(thread)).map(createSummary).sort((a, b)=>Date.parse(b.updatedAt) - Date.parse(a.updatedAt));\n    }\n    async updateThread(thread) {\n        const updated = {\n            ...thread,\n            updatedAt: now()\n        };\n        await this.client.set(`${THREAD_KEY_PREFIX}${updated.id}`, JSON.stringify(updated));\n        await this.client.zadd(THREAD_INDEX_KEY, {\n            score: Date.parse(updated.updatedAt),\n            member: updated.id\n        });\n    }\n    async deleteThread(id) {\n        await this.client.del(`${THREAD_KEY_PREFIX}${id}`);\n        await this.client.zrem(THREAD_INDEX_KEY, id);\n    }\n}\nclass InMemoryThreadStore {\n    async createThread(partial) {\n        const id = partial.id ?? (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        const timestamp = now();\n        const thread = {\n            id,\n            title: partial.title ?? \"New Chat\",\n            createdAt: timestamp,\n            updatedAt: timestamp,\n            messages: partial.messages ?? [],\n            model: partial.model ?? \"gpt-4.1-mini\",\n            connectorIds: partial.connectorIds ?? [],\n            toolIds: partial.toolIds ?? [],\n            systemPrompt: partial.systemPrompt\n        };\n        this.store.set(id, thread);\n        return thread;\n    }\n    async getThread(id) {\n        return this.store.get(id) ?? null;\n    }\n    async listThreads() {\n        return Array.from(this.store.values()).map(createSummary).sort((a, b)=>Date.parse(b.updatedAt) - Date.parse(a.updatedAt));\n    }\n    async updateThread(thread) {\n        const updated = {\n            ...thread,\n            updatedAt: now()\n        };\n        this.store.set(thread.id, updated);\n    }\n    async deleteThread(id) {\n        this.store.delete(id);\n    }\n    constructor(){\n        this.store = new Map();\n    }\n}\nfunction initialiseStore() {\n    const url = process.env.UPSTASH_REDIS_REST_URL;\n    const token = process.env.UPSTASH_REDIS_REST_TOKEN;\n    if (url && token) {\n        const client = new _upstash_redis__WEBPACK_IMPORTED_MODULE_1__.Redis({\n            url,\n            token\n        });\n        return new RedisThreadStore(client);\n    }\n    console.warn(\"UPSTASH_REDIS_* env vars not set. Falling back to ephemeral in-memory store.\");\n    return new InMemoryThreadStore();\n}\nconst threadStore = initialiseStore();\nfunction appendMessage(thread, message) {\n    return {\n        ...thread,\n        messages: [\n            ...thread.messages,\n            message\n        ],\n        updatedAt: now()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/store.ts\n");

/***/ }),

/***/ "(rsc)/./lib/tools.ts":
/*!**********************!*\
  !*** ./lib/tools.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AVAILABLE_TOOL_METADATA: () => (/* binding */ AVAILABLE_TOOL_METADATA),\n/* harmony export */   getOpenAIToolDefinitions: () => (/* binding */ getOpenAIToolDefinitions),\n/* harmony export */   resolveToolCalls: () => (/* binding */ resolveToolCalls)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\nasync function readCompanyFaq() {\n    const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"company_faq.json\");\n    const raw = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(filePath, \"utf-8\");\n    return JSON.parse(raw);\n}\nconst TOOL_REGISTRY = {\n    time: {\n        id: \"time\",\n        label: \"Current Time\",\n        description: \"Expose the current timestamp for scheduling and reminders.\",\n        openAITool: {\n            type: \"function\",\n            function: {\n                name: \"get_current_time\",\n                description: \"Get the current time in ISO 8601 format. Optionally convert to a provided IANA timezone name.\",\n                parameters: {\n                    type: \"object\",\n                    properties: {\n                        timezone: {\n                            type: \"string\",\n                            description: \"An optional IANA timezone identifier (e.g. America/Los_Angeles).\"\n                        }\n                    }\n                }\n            }\n        },\n        handler: (args)=>{\n            const tz = typeof args.timezone === \"string\" && args.timezone.trim() ? args.timezone.trim() : undefined;\n            const now = new Date();\n            if (!tz) {\n                return now.toISOString();\n            }\n            try {\n                const formatter = new Intl.DateTimeFormat(\"en-US\", {\n                    timeZone: tz,\n                    dateStyle: \"full\",\n                    timeStyle: \"long\"\n                });\n                return formatter.format(now);\n            } catch (error) {\n                return `Invalid timezone '${tz}'. Falling back to ISO time: ${now.toISOString()}`;\n            }\n        }\n    },\n    company_faq: {\n        id: \"company_faq\",\n        label: \"Company FAQ\",\n        description: \"Answer questions from a curated company handbook.\",\n        openAITool: {\n            type: \"function\",\n            function: {\n                name: \"lookup_company_faq\",\n                description: \"Look up internal FAQ answers by topic keyword.\",\n                parameters: {\n                    type: \"object\",\n                    properties: {\n                        topic: {\n                            type: \"string\",\n                            description: \"Primary topic or keyword to search for (e.g. mission, pricing, events).\"\n                        }\n                    },\n                    required: [\n                        \"topic\"\n                    ]\n                }\n            }\n        },\n        handler: async (args)=>{\n            const topic = typeof args.topic === \"string\" ? args.topic.toLowerCase().trim() : \"\";\n            if (!topic) {\n                return \"No topic provided. Please supply a topic string.\";\n            }\n            const faqEntries = await readCompanyFaq();\n            const directHit = faqEntries.find((entry)=>entry.topic.toLowerCase() === topic);\n            if (directHit) {\n                return directHit.answer;\n            }\n            const related = faqEntries.filter((entry)=>entry.topic.toLowerCase().includes(topic));\n            if (related.length) {\n                return related.map((entry)=>`• ${entry.topic}: ${entry.answer}`).join(\"\\n\");\n            }\n            return `No FAQ entries found for '${topic}'.`;\n        }\n    }\n};\nconst AVAILABLE_TOOL_METADATA = Object.values(TOOL_REGISTRY).map(({ id, label, description })=>({\n        id,\n        label,\n        description\n    }));\nfunction getOpenAIToolDefinitions(selected) {\n    return selected.map((toolId)=>TOOL_REGISTRY[toolId]).filter(Boolean).map((tool)=>tool.openAITool);\n}\nasync function resolveToolCalls(toolCalls) {\n    const outputs = [];\n    for (const call of toolCalls){\n        if (call.type !== \"function\" || !call.function) {\n            continue;\n        }\n        const { name, arguments: argsJson } = call.function;\n        const tool = Object.values(TOOL_REGISTRY).find((entry)=>entry.openAITool.function.name === name);\n        if (!tool) {\n            outputs.push({\n                tool_call_id: call.id,\n                output: `Tool '${name}' is not implemented on the server.`\n            });\n            continue;\n        }\n        try {\n            const args = argsJson ? JSON.parse(argsJson) : {};\n            const result = await tool.handler(args);\n            outputs.push({\n                tool_call_id: call.id,\n                output: typeof result === \"string\" ? result : JSON.stringify(result, null, 2)\n            });\n        } catch (error) {\n            outputs.push({\n                tool_call_id: call.id,\n                output: `Tool execution failed: ${error.message}`\n            });\n        }\n    }\n    return outputs;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFDckJ3RCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsTUFBaUJHLE9BQU8sQ0FBQyxDQUFDO1lBQzlEO1FBQ0Y7SUFDRjtJQUVBLE9BQU9UO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Z3B0LWNsb25lLy4vbGliL3Rvb2xzLnRzPzJhMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gXCJmcy9wcm9taXNlc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB0eXBlIHsgVG9vbE1ldGFEZWZpbml0aW9uIH0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XG5cbmludGVyZmFjZSBUb29sQ2FsbCB7XG4gIGlkOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgZnVuY3Rpb24/OiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGFyZ3VtZW50czogc3RyaW5nO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgVG9vbERlZmluaXRpb24ge1xuICBpZDogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBvcGVuQUlUb29sOiB7XG4gICAgdHlwZTogXCJmdW5jdGlvblwiO1xuICAgIGZ1bmN0aW9uOiB7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgcGFyYW1ldGVyczogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgfTtcbiAgfTtcbiAgaGFuZGxlcjogKGFyZ3M6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSA9PiBQcm9taXNlPHN0cmluZz4gfCBzdHJpbmc7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWRDb21wYW55RmFxKCkge1xuICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBcImRhdGFcIiwgXCJjb21wYW55X2ZhcS5qc29uXCIpO1xuICBjb25zdCByYXcgPSBhd2FpdCBmcy5yZWFkRmlsZShmaWxlUGF0aCwgXCJ1dGYtOFwiKTtcbiAgcmV0dXJuIEpTT04ucGFyc2UocmF3KSBhcyBBcnJheTx7IHRvcGljOiBzdHJpbmc7IGFuc3dlcjogc3RyaW5nIH0+O1xufVxuXG5jb25zdCBUT09MX1JFR0lTVFJZOiBSZWNvcmQ8c3RyaW5nLCBUb29sRGVmaW5pdGlvbj4gPSB7XG4gIHRpbWU6IHtcbiAgICBpZDogXCJ0aW1lXCIsXG4gICAgbGFiZWw6IFwiQ3VycmVudCBUaW1lXCIsXG4gICAgZGVzY3JpcHRpb246IFwiRXhwb3NlIHRoZSBjdXJyZW50IHRpbWVzdGFtcCBmb3Igc2NoZWR1bGluZyBhbmQgcmVtaW5kZXJzLlwiLFxuICAgIG9wZW5BSVRvb2w6IHtcbiAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgIG5hbWU6IFwiZ2V0X2N1cnJlbnRfdGltZVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJHZXQgdGhlIGN1cnJlbnQgdGltZSBpbiBJU08gODYwMSBmb3JtYXQuIE9wdGlvbmFsbHkgY29udmVydCB0byBhIHByb3ZpZGVkIElBTkEgdGltZXpvbmUgbmFtZS5cIixcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdGltZXpvbmU6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gb3B0aW9uYWwgSUFOQSB0aW1lem9uZSBpZGVudGlmaWVyIChlLmcuIEFtZXJpY2EvTG9zX0FuZ2VsZXMpLlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIGhhbmRsZXI6IChhcmdzKSA9PiB7XG4gICAgICBjb25zdCB0eiA9IHR5cGVvZiBhcmdzLnRpbWV6b25lID09PSBcInN0cmluZ1wiICYmIGFyZ3MudGltZXpvbmUudHJpbSgpID8gYXJncy50aW1lem9uZS50cmltKCkgOiB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgaWYgKCF0eikge1xuICAgICAgICByZXR1cm4gbm93LnRvSVNPU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuLVVTXCIsIHtcbiAgICAgICAgICB0aW1lWm9uZTogdHosXG4gICAgICAgICAgZGF0ZVN0eWxlOiBcImZ1bGxcIixcbiAgICAgICAgICB0aW1lU3R5bGU6IFwibG9uZ1wiLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQobm93KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBgSW52YWxpZCB0aW1lem9uZSAnJHt0en0nLiBGYWxsaW5nIGJhY2sgdG8gSVNPIHRpbWU6ICR7bm93LnRvSVNPU3RyaW5nKCl9YDtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuICBjb21wYW55X2ZhcToge1xuICAgIGlkOiBcImNvbXBhbnlfZmFxXCIsXG4gICAgbGFiZWw6IFwiQ29tcGFueSBGQVFcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBbnN3ZXIgcXVlc3Rpb25zIGZyb20gYSBjdXJhdGVkIGNvbXBhbnkgaGFuZGJvb2suXCIsXG4gICAgb3BlbkFJVG9vbDoge1xuICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgbmFtZTogXCJsb29rdXBfY29tcGFueV9mYXFcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiTG9vayB1cCBpbnRlcm5hbCBGQVEgYW5zd2VycyBieSB0b3BpYyBrZXl3b3JkLlwiLFxuICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB0b3BpYzoge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQcmltYXJ5IHRvcGljIG9yIGtleXdvcmQgdG8gc2VhcmNoIGZvciAoZS5nLiBtaXNzaW9uLCBwcmljaW5nLCBldmVudHMpLlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlcXVpcmVkOiBbXCJ0b3BpY1wiXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBoYW5kbGVyOiBhc3luYyAoYXJncykgPT4ge1xuICAgICAgY29uc3QgdG9waWMgPSB0eXBlb2YgYXJncy50b3BpYyA9PT0gXCJzdHJpbmdcIiA/IGFyZ3MudG9waWMudG9Mb3dlckNhc2UoKS50cmltKCkgOiBcIlwiO1xuICAgICAgaWYgKCF0b3BpYykge1xuICAgICAgICByZXR1cm4gXCJObyB0b3BpYyBwcm92aWRlZC4gUGxlYXNlIHN1cHBseSBhIHRvcGljIHN0cmluZy5cIjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZhcUVudHJpZXMgPSBhd2FpdCByZWFkQ29tcGFueUZhcSgpO1xuICAgICAgY29uc3QgZGlyZWN0SGl0ID0gZmFxRW50cmllcy5maW5kKChlbnRyeSkgPT4gZW50cnkudG9waWMudG9Mb3dlckNhc2UoKSA9PT0gdG9waWMpO1xuICAgICAgaWYgKGRpcmVjdEhpdCkge1xuICAgICAgICByZXR1cm4gZGlyZWN0SGl0LmFuc3dlcjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlbGF0ZWQgPSBmYXFFbnRyaWVzLmZpbHRlcigoZW50cnkpID0+IGVudHJ5LnRvcGljLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModG9waWMpKTtcbiAgICAgIGlmIChyZWxhdGVkLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVsYXRlZC5tYXAoKGVudHJ5KSA9PiBg4oCiICR7ZW50cnkudG9waWN9OiAke2VudHJ5LmFuc3dlcn1gKS5qb2luKFwiXFxuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGBObyBGQVEgZW50cmllcyBmb3VuZCBmb3IgJyR7dG9waWN9Jy5gO1xuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgQVZBSUxBQkxFX1RPT0xfTUVUQURBVEE6IFRvb2xNZXRhRGVmaW5pdGlvbltdID0gT2JqZWN0LnZhbHVlcyhUT09MX1JFR0lTVFJZKS5tYXAoXG4gICh7IGlkLCBsYWJlbCwgZGVzY3JpcHRpb24gfSkgPT4gKHsgaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiB9KVxuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZW5BSVRvb2xEZWZpbml0aW9ucyhzZWxlY3RlZDogc3RyaW5nW10pIHtcbiAgcmV0dXJuIHNlbGVjdGVkXG4gICAgLm1hcCgodG9vbElkKSA9PiBUT09MX1JFR0lTVFJZW3Rvb2xJZF0pXG4gICAgLmZpbHRlcihCb29sZWFuKVxuICAgIC5tYXAoKHRvb2wpID0+IHRvb2wub3BlbkFJVG9vbCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNvbHZlVG9vbENhbGxzKHRvb2xDYWxsczogVG9vbENhbGxbXSkge1xuICBjb25zdCBvdXRwdXRzID0gW10gYXMgQXJyYXk8eyB0b29sX2NhbGxfaWQ6IHN0cmluZzsgb3V0cHV0OiBzdHJpbmcgfT47XG5cbiAgZm9yIChjb25zdCBjYWxsIG9mIHRvb2xDYWxscykge1xuICAgIGlmIChjYWxsLnR5cGUgIT09IFwiZnVuY3Rpb25cIiB8fCAhY2FsbC5mdW5jdGlvbikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZSwgYXJndW1lbnRzOiBhcmdzSnNvbiB9ID0gY2FsbC5mdW5jdGlvbjtcbiAgICBjb25zdCB0b29sID0gT2JqZWN0LnZhbHVlcyhUT09MX1JFR0lTVFJZKS5maW5kKChlbnRyeSkgPT4gZW50cnkub3BlbkFJVG9vbC5mdW5jdGlvbi5uYW1lID09PSBuYW1lKTtcbiAgICBpZiAoIXRvb2wpIHtcbiAgICAgIG91dHB1dHMucHVzaCh7XG4gICAgICAgIHRvb2xfY2FsbF9pZDogY2FsbC5pZCxcbiAgICAgICAgb3V0cHV0OiBgVG9vbCAnJHtuYW1lfScgaXMgbm90IGltcGxlbWVudGVkIG9uIHRoZSBzZXJ2ZXIuYCxcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBhcmdzSnNvbiA/IChKU09OLnBhcnNlKGFyZ3NKc29uKSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikgOiB7fTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRvb2wuaGFuZGxlcihhcmdzKTtcbiAgICAgIG91dHB1dHMucHVzaCh7XG4gICAgICAgIHRvb2xfY2FsbF9pZDogY2FsbC5pZCxcbiAgICAgICAgb3V0cHV0OiB0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiID8gcmVzdWx0IDogSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvdXRwdXRzLnB1c2goe1xuICAgICAgICB0b29sX2NhbGxfaWQ6IGNhbGwuaWQsXG4gICAgICAgIG91dHB1dDogYFRvb2wgZXhlY3V0aW9uIGZhaWxlZDogJHsoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2V9YCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXRzO1xufVxuIl0sIm5hbWVzIjpbImZzIiwicGF0aCIsInJlYWRDb21wYW55RmFxIiwiZmlsZVBhdGgiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsInJhdyIsInJlYWRGaWxlIiwiSlNPTiIsInBhcnNlIiwiVE9PTF9SRUdJU1RSWSIsInRpbWUiLCJpZCIsImxhYmVsIiwiZGVzY3JpcHRpb24iLCJvcGVuQUlUb29sIiwidHlwZSIsImZ1bmN0aW9uIiwibmFtZSIsInBhcmFtZXRlcnMiLCJwcm9wZXJ0aWVzIiwidGltZXpvbmUiLCJoYW5kbGVyIiwiYXJncyIsInR6IiwidHJpbSIsInVuZGVmaW5lZCIsIm5vdyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImZvcm1hdHRlciIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInRpbWVab25lIiwiZGF0ZVN0eWxlIiwidGltZVN0eWxlIiwiZm9ybWF0IiwiZXJyb3IiLCJjb21wYW55X2ZhcSIsInRvcGljIiwicmVxdWlyZWQiLCJ0b0xvd2VyQ2FzZSIsImZhcUVudHJpZXMiLCJkaXJlY3RIaXQiLCJmaW5kIiwiZW50cnkiLCJhbnN3ZXIiLCJyZWxhdGVkIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJsZW5ndGgiLCJtYXAiLCJBVkFJTEFCTEVfVE9PTF9NRVRBREFUQSIsIk9iamVjdCIsInZhbHVlcyIsImdldE9wZW5BSVRvb2xEZWZpbml0aW9ucyIsInNlbGVjdGVkIiwidG9vbElkIiwiQm9vbGVhbiIsInRvb2wiLCJyZXNvbHZlVG9vbENhbGxzIiwidG9vbENhbGxzIiwib3V0cHV0cyIsImNhbGwiLCJhcmd1bWVudHMiLCJhcmdzSnNvbiIsInB1c2giLCJ0b29sX2NhbGxfaWQiLCJvdXRwdXQiLCJyZXN1bHQiLCJzdHJpbmdpZnkiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/tools.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/tr46","vendor-chunks/@upstash","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/uncrypto"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&page=%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2F%5BthreadId%5D%2Fmessages%2Froute.ts&appDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fchris%2FCode%2FAI%20Makerspace%2FEvents%2FOpenAI%20Responses%20API%2Fchatgpt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();