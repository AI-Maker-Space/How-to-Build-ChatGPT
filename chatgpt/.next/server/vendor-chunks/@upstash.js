"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@upstash";
exports.ids = ["vendor-chunks/@upstash"];
exports.modules = {

/***/ "(rsc)/./node_modules/@upstash/redis/chunk-XJQAWEWD.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@upstash/redis/chunk-XJQAWEWD.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient),\n/* harmony export */   Redis: () => (/* binding */ Redis),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   error_exports: () => (/* binding */ error_exports)\n/* harmony export */ });\n/* harmony import */ var uncrypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uncrypto */ \"(rsc)/./node_modules/uncrypto/dist/crypto.node.mjs\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// pkg/error.ts\nvar error_exports = {};\n__export(error_exports, {\n    UpstashError: ()=>UpstashError,\n    UrlError: ()=>UrlError\n});\nvar UpstashError = class extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"UpstashError\";\n    }\n};\nvar UrlError = class extends Error {\n    constructor(url){\n        super(`Upstash Redis client was passed an invalid URL. You should pass a URL starting with https. Received: \"${url}\". `);\n        this.name = \"UrlError\";\n    }\n};\n// pkg/util.ts\nfunction parseRecursive(obj) {\n    const parsed = Array.isArray(obj) ? obj.map((o)=>{\n        try {\n            return parseRecursive(o);\n        } catch  {\n            return o;\n        }\n    }) : JSON.parse(obj);\n    if (typeof parsed === \"number\" && parsed.toString() !== obj) {\n        return obj;\n    }\n    return parsed;\n}\nfunction parseResponse(result) {\n    try {\n        return parseRecursive(result);\n    } catch  {\n        return result;\n    }\n}\nfunction deserializeScanResponse(result) {\n    return [\n        result[0],\n        ...parseResponse(result.slice(1))\n    ];\n}\nfunction deserializeScanWithTypesResponse(result) {\n    const [cursor, keys] = result;\n    const parsedKeys = [];\n    for(let i = 0; i < keys.length; i += 2){\n        parsedKeys.push({\n            key: keys[i],\n            type: keys[i + 1]\n        });\n    }\n    return [\n        cursor,\n        parsedKeys\n    ];\n}\nfunction mergeHeaders(...headers) {\n    const merged = {};\n    for (const header of headers){\n        if (!header) continue;\n        for (const [key, value] of Object.entries(header)){\n            if (value !== void 0 && value !== null) {\n                merged[key] = value;\n            }\n        }\n    }\n    return merged;\n}\n// pkg/http.ts\nvar HttpClient = class {\n    constructor(config){\n        this.upstashSyncToken = \"\";\n        this.options = {\n            backend: config.options?.backend,\n            agent: config.agent,\n            responseEncoding: config.responseEncoding ?? \"base64\",\n            // default to base64\n            cache: config.cache,\n            signal: config.signal,\n            keepAlive: config.keepAlive ?? true\n        };\n        this.upstashSyncToken = \"\";\n        this.readYourWrites = config.readYourWrites ?? true;\n        this.baseUrl = (config.baseUrl || \"\").replace(/\\/$/, \"\");\n        const urlRegex = /^https?:\\/\\/[^\\s#$./?].\\S*$/;\n        if (this.baseUrl && !urlRegex.test(this.baseUrl)) {\n            throw new UrlError(this.baseUrl);\n        }\n        this.headers = {\n            \"Content-Type\": \"application/json\",\n            ...config.headers\n        };\n        this.hasCredentials = Boolean(this.baseUrl && this.headers.authorization.split(\" \")[1]);\n        if (this.options.responseEncoding === \"base64\") {\n            this.headers[\"Upstash-Encoding\"] = \"base64\";\n        }\n        this.retry = typeof config.retry === \"boolean\" && !config.retry ? {\n            attempts: 1,\n            backoff: ()=>0\n        } : {\n            attempts: config.retry?.retries ?? 5,\n            backoff: config.retry?.backoff ?? ((retryCount)=>Math.exp(retryCount) * 50)\n        };\n    }\n    mergeTelemetry(telemetry) {\n        this.headers = merge(this.headers, \"Upstash-Telemetry-Runtime\", telemetry.runtime);\n        this.headers = merge(this.headers, \"Upstash-Telemetry-Platform\", telemetry.platform);\n        this.headers = merge(this.headers, \"Upstash-Telemetry-Sdk\", telemetry.sdk);\n    }\n    async request(req) {\n        const requestHeaders = mergeHeaders(this.headers, req.headers ?? {});\n        const requestUrl = [\n            this.baseUrl,\n            ...req.path ?? []\n        ].join(\"/\");\n        const isEventStream = requestHeaders.Accept === \"text/event-stream\";\n        const signal = req.signal ?? this.options.signal;\n        const isSignalFunction = typeof signal === \"function\";\n        const requestOptions = {\n            //@ts-expect-error this should throw due to bun regression\n            cache: this.options.cache,\n            method: \"POST\",\n            headers: requestHeaders,\n            body: JSON.stringify(req.body),\n            keepalive: this.options.keepAlive,\n            agent: this.options.agent,\n            signal: isSignalFunction ? signal() : signal,\n            /**\n       * Fastly specific\n       */ backend: this.options.backend\n        };\n        if (!this.hasCredentials) {\n            console.warn(\"[Upstash Redis] Redis client was initialized without url or token. Failed to execute command.\");\n        }\n        if (this.readYourWrites) {\n            const newHeader = this.upstashSyncToken;\n            this.headers[\"upstash-sync-token\"] = newHeader;\n        }\n        let res = null;\n        let error = null;\n        for(let i = 0; i <= this.retry.attempts; i++){\n            try {\n                res = await fetch(requestUrl, requestOptions);\n                break;\n            } catch (error_) {\n                if (requestOptions.signal?.aborted && isSignalFunction) {\n                    throw error_;\n                } else if (requestOptions.signal?.aborted) {\n                    const myBlob = new Blob([\n                        JSON.stringify({\n                            result: requestOptions.signal.reason ?? \"Aborted\"\n                        })\n                    ]);\n                    const myOptions = {\n                        status: 200,\n                        statusText: requestOptions.signal.reason ?? \"Aborted\"\n                    };\n                    res = new Response(myBlob, myOptions);\n                    break;\n                }\n                error = error_;\n                if (i < this.retry.attempts) {\n                    await new Promise((r)=>setTimeout(r, this.retry.backoff(i)));\n                }\n            }\n        }\n        if (!res) {\n            throw error ?? new Error(\"Exhausted all retries\");\n        }\n        if (!res.ok) {\n            const body2 = await res.json();\n            throw new UpstashError(`${body2.error}, command was: ${JSON.stringify(req.body)}`);\n        }\n        if (this.readYourWrites) {\n            const headers = res.headers;\n            this.upstashSyncToken = headers.get(\"upstash-sync-token\") ?? \"\";\n        }\n        if (isEventStream && req && req.onMessage && res.body) {\n            const reader = res.body.getReader();\n            const decoder = new TextDecoder();\n            (async ()=>{\n                try {\n                    while(true){\n                        const { value, done } = await reader.read();\n                        if (done) break;\n                        const chunk = decoder.decode(value);\n                        const lines = chunk.split(\"\\n\");\n                        for (const line of lines){\n                            if (line.startsWith(\"data: \")) {\n                                const data = line.slice(6);\n                                req.onMessage?.(data);\n                            }\n                        }\n                    }\n                } catch (error2) {\n                    if (error2 instanceof Error && error2.name === \"AbortError\") {} else {\n                        console.error(\"Stream reading error:\", error2);\n                    }\n                } finally{\n                    try {\n                        await reader.cancel();\n                    } catch  {}\n                }\n            })();\n            return {\n                result: 1\n            };\n        }\n        const body = await res.json();\n        if (this.readYourWrites) {\n            const headers = res.headers;\n            this.upstashSyncToken = headers.get(\"upstash-sync-token\") ?? \"\";\n        }\n        if (this.options.responseEncoding === \"base64\") {\n            if (Array.isArray(body)) {\n                return body.map(({ result: result2, error: error2 })=>({\n                        result: decode(result2),\n                        error: error2\n                    }));\n            }\n            const result = decode(body.result);\n            return {\n                result,\n                error: body.error\n            };\n        }\n        return body;\n    }\n};\nfunction base64decode(b64) {\n    let dec = \"\";\n    try {\n        const binString = atob(b64);\n        const size = binString.length;\n        const bytes = new Uint8Array(size);\n        for(let i = 0; i < size; i++){\n            bytes[i] = binString.charCodeAt(i);\n        }\n        dec = new TextDecoder().decode(bytes);\n    } catch  {\n        dec = b64;\n    }\n    return dec;\n}\nfunction decode(raw) {\n    let result = void 0;\n    switch(typeof raw){\n        case \"undefined\":\n            {\n                return raw;\n            }\n        case \"number\":\n            {\n                result = raw;\n                break;\n            }\n        case \"object\":\n            {\n                if (Array.isArray(raw)) {\n                    result = raw.map((v)=>typeof v === \"string\" ? base64decode(v) : Array.isArray(v) ? v.map((element)=>decode(element)) : v);\n                } else {\n                    result = null;\n                }\n                break;\n            }\n        case \"string\":\n            {\n                result = raw === \"OK\" ? \"OK\" : base64decode(raw);\n                break;\n            }\n        default:\n            {\n                break;\n            }\n    }\n    return result;\n}\nfunction merge(obj, key, value) {\n    if (!value) {\n        return obj;\n    }\n    obj[key] = obj[key] ? [\n        obj[key],\n        value\n    ].join(\",\") : value;\n    return obj;\n}\n// pkg/commands/command.ts\nvar defaultSerializer = (c)=>{\n    switch(typeof c){\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n            {\n                return c;\n            }\n        default:\n            {\n                return JSON.stringify(c);\n            }\n    }\n};\nvar Command = class {\n    /**\n   * Create a new command instance.\n   *\n   * You can define a custom `deserialize` function. By default we try to deserialize as json.\n   */ constructor(command, opts){\n        this.serialize = defaultSerializer;\n        this.deserialize = opts?.automaticDeserialization === void 0 || opts.automaticDeserialization ? opts?.deserialize ?? parseResponse : (x)=>x;\n        this.command = command.map((c)=>this.serialize(c));\n        this.headers = opts?.headers;\n        this.path = opts?.path;\n        this.onMessage = opts?.streamOptions?.onMessage;\n        this.isStreaming = opts?.streamOptions?.isStreaming ?? false;\n        this.signal = opts?.streamOptions?.signal;\n        if (opts?.latencyLogging) {\n            const originalExec = this.exec.bind(this);\n            this.exec = async (client)=>{\n                const start = performance.now();\n                const result = await originalExec(client);\n                const end = performance.now();\n                const loggerResult = (end - start).toFixed(2);\n                console.log(`Latency for \\x1B[38;2;19;185;39m${this.command[0].toString().toUpperCase()}\\x1B[0m: \\x1B[38;2;0;255;255m${loggerResult} ms\\x1B[0m`);\n                return result;\n            };\n        }\n    }\n    /**\n   * Execute the command using a client.\n   */ async exec(client) {\n        const { result, error } = await client.request({\n            body: this.command,\n            path: this.path,\n            upstashSyncToken: client.upstashSyncToken,\n            headers: this.headers,\n            onMessage: this.onMessage,\n            isStreaming: this.isStreaming,\n            signal: this.signal\n        });\n        if (error) {\n            throw new UpstashError(error);\n        }\n        if (result === void 0) {\n            throw new TypeError(\"Request did not return a result\");\n        }\n        return this.deserialize(result);\n    }\n};\n// pkg/commands/hrandfield.ts\nfunction deserialize(result) {\n    if (result.length === 0) {\n        return null;\n    }\n    const obj = {};\n    for(let i = 0; i < result.length; i += 2){\n        const key = result[i];\n        const value = result[i + 1];\n        try {\n            obj[key] = JSON.parse(value);\n        } catch  {\n            obj[key] = value;\n        }\n    }\n    return obj;\n}\nvar HRandFieldCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"hrandfield\",\n            cmd[0]\n        ];\n        if (typeof cmd[1] === \"number\") {\n            command.push(cmd[1]);\n        }\n        if (cmd[2]) {\n            command.push(\"WITHVALUES\");\n        }\n        super(command, {\n            // @ts-expect-error to silence compiler\n            deserialize: cmd[2] ? (result)=>deserialize(result) : opts?.deserialize,\n            ...opts\n        });\n    }\n};\n// pkg/commands/append.ts\nvar AppendCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"append\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/bitcount.ts\nvar BitCountCommand = class extends Command {\n    constructor([key, start, end], opts){\n        const command = [\n            \"bitcount\",\n            key\n        ];\n        if (typeof start === \"number\") {\n            command.push(start);\n        }\n        if (typeof end === \"number\") {\n            command.push(end);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/bitfield.ts\nvar BitFieldCommand = class {\n    constructor(args, client, opts, execOperation = (command)=>command.exec(this.client)){\n        this.client = client;\n        this.opts = opts;\n        this.execOperation = execOperation;\n        this.command = [\n            \"bitfield\",\n            ...args\n        ];\n    }\n    chain(...args) {\n        this.command.push(...args);\n        return this;\n    }\n    get(...args) {\n        return this.chain(\"get\", ...args);\n    }\n    set(...args) {\n        return this.chain(\"set\", ...args);\n    }\n    incrby(...args) {\n        return this.chain(\"incrby\", ...args);\n    }\n    overflow(overflow) {\n        return this.chain(\"overflow\", overflow);\n    }\n    exec() {\n        const command = new Command(this.command, this.opts);\n        return this.execOperation(command);\n    }\n};\n// pkg/commands/bitop.ts\nvar BitOpCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"bitop\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/bitpos.ts\nvar BitPosCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"bitpos\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/copy.ts\nvar CopyCommand = class extends Command {\n    constructor([key, destinationKey, opts], commandOptions){\n        super([\n            \"COPY\",\n            key,\n            destinationKey,\n            ...opts?.replace ? [\n                \"REPLACE\"\n            ] : []\n        ], {\n            ...commandOptions,\n            deserialize (result) {\n                if (result > 0) {\n                    return \"COPIED\";\n                }\n                return \"NOT_COPIED\";\n            }\n        });\n    }\n};\n// pkg/commands/dbsize.ts\nvar DBSizeCommand = class extends Command {\n    constructor(opts){\n        super([\n            \"dbsize\"\n        ], opts);\n    }\n};\n// pkg/commands/decr.ts\nvar DecrCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"decr\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/decrby.ts\nvar DecrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"decrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/del.ts\nvar DelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"del\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/echo.ts\nvar EchoCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"echo\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/evalRo.ts\nvar EvalROCommand = class extends Command {\n    constructor([script, keys, args], opts){\n        super([\n            \"eval_ro\",\n            script,\n            keys.length,\n            ...keys,\n            ...args ?? []\n        ], opts);\n    }\n};\n// pkg/commands/eval.ts\nvar EvalCommand = class extends Command {\n    constructor([script, keys, args], opts){\n        super([\n            \"eval\",\n            script,\n            keys.length,\n            ...keys,\n            ...args ?? []\n        ], opts);\n    }\n};\n// pkg/commands/evalshaRo.ts\nvar EvalshaROCommand = class extends Command {\n    constructor([sha, keys, args], opts){\n        super([\n            \"evalsha_ro\",\n            sha,\n            keys.length,\n            ...keys,\n            ...args ?? []\n        ], opts);\n    }\n};\n// pkg/commands/evalsha.ts\nvar EvalshaCommand = class extends Command {\n    constructor([sha, keys, args], opts){\n        super([\n            \"evalsha\",\n            sha,\n            keys.length,\n            ...keys,\n            ...args ?? []\n        ], opts);\n    }\n};\n// pkg/commands/exec.ts\nvar ExecCommand = class extends Command {\n    constructor(cmd, opts){\n        const normalizedCmd = cmd.map((arg)=>typeof arg === \"string\" ? arg : String(arg));\n        super(normalizedCmd, opts);\n    }\n};\n// pkg/commands/exists.ts\nvar ExistsCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"exists\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/expire.ts\nvar ExpireCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"expire\",\n            ...cmd.filter(Boolean)\n        ], opts);\n    }\n};\n// pkg/commands/expireat.ts\nvar ExpireAtCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"expireat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/flushall.ts\nvar FlushAllCommand = class extends Command {\n    constructor(args, opts){\n        const command = [\n            \"flushall\"\n        ];\n        if (args && args.length > 0 && args[0].async) {\n            command.push(\"async\");\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/flushdb.ts\nvar FlushDBCommand = class extends Command {\n    constructor([opts], cmdOpts){\n        const command = [\n            \"flushdb\"\n        ];\n        if (opts?.async) {\n            command.push(\"async\");\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/geo_add.ts\nvar GeoAddCommand = class extends Command {\n    constructor([key, arg1, ...arg2], opts){\n        const command = [\n            \"geoadd\",\n            key\n        ];\n        if (\"nx\" in arg1 && arg1.nx) {\n            command.push(\"nx\");\n        } else if (\"xx\" in arg1 && arg1.xx) {\n            command.push(\"xx\");\n        }\n        if (\"ch\" in arg1 && arg1.ch) {\n            command.push(\"ch\");\n        }\n        if (\"latitude\" in arg1 && arg1.latitude) {\n            command.push(arg1.longitude, arg1.latitude, arg1.member);\n        }\n        command.push(...arg2.flatMap(({ latitude, longitude, member })=>[\n                longitude,\n                latitude,\n                member\n            ]));\n        super(command, opts);\n    }\n};\n// pkg/commands/geo_dist.ts\nvar GeoDistCommand = class extends Command {\n    constructor([key, member1, member2, unit = \"M\"], opts){\n        super([\n            \"GEODIST\",\n            key,\n            member1,\n            member2,\n            unit\n        ], opts);\n    }\n};\n// pkg/commands/geo_hash.ts\nvar GeoHashCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key] = cmd;\n        const members = Array.isArray(cmd[1]) ? cmd[1] : cmd.slice(1);\n        super([\n            \"GEOHASH\",\n            key,\n            ...members\n        ], opts);\n    }\n};\n// pkg/commands/geo_pos.ts\nvar GeoPosCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key] = cmd;\n        const members = Array.isArray(cmd[1]) ? cmd[1] : cmd.slice(1);\n        super([\n            \"GEOPOS\",\n            key,\n            ...members\n        ], {\n            deserialize: (result)=>transform(result),\n            ...opts\n        });\n    }\n};\nfunction transform(result) {\n    const final = [];\n    for (const pos of result){\n        if (!pos?.[0] || !pos?.[1]) {\n            continue;\n        }\n        final.push({\n            lng: Number.parseFloat(pos[0]),\n            lat: Number.parseFloat(pos[1])\n        });\n    }\n    return final;\n}\n// pkg/commands/geo_search.ts\nvar GeoSearchCommand = class extends Command {\n    constructor([key, centerPoint, shape, order, opts], commandOptions){\n        const command = [\n            \"GEOSEARCH\",\n            key\n        ];\n        if (centerPoint.type === \"FROMMEMBER\" || centerPoint.type === \"frommember\") {\n            command.push(centerPoint.type, centerPoint.member);\n        }\n        if (centerPoint.type === \"FROMLONLAT\" || centerPoint.type === \"fromlonlat\") {\n            command.push(centerPoint.type, centerPoint.coordinate.lon, centerPoint.coordinate.lat);\n        }\n        if (shape.type === \"BYRADIUS\" || shape.type === \"byradius\") {\n            command.push(shape.type, shape.radius, shape.radiusType);\n        }\n        if (shape.type === \"BYBOX\" || shape.type === \"bybox\") {\n            command.push(shape.type, shape.rect.width, shape.rect.height, shape.rectType);\n        }\n        command.push(order);\n        if (opts?.count) {\n            command.push(\"COUNT\", opts.count.limit, ...opts.count.any ? [\n                \"ANY\"\n            ] : []);\n        }\n        const transform2 = (result)=>{\n            if (!opts?.withCoord && !opts?.withDist && !opts?.withHash) {\n                return result.map((member)=>{\n                    try {\n                        return {\n                            member: JSON.parse(member)\n                        };\n                    } catch  {\n                        return {\n                            member\n                        };\n                    }\n                });\n            }\n            return result.map((members)=>{\n                let counter = 1;\n                const obj = {};\n                try {\n                    obj.member = JSON.parse(members[0]);\n                } catch  {\n                    obj.member = members[0];\n                }\n                if (opts.withDist) {\n                    obj.dist = Number.parseFloat(members[counter++]);\n                }\n                if (opts.withHash) {\n                    obj.hash = members[counter++].toString();\n                }\n                if (opts.withCoord) {\n                    obj.coord = {\n                        long: Number.parseFloat(members[counter][0]),\n                        lat: Number.parseFloat(members[counter][1])\n                    };\n                }\n                return obj;\n            });\n        };\n        super([\n            ...command,\n            ...opts?.withCoord ? [\n                \"WITHCOORD\"\n            ] : [],\n            ...opts?.withDist ? [\n                \"WITHDIST\"\n            ] : [],\n            ...opts?.withHash ? [\n                \"WITHHASH\"\n            ] : []\n        ], {\n            deserialize: transform2,\n            ...commandOptions\n        });\n    }\n};\n// pkg/commands/geo_search_store.ts\nvar GeoSearchStoreCommand = class extends Command {\n    constructor([destination, key, centerPoint, shape, order, opts], commandOptions){\n        const command = [\n            \"GEOSEARCHSTORE\",\n            destination,\n            key\n        ];\n        if (centerPoint.type === \"FROMMEMBER\" || centerPoint.type === \"frommember\") {\n            command.push(centerPoint.type, centerPoint.member);\n        }\n        if (centerPoint.type === \"FROMLONLAT\" || centerPoint.type === \"fromlonlat\") {\n            command.push(centerPoint.type, centerPoint.coordinate.lon, centerPoint.coordinate.lat);\n        }\n        if (shape.type === \"BYRADIUS\" || shape.type === \"byradius\") {\n            command.push(shape.type, shape.radius, shape.radiusType);\n        }\n        if (shape.type === \"BYBOX\" || shape.type === \"bybox\") {\n            command.push(shape.type, shape.rect.width, shape.rect.height, shape.rectType);\n        }\n        command.push(order);\n        if (opts?.count) {\n            command.push(\"COUNT\", opts.count.limit, ...opts.count.any ? [\n                \"ANY\"\n            ] : []);\n        }\n        super([\n            ...command,\n            ...opts?.storeDist ? [\n                \"STOREDIST\"\n            ] : []\n        ], commandOptions);\n    }\n};\n// pkg/commands/get.ts\nvar GetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"get\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getbit.ts\nvar GetBitCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getbit\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getdel.ts\nvar GetDelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getdel\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getex.ts\nvar GetExCommand = class extends Command {\n    constructor([key, opts], cmdOpts){\n        const command = [\n            \"getex\",\n            key\n        ];\n        if (opts) {\n            if (\"ex\" in opts && typeof opts.ex === \"number\") {\n                command.push(\"ex\", opts.ex);\n            } else if (\"px\" in opts && typeof opts.px === \"number\") {\n                command.push(\"px\", opts.px);\n            } else if (\"exat\" in opts && typeof opts.exat === \"number\") {\n                command.push(\"exat\", opts.exat);\n            } else if (\"pxat\" in opts && typeof opts.pxat === \"number\") {\n                command.push(\"pxat\", opts.pxat);\n            } else if (\"persist\" in opts && opts.persist) {\n                command.push(\"persist\");\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/getrange.ts\nvar GetRangeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getrange\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getset.ts\nvar GetSetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getset\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hdel.ts\nvar HDelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hdel\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hexists.ts\nvar HExistsCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hexists\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hexpire.ts\nvar HExpireCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields, seconds, option] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hexpire\",\n            key,\n            seconds,\n            ...option ? [\n                option\n            ] : [],\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hexpireat.ts\nvar HExpireAtCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields, timestamp, option] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hexpireat\",\n            key,\n            timestamp,\n            ...option ? [\n                option\n            ] : [],\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hexpiretime.ts\nvar HExpireTimeCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hexpiretime\",\n            key,\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hpersist.ts\nvar HPersistCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hpersist\",\n            key,\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hpexpire.ts\nvar HPExpireCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields, milliseconds, option] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hpexpire\",\n            key,\n            milliseconds,\n            ...option ? [\n                option\n            ] : [],\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hpexpireat.ts\nvar HPExpireAtCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields, timestamp, option] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hpexpireat\",\n            key,\n            timestamp,\n            ...option ? [\n                option\n            ] : [],\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hpexpiretime.ts\nvar HPExpireTimeCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hpexpiretime\",\n            key,\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hpttl.ts\nvar HPTtlCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"hpttl\",\n            key,\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hget.ts\nvar HGetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hget\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hgetall.ts\nfunction deserialize2(result) {\n    if (result.length === 0) {\n        return null;\n    }\n    const obj = {};\n    for(let i = 0; i < result.length; i += 2){\n        const key = result[i];\n        const value = result[i + 1];\n        try {\n            const valueIsNumberAndNotSafeInteger = !Number.isNaN(Number(value)) && !Number.isSafeInteger(Number(value));\n            obj[key] = valueIsNumberAndNotSafeInteger ? value : JSON.parse(value);\n        } catch  {\n            obj[key] = value;\n        }\n    }\n    return obj;\n}\nvar HGetAllCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hgetall\",\n            ...cmd\n        ], {\n            deserialize: (result)=>deserialize2(result),\n            ...opts\n        });\n    }\n};\n// pkg/commands/hincrby.ts\nvar HIncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hincrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hincrbyfloat.ts\nvar HIncrByFloatCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hincrbyfloat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hkeys.ts\nvar HKeysCommand = class extends Command {\n    constructor([key], opts){\n        super([\n            \"hkeys\",\n            key\n        ], opts);\n    }\n};\n// pkg/commands/hlen.ts\nvar HLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hlen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hmget.ts\nfunction deserialize3(fields, result) {\n    if (result.every((field)=>field === null)) {\n        return null;\n    }\n    const obj = {};\n    for (const [i, field] of fields.entries()){\n        try {\n            obj[field] = JSON.parse(result[i]);\n        } catch  {\n            obj[field] = result[i];\n        }\n    }\n    return obj;\n}\nvar HMGetCommand = class extends Command {\n    constructor([key, ...fields], opts){\n        super([\n            \"hmget\",\n            key,\n            ...fields\n        ], {\n            deserialize: (result)=>deserialize3(fields, result),\n            ...opts\n        });\n    }\n};\n// pkg/commands/hmset.ts\nvar HMSetCommand = class extends Command {\n    constructor([key, kv], opts){\n        super([\n            \"hmset\",\n            key,\n            ...Object.entries(kv).flatMap(([field, value])=>[\n                    field,\n                    value\n                ])\n        ], opts);\n    }\n};\n// pkg/commands/hscan.ts\nvar HScanCommand = class extends Command {\n    constructor([key, cursor, cmdOpts], opts){\n        const command = [\n            \"hscan\",\n            key,\n            cursor\n        ];\n        if (cmdOpts?.match) {\n            command.push(\"match\", cmdOpts.match);\n        }\n        if (typeof cmdOpts?.count === \"number\") {\n            command.push(\"count\", cmdOpts.count);\n        }\n        super(command, {\n            deserialize: deserializeScanResponse,\n            ...opts\n        });\n    }\n};\n// pkg/commands/hset.ts\nvar HSetCommand = class extends Command {\n    constructor([key, kv], opts){\n        super([\n            \"hset\",\n            key,\n            ...Object.entries(kv).flatMap(([field, value])=>[\n                    field,\n                    value\n                ])\n        ], opts);\n    }\n};\n// pkg/commands/hsetnx.ts\nvar HSetNXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hsetnx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hstrlen.ts\nvar HStrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hstrlen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/httl.ts\nvar HTtlCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, fields] = cmd;\n        const fieldArray = Array.isArray(fields) ? fields : [\n            fields\n        ];\n        super([\n            \"httl\",\n            key,\n            \"FIELDS\",\n            fieldArray.length,\n            ...fieldArray\n        ], opts);\n    }\n};\n// pkg/commands/hvals.ts\nvar HValsCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hvals\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/incr.ts\nvar IncrCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"incr\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/incrby.ts\nvar IncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"incrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/incrbyfloat.ts\nvar IncrByFloatCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"incrbyfloat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrappend.ts\nvar JsonArrAppendCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRAPPEND\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrindex.ts\nvar JsonArrIndexCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRINDEX\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrinsert.ts\nvar JsonArrInsertCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRINSERT\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrlen.ts\nvar JsonArrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRLEN\",\n            cmd[0],\n            cmd[1] ?? \"$\"\n        ], opts);\n    }\n};\n// pkg/commands/json_arrpop.ts\nvar JsonArrPopCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRPOP\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrtrim.ts\nvar JsonArrTrimCommand = class extends Command {\n    constructor(cmd, opts){\n        const path = cmd[1] ?? \"$\";\n        const start = cmd[2] ?? 0;\n        const stop = cmd[3] ?? 0;\n        super([\n            \"JSON.ARRTRIM\",\n            cmd[0],\n            path,\n            start,\n            stop\n        ], opts);\n    }\n};\n// pkg/commands/json_clear.ts\nvar JsonClearCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.CLEAR\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_del.ts\nvar JsonDelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.DEL\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_forget.ts\nvar JsonForgetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.FORGET\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_get.ts\nvar JsonGetCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"JSON.GET\"\n        ];\n        if (typeof cmd[1] === \"string\") {\n            command.push(...cmd);\n        } else {\n            command.push(cmd[0]);\n            if (cmd[1]) {\n                if (cmd[1].indent) {\n                    command.push(\"INDENT\", cmd[1].indent);\n                }\n                if (cmd[1].newline) {\n                    command.push(\"NEWLINE\", cmd[1].newline);\n                }\n                if (cmd[1].space) {\n                    command.push(\"SPACE\", cmd[1].space);\n                }\n            }\n            command.push(...cmd.slice(2));\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/json_merge.ts\nvar JsonMergeCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"JSON.MERGE\",\n            ...cmd\n        ];\n        super(command, opts);\n    }\n};\n// pkg/commands/json_mget.ts\nvar JsonMGetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.MGET\",\n            ...cmd[0],\n            cmd[1]\n        ], opts);\n    }\n};\n// pkg/commands/json_mset.ts\nvar JsonMSetCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"JSON.MSET\"\n        ];\n        for (const c of cmd){\n            command.push(c.key, c.path, c.value);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/json_numincrby.ts\nvar JsonNumIncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.NUMINCRBY\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_nummultby.ts\nvar JsonNumMultByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.NUMMULTBY\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_objkeys.ts\nvar JsonObjKeysCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.OBJKEYS\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_objlen.ts\nvar JsonObjLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.OBJLEN\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_resp.ts\nvar JsonRespCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.RESP\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_set.ts\nvar JsonSetCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"JSON.SET\",\n            cmd[0],\n            cmd[1],\n            cmd[2]\n        ];\n        if (cmd[3]) {\n            if (cmd[3].nx) {\n                command.push(\"NX\");\n            } else if (cmd[3].xx) {\n                command.push(\"XX\");\n            }\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/json_strappend.ts\nvar JsonStrAppendCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.STRAPPEND\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_strlen.ts\nvar JsonStrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.STRLEN\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_toggle.ts\nvar JsonToggleCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.TOGGLE\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_type.ts\nvar JsonTypeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.TYPE\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/keys.ts\nvar KeysCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"keys\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lindex.ts\nvar LIndexCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lindex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/linsert.ts\nvar LInsertCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"linsert\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/llen.ts\nvar LLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"llen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lmove.ts\nvar LMoveCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lmove\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lmpop.ts\nvar LmPopCommand = class extends Command {\n    constructor(cmd, opts){\n        const [numkeys, keys, direction, count] = cmd;\n        super([\n            \"LMPOP\",\n            numkeys,\n            ...keys,\n            direction,\n            ...count ? [\n                \"COUNT\",\n                count\n            ] : []\n        ], opts);\n    }\n};\n// pkg/commands/lpop.ts\nvar LPopCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lpop\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lpos.ts\nvar LPosCommand = class extends Command {\n    constructor(cmd, opts){\n        const args = [\n            \"lpos\",\n            cmd[0],\n            cmd[1]\n        ];\n        if (typeof cmd[2]?.rank === \"number\") {\n            args.push(\"rank\", cmd[2].rank);\n        }\n        if (typeof cmd[2]?.count === \"number\") {\n            args.push(\"count\", cmd[2].count);\n        }\n        if (typeof cmd[2]?.maxLen === \"number\") {\n            args.push(\"maxLen\", cmd[2].maxLen);\n        }\n        super(args, opts);\n    }\n};\n// pkg/commands/lpush.ts\nvar LPushCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lpush\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lpushx.ts\nvar LPushXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lpushx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lrange.ts\nvar LRangeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lrange\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lrem.ts\nvar LRemCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lrem\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lset.ts\nvar LSetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lset\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/ltrim.ts\nvar LTrimCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"ltrim\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/mget.ts\nvar MGetCommand = class extends Command {\n    constructor(cmd, opts){\n        const keys = Array.isArray(cmd[0]) ? cmd[0] : cmd;\n        super([\n            \"mget\",\n            ...keys\n        ], opts);\n    }\n};\n// pkg/commands/mset.ts\nvar MSetCommand = class extends Command {\n    constructor([kv], opts){\n        super([\n            \"mset\",\n            ...Object.entries(kv).flatMap(([key, value])=>[\n                    key,\n                    value\n                ])\n        ], opts);\n    }\n};\n// pkg/commands/msetnx.ts\nvar MSetNXCommand = class extends Command {\n    constructor([kv], opts){\n        super([\n            \"msetnx\",\n            ...Object.entries(kv).flat()\n        ], opts);\n    }\n};\n// pkg/commands/persist.ts\nvar PersistCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"persist\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pexpire.ts\nvar PExpireCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pexpire\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pexpireat.ts\nvar PExpireAtCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pexpireat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pfadd.ts\nvar PfAddCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pfadd\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pfcount.ts\nvar PfCountCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pfcount\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pfmerge.ts\nvar PfMergeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pfmerge\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/ping.ts\nvar PingCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"ping\"\n        ];\n        if (cmd?.[0] !== void 0) {\n            command.push(cmd[0]);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/psetex.ts\nvar PSetEXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"psetex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pttl.ts\nvar PTtlCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pttl\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/publish.ts\nvar PublishCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"publish\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/randomkey.ts\nvar RandomKeyCommand = class extends Command {\n    constructor(opts){\n        super([\n            \"randomkey\"\n        ], opts);\n    }\n};\n// pkg/commands/rename.ts\nvar RenameCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rename\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/renamenx.ts\nvar RenameNXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"renamenx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/rpop.ts\nvar RPopCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rpop\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/rpush.ts\nvar RPushCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rpush\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/rpushx.ts\nvar RPushXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rpushx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sadd.ts\nvar SAddCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sadd\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/scan.ts\nvar ScanCommand = class extends Command {\n    constructor([cursor, opts], cmdOpts){\n        const command = [\n            \"scan\",\n            cursor\n        ];\n        if (opts?.match) {\n            command.push(\"match\", opts.match);\n        }\n        if (typeof opts?.count === \"number\") {\n            command.push(\"count\", opts.count);\n        }\n        if (opts && \"withType\" in opts && opts.withType === true) {\n            command.push(\"withtype\");\n        } else if (opts && \"type\" in opts && opts.type && opts.type.length > 0) {\n            command.push(\"type\", opts.type);\n        }\n        super(command, {\n            // @ts-expect-error ignore types here\n            deserialize: opts?.withType ? deserializeScanWithTypesResponse : deserializeScanResponse,\n            ...cmdOpts\n        });\n    }\n};\n// pkg/commands/scard.ts\nvar SCardCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"scard\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/script_exists.ts\nvar ScriptExistsCommand = class extends Command {\n    constructor(hashes, opts){\n        super([\n            \"script\",\n            \"exists\",\n            ...hashes\n        ], {\n            deserialize: (result)=>result,\n            ...opts\n        });\n    }\n};\n// pkg/commands/script_flush.ts\nvar ScriptFlushCommand = class extends Command {\n    constructor([opts], cmdOpts){\n        const cmd = [\n            \"script\",\n            \"flush\"\n        ];\n        if (opts?.sync) {\n            cmd.push(\"sync\");\n        } else if (opts?.async) {\n            cmd.push(\"async\");\n        }\n        super(cmd, cmdOpts);\n    }\n};\n// pkg/commands/script_load.ts\nvar ScriptLoadCommand = class extends Command {\n    constructor(args, opts){\n        super([\n            \"script\",\n            \"load\",\n            ...args\n        ], opts);\n    }\n};\n// pkg/commands/sdiff.ts\nvar SDiffCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sdiff\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sdiffstore.ts\nvar SDiffStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sdiffstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/set.ts\nvar SetCommand = class extends Command {\n    constructor([key, value, opts], cmdOpts){\n        const command = [\n            \"set\",\n            key,\n            value\n        ];\n        if (opts) {\n            if (\"nx\" in opts && opts.nx) {\n                command.push(\"nx\");\n            } else if (\"xx\" in opts && opts.xx) {\n                command.push(\"xx\");\n            }\n            if (\"get\" in opts && opts.get) {\n                command.push(\"get\");\n            }\n            if (\"ex\" in opts && typeof opts.ex === \"number\") {\n                command.push(\"ex\", opts.ex);\n            } else if (\"px\" in opts && typeof opts.px === \"number\") {\n                command.push(\"px\", opts.px);\n            } else if (\"exat\" in opts && typeof opts.exat === \"number\") {\n                command.push(\"exat\", opts.exat);\n            } else if (\"pxat\" in opts && typeof opts.pxat === \"number\") {\n                command.push(\"pxat\", opts.pxat);\n            } else if (\"keepTtl\" in opts && opts.keepTtl) {\n                command.push(\"keepTtl\");\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/setbit.ts\nvar SetBitCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setbit\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/setex.ts\nvar SetExCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/setnx.ts\nvar SetNxCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setnx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/setrange.ts\nvar SetRangeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setrange\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sinter.ts\nvar SInterCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sinter\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sinterstore.ts\nvar SInterStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sinterstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sismember.ts\nvar SIsMemberCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sismember\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/smembers.ts\nvar SMembersCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"smembers\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/smismember.ts\nvar SMIsMemberCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"smismember\",\n            cmd[0],\n            ...cmd[1]\n        ], opts);\n    }\n};\n// pkg/commands/smove.ts\nvar SMoveCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"smove\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/spop.ts\nvar SPopCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"spop\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/srandmember.ts\nvar SRandMemberCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"srandmember\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/srem.ts\nvar SRemCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"srem\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sscan.ts\nvar SScanCommand = class extends Command {\n    constructor([key, cursor, opts], cmdOpts){\n        const command = [\n            \"sscan\",\n            key,\n            cursor\n        ];\n        if (opts?.match) {\n            command.push(\"match\", opts.match);\n        }\n        if (typeof opts?.count === \"number\") {\n            command.push(\"count\", opts.count);\n        }\n        super(command, {\n            deserialize: deserializeScanResponse,\n            ...cmdOpts\n        });\n    }\n};\n// pkg/commands/strlen.ts\nvar StrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"strlen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sunion.ts\nvar SUnionCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sunion\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sunionstore.ts\nvar SUnionStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sunionstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/time.ts\nvar TimeCommand = class extends Command {\n    constructor(opts){\n        super([\n            \"time\"\n        ], opts);\n    }\n};\n// pkg/commands/touch.ts\nvar TouchCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"touch\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/ttl.ts\nvar TtlCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"ttl\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/type.ts\nvar TypeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"type\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/unlink.ts\nvar UnlinkCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"unlink\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/xack.ts\nvar XAckCommand = class extends Command {\n    constructor([key, group, id], opts){\n        const ids = Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ];\n        super([\n            \"XACK\",\n            key,\n            group,\n            ...ids\n        ], opts);\n    }\n};\n// pkg/commands/xadd.ts\nvar XAddCommand = class extends Command {\n    constructor([key, id, entries, opts], commandOptions){\n        const command = [\n            \"XADD\",\n            key\n        ];\n        if (opts) {\n            if (opts.nomkStream) {\n                command.push(\"NOMKSTREAM\");\n            }\n            if (opts.trim) {\n                command.push(opts.trim.type, opts.trim.comparison, opts.trim.threshold);\n                if (opts.trim.limit !== void 0) {\n                    command.push(\"LIMIT\", opts.trim.limit);\n                }\n            }\n        }\n        command.push(id);\n        for (const [k, v] of Object.entries(entries)){\n            command.push(k, v);\n        }\n        super(command, commandOptions);\n    }\n};\n// pkg/commands/xautoclaim.ts\nvar XAutoClaim = class extends Command {\n    constructor([key, group, consumer, minIdleTime, start, options], opts){\n        const commands = [];\n        if (options?.count) {\n            commands.push(\"COUNT\", options.count);\n        }\n        if (options?.justId) {\n            commands.push(\"JUSTID\");\n        }\n        super([\n            \"XAUTOCLAIM\",\n            key,\n            group,\n            consumer,\n            minIdleTime,\n            start,\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xclaim.ts\nvar XClaimCommand = class extends Command {\n    constructor([key, group, consumer, minIdleTime, id, options], opts){\n        const ids = Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ];\n        const commands = [];\n        if (options?.idleMS) {\n            commands.push(\"IDLE\", options.idleMS);\n        }\n        if (options?.idleMS) {\n            commands.push(\"TIME\", options.timeMS);\n        }\n        if (options?.retryCount) {\n            commands.push(\"RETRYCOUNT\", options.retryCount);\n        }\n        if (options?.force) {\n            commands.push(\"FORCE\");\n        }\n        if (options?.justId) {\n            commands.push(\"JUSTID\");\n        }\n        if (options?.lastId) {\n            commands.push(\"LASTID\", options.lastId);\n        }\n        super([\n            \"XCLAIM\",\n            key,\n            group,\n            consumer,\n            minIdleTime,\n            ...ids,\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xdel.ts\nvar XDelCommand = class extends Command {\n    constructor([key, ids], opts){\n        const cmds = Array.isArray(ids) ? [\n            ...ids\n        ] : [\n            ids\n        ];\n        super([\n            \"XDEL\",\n            key,\n            ...cmds\n        ], opts);\n    }\n};\n// pkg/commands/xgroup.ts\nvar XGroupCommand = class extends Command {\n    constructor([key, opts], commandOptions){\n        const command = [\n            \"XGROUP\"\n        ];\n        switch(opts.type){\n            case \"CREATE\":\n                {\n                    command.push(\"CREATE\", key, opts.group, opts.id);\n                    if (opts.options) {\n                        if (opts.options.MKSTREAM) {\n                            command.push(\"MKSTREAM\");\n                        }\n                        if (opts.options.ENTRIESREAD !== void 0) {\n                            command.push(\"ENTRIESREAD\", opts.options.ENTRIESREAD.toString());\n                        }\n                    }\n                    break;\n                }\n            case \"CREATECONSUMER\":\n                {\n                    command.push(\"CREATECONSUMER\", key, opts.group, opts.consumer);\n                    break;\n                }\n            case \"DELCONSUMER\":\n                {\n                    command.push(\"DELCONSUMER\", key, opts.group, opts.consumer);\n                    break;\n                }\n            case \"DESTROY\":\n                {\n                    command.push(\"DESTROY\", key, opts.group);\n                    break;\n                }\n            case \"SETID\":\n                {\n                    command.push(\"SETID\", key, opts.group, opts.id);\n                    if (opts.options?.ENTRIESREAD !== void 0) {\n                        command.push(\"ENTRIESREAD\", opts.options.ENTRIESREAD.toString());\n                    }\n                    break;\n                }\n            default:\n                {\n                    throw new Error(\"Invalid XGROUP\");\n                }\n        }\n        super(command, commandOptions);\n    }\n};\n// pkg/commands/xinfo.ts\nvar XInfoCommand = class extends Command {\n    constructor([key, options], opts){\n        const cmds = [];\n        if (options.type === \"CONSUMERS\") {\n            cmds.push(\"CONSUMERS\", key, options.group);\n        } else {\n            cmds.push(\"GROUPS\", key);\n        }\n        super([\n            \"XINFO\",\n            ...cmds\n        ], opts);\n    }\n};\n// pkg/commands/xlen.ts\nvar XLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"XLEN\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/xpending.ts\nvar XPendingCommand = class extends Command {\n    constructor([key, group, start, end, count, options], opts){\n        const consumers = options?.consumer === void 0 ? [] : Array.isArray(options.consumer) ? [\n            ...options.consumer\n        ] : [\n            options.consumer\n        ];\n        super([\n            \"XPENDING\",\n            key,\n            group,\n            ...options?.idleTime ? [\n                \"IDLE\",\n                options.idleTime\n            ] : [],\n            start,\n            end,\n            count,\n            ...consumers\n        ], opts);\n    }\n};\n// pkg/commands/xrange.ts\nfunction deserialize4(result) {\n    const obj = {};\n    for (const e of result){\n        for(let i = 0; i < e.length; i += 2){\n            const streamId = e[i];\n            const entries = e[i + 1];\n            if (!(streamId in obj)) {\n                obj[streamId] = {};\n            }\n            for(let j = 0; j < entries.length; j += 2){\n                const field = entries[j];\n                const value = entries[j + 1];\n                try {\n                    obj[streamId][field] = JSON.parse(value);\n                } catch  {\n                    obj[streamId][field] = value;\n                }\n            }\n        }\n    }\n    return obj;\n}\nvar XRangeCommand = class extends Command {\n    constructor([key, start, end, count], opts){\n        const command = [\n            \"XRANGE\",\n            key,\n            start,\n            end\n        ];\n        if (typeof count === \"number\") {\n            command.push(\"COUNT\", count);\n        }\n        super(command, {\n            deserialize: (result)=>deserialize4(result),\n            ...opts\n        });\n    }\n};\n// pkg/commands/xread.ts\nvar UNBALANCED_XREAD_ERR = \"ERR Unbalanced XREAD list of streams: for each stream key an ID or '$' must be specified\";\nvar XReadCommand = class extends Command {\n    constructor([key, id, options], opts){\n        if (Array.isArray(key) && Array.isArray(id) && key.length !== id.length) {\n            throw new Error(UNBALANCED_XREAD_ERR);\n        }\n        const commands = [];\n        if (typeof options?.count === \"number\") {\n            commands.push(\"COUNT\", options.count);\n        }\n        if (typeof options?.blockMS === \"number\") {\n            commands.push(\"BLOCK\", options.blockMS);\n        }\n        commands.push(\"STREAMS\", ...Array.isArray(key) ? [\n            ...key\n        ] : [\n            key\n        ], ...Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ]);\n        super([\n            \"XREAD\",\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xreadgroup.ts\nvar UNBALANCED_XREADGROUP_ERR = \"ERR Unbalanced XREADGROUP list of streams: for each stream key an ID or '$' must be specified\";\nvar XReadGroupCommand = class extends Command {\n    constructor([group, consumer, key, id, options], opts){\n        if (Array.isArray(key) && Array.isArray(id) && key.length !== id.length) {\n            throw new Error(UNBALANCED_XREADGROUP_ERR);\n        }\n        const commands = [];\n        if (typeof options?.count === \"number\") {\n            commands.push(\"COUNT\", options.count);\n        }\n        if (typeof options?.blockMS === \"number\") {\n            commands.push(\"BLOCK\", options.blockMS);\n        }\n        if (typeof options?.NOACK === \"boolean\" && options.NOACK) {\n            commands.push(\"NOACK\");\n        }\n        commands.push(\"STREAMS\", ...Array.isArray(key) ? [\n            ...key\n        ] : [\n            key\n        ], ...Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ]);\n        super([\n            \"XREADGROUP\",\n            \"GROUP\",\n            group,\n            consumer,\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xrevrange.ts\nvar XRevRangeCommand = class extends Command {\n    constructor([key, end, start, count], opts){\n        const command = [\n            \"XREVRANGE\",\n            key,\n            end,\n            start\n        ];\n        if (typeof count === \"number\") {\n            command.push(\"COUNT\", count);\n        }\n        super(command, {\n            deserialize: (result)=>deserialize5(result),\n            ...opts\n        });\n    }\n};\nfunction deserialize5(result) {\n    const obj = {};\n    for (const e of result){\n        for(let i = 0; i < e.length; i += 2){\n            const streamId = e[i];\n            const entries = e[i + 1];\n            if (!(streamId in obj)) {\n                obj[streamId] = {};\n            }\n            for(let j = 0; j < entries.length; j += 2){\n                const field = entries[j];\n                const value = entries[j + 1];\n                try {\n                    obj[streamId][field] = JSON.parse(value);\n                } catch  {\n                    obj[streamId][field] = value;\n                }\n            }\n        }\n    }\n    return obj;\n}\n// pkg/commands/xtrim.ts\nvar XTrimCommand = class extends Command {\n    constructor([key, options], opts){\n        const { limit, strategy, threshold, exactness = \"~\" } = options;\n        super([\n            \"XTRIM\",\n            key,\n            strategy,\n            exactness,\n            threshold,\n            ...limit ? [\n                \"LIMIT\",\n                limit\n            ] : []\n        ], opts);\n    }\n};\n// pkg/commands/zadd.ts\nvar ZAddCommand = class extends Command {\n    constructor([key, arg1, ...arg2], opts){\n        const command = [\n            \"zadd\",\n            key\n        ];\n        if (\"nx\" in arg1 && arg1.nx) {\n            command.push(\"nx\");\n        } else if (\"xx\" in arg1 && arg1.xx) {\n            command.push(\"xx\");\n        }\n        if (\"ch\" in arg1 && arg1.ch) {\n            command.push(\"ch\");\n        }\n        if (\"incr\" in arg1 && arg1.incr) {\n            command.push(\"incr\");\n        }\n        if (\"lt\" in arg1 && arg1.lt) {\n            command.push(\"lt\");\n        } else if (\"gt\" in arg1 && arg1.gt) {\n            command.push(\"gt\");\n        }\n        if (\"score\" in arg1 && \"member\" in arg1) {\n            command.push(arg1.score, arg1.member);\n        }\n        command.push(...arg2.flatMap(({ score, member })=>[\n                score,\n                member\n            ]));\n        super(command, opts);\n    }\n};\n// pkg/commands/zcard.ts\nvar ZCardCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zcard\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zcount.ts\nvar ZCountCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zcount\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zincrby.ts\nvar ZIncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zincrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zinterstore.ts\nvar ZInterStoreCommand = class extends Command {\n    constructor([destination, numKeys, keyOrKeys, opts], cmdOpts){\n        const command = [\n            \"zinterstore\",\n            destination,\n            numKeys\n        ];\n        if (Array.isArray(keyOrKeys)) {\n            command.push(...keyOrKeys);\n        } else {\n            command.push(keyOrKeys);\n        }\n        if (opts) {\n            if (\"weights\" in opts && opts.weights) {\n                command.push(\"weights\", ...opts.weights);\n            } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n                command.push(\"weights\", opts.weight);\n            }\n            if (\"aggregate\" in opts) {\n                command.push(\"aggregate\", opts.aggregate);\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zlexcount.ts\nvar ZLexCountCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zlexcount\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zpopmax.ts\nvar ZPopMaxCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"zpopmax\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/zpopmin.ts\nvar ZPopMinCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"zpopmin\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/zrange.ts\nvar ZRangeCommand = class extends Command {\n    constructor([key, min, max, opts], cmdOpts){\n        const command = [\n            \"zrange\",\n            key,\n            min,\n            max\n        ];\n        if (opts?.byScore) {\n            command.push(\"byscore\");\n        }\n        if (opts?.byLex) {\n            command.push(\"bylex\");\n        }\n        if (opts?.rev) {\n            command.push(\"rev\");\n        }\n        if (opts?.count !== void 0 && opts.offset !== void 0) {\n            command.push(\"limit\", opts.offset, opts.count);\n        }\n        if (opts?.withScores) {\n            command.push(\"withscores\");\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zrank.ts\nvar ZRankCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zrank\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zrem.ts\nvar ZRemCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zrem\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zremrangebylex.ts\nvar ZRemRangeByLexCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zremrangebylex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zremrangebyrank.ts\nvar ZRemRangeByRankCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zremrangebyrank\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zremrangebyscore.ts\nvar ZRemRangeByScoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zremrangebyscore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zrevrank.ts\nvar ZRevRankCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zrevrank\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zscan.ts\nvar ZScanCommand = class extends Command {\n    constructor([key, cursor, opts], cmdOpts){\n        const command = [\n            \"zscan\",\n            key,\n            cursor\n        ];\n        if (opts?.match) {\n            command.push(\"match\", opts.match);\n        }\n        if (typeof opts?.count === \"number\") {\n            command.push(\"count\", opts.count);\n        }\n        super(command, {\n            deserialize: deserializeScanResponse,\n            ...cmdOpts\n        });\n    }\n};\n// pkg/commands/zscore.ts\nvar ZScoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zscore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zunion.ts\nvar ZUnionCommand = class extends Command {\n    constructor([numKeys, keyOrKeys, opts], cmdOpts){\n        const command = [\n            \"zunion\",\n            numKeys\n        ];\n        if (Array.isArray(keyOrKeys)) {\n            command.push(...keyOrKeys);\n        } else {\n            command.push(keyOrKeys);\n        }\n        if (opts) {\n            if (\"weights\" in opts && opts.weights) {\n                command.push(\"weights\", ...opts.weights);\n            } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n                command.push(\"weights\", opts.weight);\n            }\n            if (\"aggregate\" in opts) {\n                command.push(\"aggregate\", opts.aggregate);\n            }\n            if (opts.withScores) {\n                command.push(\"withscores\");\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zunionstore.ts\nvar ZUnionStoreCommand = class extends Command {\n    constructor([destination, numKeys, keyOrKeys, opts], cmdOpts){\n        const command = [\n            \"zunionstore\",\n            destination,\n            numKeys\n        ];\n        if (Array.isArray(keyOrKeys)) {\n            command.push(...keyOrKeys);\n        } else {\n            command.push(keyOrKeys);\n        }\n        if (opts) {\n            if (\"weights\" in opts && opts.weights) {\n                command.push(\"weights\", ...opts.weights);\n            } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n                command.push(\"weights\", opts.weight);\n            }\n            if (\"aggregate\" in opts) {\n                command.push(\"aggregate\", opts.aggregate);\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zdiffstore.ts\nvar ZDiffStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zdiffstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zmscore.ts\nvar ZMScoreCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, members] = cmd;\n        super([\n            \"zmscore\",\n            key,\n            ...members\n        ], opts);\n    }\n};\n// pkg/pipeline.ts\nvar Pipeline = class {\n    constructor(opts){\n        this.exec = async (options)=>{\n            if (this.commands.length === 0) {\n                throw new Error(\"Pipeline is empty\");\n            }\n            const path = this.multiExec ? [\n                \"multi-exec\"\n            ] : [\n                \"pipeline\"\n            ];\n            const res = await this.client.request({\n                path,\n                body: Object.values(this.commands).map((c)=>c.command)\n            });\n            return options?.keepErrors ? res.map(({ error, result }, i)=>{\n                return {\n                    error,\n                    result: this.commands[i].deserialize(result)\n                };\n            }) : res.map(({ error, result }, i)=>{\n                if (error) {\n                    throw new UpstashError(`Command ${i + 1} [ ${this.commands[i].command[0]} ] failed: ${error}`);\n                }\n                return this.commands[i].deserialize(result);\n            });\n        };\n        /**\n   * @see https://redis.io/commands/append\n   */ this.append = (...args)=>this.chain(new AppendCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/bitcount\n   */ this.bitcount = (...args)=>this.chain(new BitCountCommand(args, this.commandOptions));\n        /**\n   * Returns an instance that can be used to execute `BITFIELD` commands on one key.\n   *\n   * @example\n   * ```typescript\n   * redis.set(\"mykey\", 0);\n   * const result = await redis.pipeline()\n   *   .bitfield(\"mykey\")\n   *   .set(\"u4\", 0, 16)\n   *   .incr(\"u4\", \"#1\", 1)\n   *   .exec();\n   * console.log(result); // [[0, 1]]\n   * ```\n   *\n   * @see https://redis.io/commands/bitfield\n   */ this.bitfield = (...args)=>new BitFieldCommand(args, this.client, this.commandOptions, this.chain.bind(this));\n        /**\n   * @see https://redis.io/commands/bitop\n   */ this.bitop = (op, destinationKey, sourceKey, ...sourceKeys)=>this.chain(new BitOpCommand([\n                op,\n                destinationKey,\n                sourceKey,\n                ...sourceKeys\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/bitpos\n   */ this.bitpos = (...args)=>this.chain(new BitPosCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/copy\n   */ this.copy = (...args)=>this.chain(new CopyCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zdiffstore\n   */ this.zdiffstore = (...args)=>this.chain(new ZDiffStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/dbsize\n   */ this.dbsize = ()=>this.chain(new DBSizeCommand(this.commandOptions));\n        /**\n   * @see https://redis.io/commands/decr\n   */ this.decr = (...args)=>this.chain(new DecrCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/decrby\n   */ this.decrby = (...args)=>this.chain(new DecrByCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/del\n   */ this.del = (...args)=>this.chain(new DelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/echo\n   */ this.echo = (...args)=>this.chain(new EchoCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/eval_ro\n   */ this.evalRo = (...args)=>this.chain(new EvalROCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/eval\n   */ this.eval = (...args)=>this.chain(new EvalCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/evalsha_ro\n   */ this.evalshaRo = (...args)=>this.chain(new EvalshaROCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/evalsha\n   */ this.evalsha = (...args)=>this.chain(new EvalshaCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/exists\n   */ this.exists = (...args)=>this.chain(new ExistsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/expire\n   */ this.expire = (...args)=>this.chain(new ExpireCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/expireat\n   */ this.expireat = (...args)=>this.chain(new ExpireAtCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/flushall\n   */ this.flushall = (args)=>this.chain(new FlushAllCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/flushdb\n   */ this.flushdb = (...args)=>this.chain(new FlushDBCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geoadd\n   */ this.geoadd = (...args)=>this.chain(new GeoAddCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geodist\n   */ this.geodist = (...args)=>this.chain(new GeoDistCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geopos\n   */ this.geopos = (...args)=>this.chain(new GeoPosCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geohash\n   */ this.geohash = (...args)=>this.chain(new GeoHashCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geosearch\n   */ this.geosearch = (...args)=>this.chain(new GeoSearchCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geosearchstore\n   */ this.geosearchstore = (...args)=>this.chain(new GeoSearchStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/get\n   */ this.get = (...args)=>this.chain(new GetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getbit\n   */ this.getbit = (...args)=>this.chain(new GetBitCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getdel\n   */ this.getdel = (...args)=>this.chain(new GetDelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getex\n   */ this.getex = (...args)=>this.chain(new GetExCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getrange\n   */ this.getrange = (...args)=>this.chain(new GetRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getset\n   */ this.getset = (key, value)=>this.chain(new GetSetCommand([\n                key,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hdel\n   */ this.hdel = (...args)=>this.chain(new HDelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hexists\n   */ this.hexists = (...args)=>this.chain(new HExistsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hexpire\n   */ this.hexpire = (...args)=>this.chain(new HExpireCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hexpireat\n   */ this.hexpireat = (...args)=>this.chain(new HExpireAtCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hexpiretime\n   */ this.hexpiretime = (...args)=>this.chain(new HExpireTimeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/httl\n   */ this.httl = (...args)=>this.chain(new HTtlCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hpexpire\n   */ this.hpexpire = (...args)=>this.chain(new HPExpireCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hpexpireat\n   */ this.hpexpireat = (...args)=>this.chain(new HPExpireAtCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hpexpiretime\n   */ this.hpexpiretime = (...args)=>this.chain(new HPExpireTimeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hpttl\n   */ this.hpttl = (...args)=>this.chain(new HPTtlCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hpersist\n   */ this.hpersist = (...args)=>this.chain(new HPersistCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hget\n   */ this.hget = (...args)=>this.chain(new HGetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hgetall\n   */ this.hgetall = (...args)=>this.chain(new HGetAllCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hincrby\n   */ this.hincrby = (...args)=>this.chain(new HIncrByCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hincrbyfloat\n   */ this.hincrbyfloat = (...args)=>this.chain(new HIncrByFloatCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hkeys\n   */ this.hkeys = (...args)=>this.chain(new HKeysCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hlen\n   */ this.hlen = (...args)=>this.chain(new HLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hmget\n   */ this.hmget = (...args)=>this.chain(new HMGetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hmset\n   */ this.hmset = (key, kv)=>this.chain(new HMSetCommand([\n                key,\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hrandfield\n   */ this.hrandfield = (key, count, withValues)=>this.chain(new HRandFieldCommand([\n                key,\n                count,\n                withValues\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hscan\n   */ this.hscan = (...args)=>this.chain(new HScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hset\n   */ this.hset = (key, kv)=>this.chain(new HSetCommand([\n                key,\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hsetnx\n   */ this.hsetnx = (key, field, value)=>this.chain(new HSetNXCommand([\n                key,\n                field,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hstrlen\n   */ this.hstrlen = (...args)=>this.chain(new HStrLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hvals\n   */ this.hvals = (...args)=>this.chain(new HValsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/incr\n   */ this.incr = (...args)=>this.chain(new IncrCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/incrby\n   */ this.incrby = (...args)=>this.chain(new IncrByCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/incrbyfloat\n   */ this.incrbyfloat = (...args)=>this.chain(new IncrByFloatCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/keys\n   */ this.keys = (...args)=>this.chain(new KeysCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lindex\n   */ this.lindex = (...args)=>this.chain(new LIndexCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/linsert\n   */ this.linsert = (key, direction, pivot, value)=>this.chain(new LInsertCommand([\n                key,\n                direction,\n                pivot,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/llen\n   */ this.llen = (...args)=>this.chain(new LLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lmove\n   */ this.lmove = (...args)=>this.chain(new LMoveCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpop\n   */ this.lpop = (...args)=>this.chain(new LPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lmpop\n   */ this.lmpop = (...args)=>this.chain(new LmPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpos\n   */ this.lpos = (...args)=>this.chain(new LPosCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpush\n   */ this.lpush = (key, ...elements)=>this.chain(new LPushCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpushx\n   */ this.lpushx = (key, ...elements)=>this.chain(new LPushXCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lrange\n   */ this.lrange = (...args)=>this.chain(new LRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lrem\n   */ this.lrem = (key, count, value)=>this.chain(new LRemCommand([\n                key,\n                count,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lset\n   */ this.lset = (key, index, value)=>this.chain(new LSetCommand([\n                key,\n                index,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/ltrim\n   */ this.ltrim = (...args)=>this.chain(new LTrimCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/mget\n   */ this.mget = (...args)=>this.chain(new MGetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/mset\n   */ this.mset = (kv)=>this.chain(new MSetCommand([\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/msetnx\n   */ this.msetnx = (kv)=>this.chain(new MSetNXCommand([\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/persist\n   */ this.persist = (...args)=>this.chain(new PersistCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pexpire\n   */ this.pexpire = (...args)=>this.chain(new PExpireCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pexpireat\n   */ this.pexpireat = (...args)=>this.chain(new PExpireAtCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pfadd\n   */ this.pfadd = (...args)=>this.chain(new PfAddCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pfcount\n   */ this.pfcount = (...args)=>this.chain(new PfCountCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pfmerge\n   */ this.pfmerge = (...args)=>this.chain(new PfMergeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/ping\n   */ this.ping = (args)=>this.chain(new PingCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/psetex\n   */ this.psetex = (key, ttl, value)=>this.chain(new PSetEXCommand([\n                key,\n                ttl,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pttl\n   */ this.pttl = (...args)=>this.chain(new PTtlCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/publish\n   */ this.publish = (...args)=>this.chain(new PublishCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/randomkey\n   */ this.randomkey = ()=>this.chain(new RandomKeyCommand(this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rename\n   */ this.rename = (...args)=>this.chain(new RenameCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/renamenx\n   */ this.renamenx = (...args)=>this.chain(new RenameNXCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rpop\n   */ this.rpop = (...args)=>this.chain(new RPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rpush\n   */ this.rpush = (key, ...elements)=>this.chain(new RPushCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rpushx\n   */ this.rpushx = (key, ...elements)=>this.chain(new RPushXCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sadd\n   */ this.sadd = (key, member, ...members)=>this.chain(new SAddCommand([\n                key,\n                member,\n                ...members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/scan\n   */ this.scan = (...args)=>this.chain(new ScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/scard\n   */ this.scard = (...args)=>this.chain(new SCardCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/script-exists\n   */ this.scriptExists = (...args)=>this.chain(new ScriptExistsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/script-flush\n   */ this.scriptFlush = (...args)=>this.chain(new ScriptFlushCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/script-load\n   */ this.scriptLoad = (...args)=>this.chain(new ScriptLoadCommand(args, this.commandOptions));\n        /*)*\n   * @see https://redis.io/commands/sdiff\n   */ this.sdiff = (...args)=>this.chain(new SDiffCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sdiffstore\n   */ this.sdiffstore = (...args)=>this.chain(new SDiffStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/set\n   */ this.set = (key, value, opts)=>this.chain(new SetCommand([\n                key,\n                value,\n                opts\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setbit\n   */ this.setbit = (...args)=>this.chain(new SetBitCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setex\n   */ this.setex = (key, ttl, value)=>this.chain(new SetExCommand([\n                key,\n                ttl,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setnx\n   */ this.setnx = (key, value)=>this.chain(new SetNxCommand([\n                key,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setrange\n   */ this.setrange = (...args)=>this.chain(new SetRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sinter\n   */ this.sinter = (...args)=>this.chain(new SInterCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sinterstore\n   */ this.sinterstore = (...args)=>this.chain(new SInterStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sismember\n   */ this.sismember = (key, member)=>this.chain(new SIsMemberCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/smembers\n   */ this.smembers = (...args)=>this.chain(new SMembersCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/smismember\n   */ this.smismember = (key, members)=>this.chain(new SMIsMemberCommand([\n                key,\n                members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/smove\n   */ this.smove = (source, destination, member)=>this.chain(new SMoveCommand([\n                source,\n                destination,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/spop\n   */ this.spop = (...args)=>this.chain(new SPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/srandmember\n   */ this.srandmember = (...args)=>this.chain(new SRandMemberCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/srem\n   */ this.srem = (key, ...members)=>this.chain(new SRemCommand([\n                key,\n                ...members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sscan\n   */ this.sscan = (...args)=>this.chain(new SScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/strlen\n   */ this.strlen = (...args)=>this.chain(new StrLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sunion\n   */ this.sunion = (...args)=>this.chain(new SUnionCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sunionstore\n   */ this.sunionstore = (...args)=>this.chain(new SUnionStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/time\n   */ this.time = ()=>this.chain(new TimeCommand(this.commandOptions));\n        /**\n   * @see https://redis.io/commands/touch\n   */ this.touch = (...args)=>this.chain(new TouchCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/ttl\n   */ this.ttl = (...args)=>this.chain(new TtlCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/type\n   */ this.type = (...args)=>this.chain(new TypeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/unlink\n   */ this.unlink = (...args)=>this.chain(new UnlinkCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zadd\n   */ this.zadd = (...args)=>{\n            if (\"score\" in args[1]) {\n                return this.chain(new ZAddCommand([\n                    args[0],\n                    args[1],\n                    ...args.slice(2)\n                ], this.commandOptions));\n            }\n            return this.chain(new ZAddCommand([\n                args[0],\n                args[1],\n                ...args.slice(2)\n            ], this.commandOptions));\n        };\n        /**\n   * @see https://redis.io/commands/xadd\n   */ this.xadd = (...args)=>this.chain(new XAddCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xack\n   */ this.xack = (...args)=>this.chain(new XAckCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xdel\n   */ this.xdel = (...args)=>this.chain(new XDelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xgroup\n   */ this.xgroup = (...args)=>this.chain(new XGroupCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xread\n   */ this.xread = (...args)=>this.chain(new XReadCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xreadgroup\n   */ this.xreadgroup = (...args)=>this.chain(new XReadGroupCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xinfo\n   */ this.xinfo = (...args)=>this.chain(new XInfoCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xlen\n   */ this.xlen = (...args)=>this.chain(new XLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xpending\n   */ this.xpending = (...args)=>this.chain(new XPendingCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xclaim\n   */ this.xclaim = (...args)=>this.chain(new XClaimCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xautoclaim\n   */ this.xautoclaim = (...args)=>this.chain(new XAutoClaim(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xtrim\n   */ this.xtrim = (...args)=>this.chain(new XTrimCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xrange\n   */ this.xrange = (...args)=>this.chain(new XRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xrevrange\n   */ this.xrevrange = (...args)=>this.chain(new XRevRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zcard\n   */ this.zcard = (...args)=>this.chain(new ZCardCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zcount\n   */ this.zcount = (...args)=>this.chain(new ZCountCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zincrby\n   */ this.zincrby = (key, increment, member)=>this.chain(new ZIncrByCommand([\n                key,\n                increment,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zinterstore\n   */ this.zinterstore = (...args)=>this.chain(new ZInterStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zlexcount\n   */ this.zlexcount = (...args)=>this.chain(new ZLexCountCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zmscore\n   */ this.zmscore = (...args)=>this.chain(new ZMScoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zpopmax\n   */ this.zpopmax = (...args)=>this.chain(new ZPopMaxCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zpopmin\n   */ this.zpopmin = (...args)=>this.chain(new ZPopMinCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrange\n   */ this.zrange = (...args)=>this.chain(new ZRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrank\n   */ this.zrank = (key, member)=>this.chain(new ZRankCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrem\n   */ this.zrem = (key, ...members)=>this.chain(new ZRemCommand([\n                key,\n                ...members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zremrangebylex\n   */ this.zremrangebylex = (...args)=>this.chain(new ZRemRangeByLexCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zremrangebyrank\n   */ this.zremrangebyrank = (...args)=>this.chain(new ZRemRangeByRankCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zremrangebyscore\n   */ this.zremrangebyscore = (...args)=>this.chain(new ZRemRangeByScoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrevrank\n   */ this.zrevrank = (key, member)=>this.chain(new ZRevRankCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zscan\n   */ this.zscan = (...args)=>this.chain(new ZScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zscore\n   */ this.zscore = (key, member)=>this.chain(new ZScoreCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zunionstore\n   */ this.zunionstore = (...args)=>this.chain(new ZUnionStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zunion\n   */ this.zunion = (...args)=>this.chain(new ZUnionCommand(args, this.commandOptions));\n        this.client = opts.client;\n        this.commands = [];\n        this.commandOptions = opts.commandOptions;\n        this.multiExec = opts.multiExec ?? false;\n        if (this.commandOptions?.latencyLogging) {\n            const originalExec = this.exec.bind(this);\n            this.exec = async (options)=>{\n                const start = performance.now();\n                const result = await (options ? originalExec(options) : originalExec());\n                const end = performance.now();\n                const loggerResult = (end - start).toFixed(2);\n                console.log(`Latency for \\x1B[38;2;19;185;39m${this.multiExec ? [\n                    \"MULTI-EXEC\"\n                ] : [\n                    \"PIPELINE\"\n                ].toString().toUpperCase()}\\x1B[0m: \\x1B[38;2;0;255;255m${loggerResult} ms\\x1B[0m`);\n                return result;\n            };\n        }\n    }\n    /**\n   * Returns the length of pipeline before the execution\n   */ length() {\n        return this.commands.length;\n    }\n    /**\n   * Pushes a command into the pipeline and returns a chainable instance of the\n   * pipeline\n   */ chain(command) {\n        this.commands.push(command);\n        return this;\n    }\n    /**\n   * @see https://redis.io/commands/?group=json\n   */ get json() {\n        return {\n            /**\n       * @see https://redis.io/commands/json.arrappend\n       */ arrappend: (...args)=>this.chain(new JsonArrAppendCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrindex\n       */ arrindex: (...args)=>this.chain(new JsonArrIndexCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrinsert\n       */ arrinsert: (...args)=>this.chain(new JsonArrInsertCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrlen\n       */ arrlen: (...args)=>this.chain(new JsonArrLenCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrpop\n       */ arrpop: (...args)=>this.chain(new JsonArrPopCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrtrim\n       */ arrtrim: (...args)=>this.chain(new JsonArrTrimCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.clear\n       */ clear: (...args)=>this.chain(new JsonClearCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.del\n       */ del: (...args)=>this.chain(new JsonDelCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.forget\n       */ forget: (...args)=>this.chain(new JsonForgetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.get\n       */ get: (...args)=>this.chain(new JsonGetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.merge\n       */ merge: (...args)=>this.chain(new JsonMergeCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.mget\n       */ mget: (...args)=>this.chain(new JsonMGetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.mset\n       */ mset: (...args)=>this.chain(new JsonMSetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.numincrby\n       */ numincrby: (...args)=>this.chain(new JsonNumIncrByCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.nummultby\n       */ nummultby: (...args)=>this.chain(new JsonNumMultByCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.objkeys\n       */ objkeys: (...args)=>this.chain(new JsonObjKeysCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.objlen\n       */ objlen: (...args)=>this.chain(new JsonObjLenCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.resp\n       */ resp: (...args)=>this.chain(new JsonRespCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.set\n       */ set: (...args)=>this.chain(new JsonSetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.strappend\n       */ strappend: (...args)=>this.chain(new JsonStrAppendCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.strlen\n       */ strlen: (...args)=>this.chain(new JsonStrLenCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.toggle\n       */ toggle: (...args)=>this.chain(new JsonToggleCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.type\n       */ type: (...args)=>this.chain(new JsonTypeCommand(args, this.commandOptions))\n        };\n    }\n};\n// pkg/auto-pipeline.ts\nvar EXCLUDE_COMMANDS = /* @__PURE__ */ new Set([\n    \"scan\",\n    \"keys\",\n    \"flushdb\",\n    \"flushall\",\n    \"dbsize\",\n    \"hscan\",\n    \"hgetall\",\n    \"hkeys\",\n    \"lrange\",\n    \"sscan\",\n    \"smembers\",\n    \"xrange\",\n    \"xrevrange\",\n    \"zscan\",\n    \"zrange\",\n    \"exec\"\n]);\nfunction createAutoPipelineProxy(_redis, json) {\n    const redis = _redis;\n    if (!redis.autoPipelineExecutor) {\n        redis.autoPipelineExecutor = new AutoPipelineExecutor(redis);\n    }\n    return new Proxy(redis, {\n        get: (redis2, command)=>{\n            if (command === \"pipelineCounter\") {\n                return redis2.autoPipelineExecutor.pipelineCounter;\n            }\n            if (command === \"json\") {\n                return createAutoPipelineProxy(redis2, true);\n            }\n            const commandInRedisButNotPipeline = command in redis2 && !(command in redis2.autoPipelineExecutor.pipeline);\n            const isCommandExcluded = EXCLUDE_COMMANDS.has(command);\n            if (commandInRedisButNotPipeline || isCommandExcluded) {\n                return redis2[command];\n            }\n            const isFunction = json ? typeof redis2.autoPipelineExecutor.pipeline.json[command] === \"function\" : typeof redis2.autoPipelineExecutor.pipeline[command] === \"function\";\n            if (isFunction) {\n                return (...args)=>{\n                    return redis2.autoPipelineExecutor.withAutoPipeline((pipeline)=>{\n                        if (json) {\n                            pipeline.json[command](...args);\n                        } else {\n                            pipeline[command](...args);\n                        }\n                    });\n                };\n            }\n            return redis2.autoPipelineExecutor.pipeline[command];\n        }\n    });\n}\nvar AutoPipelineExecutor = class {\n    // to keep track of how many times a pipeline was executed\n    constructor(redis){\n        this.pipelinePromises = /* @__PURE__ */ new WeakMap();\n        this.activePipeline = null;\n        this.indexInCurrentPipeline = 0;\n        // only to make sure that proxy can work\n        this.pipelineCounter = 0;\n        this.redis = redis;\n        this.pipeline = redis.pipeline();\n    }\n    async withAutoPipeline(executeWithPipeline) {\n        const pipeline = this.activePipeline ?? this.redis.pipeline();\n        if (!this.activePipeline) {\n            this.activePipeline = pipeline;\n            this.indexInCurrentPipeline = 0;\n        }\n        const index = this.indexInCurrentPipeline++;\n        executeWithPipeline(pipeline);\n        const pipelineDone = this.deferExecution().then(()=>{\n            if (!this.pipelinePromises.has(pipeline)) {\n                const pipelinePromise = pipeline.exec({\n                    keepErrors: true\n                });\n                this.pipelineCounter += 1;\n                this.pipelinePromises.set(pipeline, pipelinePromise);\n                this.activePipeline = null;\n            }\n            return this.pipelinePromises.get(pipeline);\n        });\n        const results = await pipelineDone;\n        const commandResult = results[index];\n        if (commandResult.error) {\n            throw new UpstashError(`Command failed: ${commandResult.error}`);\n        }\n        return commandResult.result;\n    }\n    async deferExecution() {\n        await Promise.resolve();\n        await Promise.resolve();\n    }\n};\n// pkg/commands/psubscribe.ts\nvar PSubscribeCommand = class extends Command {\n    constructor(cmd, opts){\n        const sseHeaders = {\n            Accept: \"text/event-stream\",\n            \"Cache-Control\": \"no-cache\",\n            Connection: \"keep-alive\"\n        };\n        super([], {\n            ...opts,\n            headers: sseHeaders,\n            path: [\n                \"psubscribe\",\n                ...cmd\n            ],\n            streamOptions: {\n                isStreaming: true,\n                onMessage: opts?.streamOptions?.onMessage,\n                signal: opts?.streamOptions?.signal\n            }\n        });\n    }\n};\n// pkg/commands/subscribe.ts\nvar Subscriber = class extends EventTarget {\n    constructor(client, channels, isPattern = false, opts){\n        super();\n        this.client = client;\n        this.subscriptions = /* @__PURE__ */ new Map();\n        this.listeners = /* @__PURE__ */ new Map();\n        this.opts = opts;\n        for (const channel of channels){\n            if (isPattern) {\n                this.subscribeToPattern(channel);\n            } else {\n                this.subscribeToChannel(channel);\n            }\n        }\n    }\n    subscribeToChannel(channel) {\n        const controller = new AbortController();\n        const command = new SubscribeCommand([\n            channel\n        ], {\n            streamOptions: {\n                signal: controller.signal,\n                onMessage: (data)=>this.handleMessage(data, false)\n            }\n        });\n        command.exec(this.client).catch((error)=>{\n            if (error.name !== \"AbortError\") {\n                this.dispatchToListeners(\"error\", error);\n            }\n        });\n        this.subscriptions.set(channel, {\n            command,\n            controller,\n            isPattern: false\n        });\n    }\n    subscribeToPattern(pattern) {\n        const controller = new AbortController();\n        const command = new PSubscribeCommand([\n            pattern\n        ], {\n            streamOptions: {\n                signal: controller.signal,\n                onMessage: (data)=>this.handleMessage(data, true)\n            }\n        });\n        command.exec(this.client).catch((error)=>{\n            if (error.name !== \"AbortError\") {\n                this.dispatchToListeners(\"error\", error);\n            }\n        });\n        this.subscriptions.set(pattern, {\n            command,\n            controller,\n            isPattern: true\n        });\n    }\n    handleMessage(data, isPattern) {\n        const messageData = data.replace(/^data:\\s*/, \"\");\n        const firstCommaIndex = messageData.indexOf(\",\");\n        const secondCommaIndex = messageData.indexOf(\",\", firstCommaIndex + 1);\n        const thirdCommaIndex = isPattern ? messageData.indexOf(\",\", secondCommaIndex + 1) : -1;\n        if (firstCommaIndex !== -1 && secondCommaIndex !== -1) {\n            const type = messageData.slice(0, firstCommaIndex);\n            if (isPattern && type === \"pmessage\" && thirdCommaIndex !== -1) {\n                const pattern = messageData.slice(firstCommaIndex + 1, secondCommaIndex);\n                const channel = messageData.slice(secondCommaIndex + 1, thirdCommaIndex);\n                const messageStr = messageData.slice(thirdCommaIndex + 1);\n                try {\n                    const message = this.opts?.automaticDeserialization === false ? messageStr : JSON.parse(messageStr);\n                    this.dispatchToListeners(\"pmessage\", {\n                        pattern,\n                        channel,\n                        message\n                    });\n                    this.dispatchToListeners(`pmessage:${pattern}`, {\n                        pattern,\n                        channel,\n                        message\n                    });\n                } catch (error) {\n                    this.dispatchToListeners(\"error\", new Error(`Failed to parse message: ${error}`));\n                }\n            } else {\n                const channel = messageData.slice(firstCommaIndex + 1, secondCommaIndex);\n                const messageStr = messageData.slice(secondCommaIndex + 1);\n                try {\n                    if (type === \"subscribe\" || type === \"psubscribe\" || type === \"unsubscribe\" || type === \"punsubscribe\") {\n                        const count = Number.parseInt(messageStr);\n                        this.dispatchToListeners(type, count);\n                    } else {\n                        const message = this.opts?.automaticDeserialization === false ? messageStr : JSON.parse(messageStr);\n                        this.dispatchToListeners(type, {\n                            channel,\n                            message\n                        });\n                        this.dispatchToListeners(`${type}:${channel}`, {\n                            channel,\n                            message\n                        });\n                    }\n                } catch (error) {\n                    this.dispatchToListeners(\"error\", new Error(`Failed to parse message: ${error}`));\n                }\n            }\n        }\n    }\n    dispatchToListeners(type, data) {\n        const listeners = this.listeners.get(type);\n        if (listeners) {\n            for (const listener of listeners){\n                listener(data);\n            }\n        }\n    }\n    on(type, listener) {\n        if (!this.listeners.has(type)) {\n            this.listeners.set(type, /* @__PURE__ */ new Set());\n        }\n        this.listeners.get(type)?.add(listener);\n    }\n    removeAllListeners() {\n        this.listeners.clear();\n    }\n    async unsubscribe(channels) {\n        if (channels) {\n            for (const channel of channels){\n                const subscription = this.subscriptions.get(channel);\n                if (subscription) {\n                    try {\n                        subscription.controller.abort();\n                    } catch  {}\n                    this.subscriptions.delete(channel);\n                }\n            }\n        } else {\n            for (const subscription of this.subscriptions.values()){\n                try {\n                    subscription.controller.abort();\n                } catch  {}\n            }\n            this.subscriptions.clear();\n            this.removeAllListeners();\n        }\n    }\n    getSubscribedChannels() {\n        return [\n            ...this.subscriptions.keys()\n        ];\n    }\n};\nvar SubscribeCommand = class extends Command {\n    constructor(cmd, opts){\n        const sseHeaders = {\n            Accept: \"text/event-stream\",\n            \"Cache-Control\": \"no-cache\",\n            Connection: \"keep-alive\"\n        };\n        super([], {\n            ...opts,\n            headers: sseHeaders,\n            path: [\n                \"subscribe\",\n                ...cmd\n            ],\n            streamOptions: {\n                isStreaming: true,\n                onMessage: opts?.streamOptions?.onMessage,\n                signal: opts?.streamOptions?.signal\n            }\n        });\n    }\n};\n// pkg/script.ts\n\nvar Script = class {\n    constructor(redis, script){\n        this.redis = redis;\n        this.script = script;\n        this.sha1 = \"\";\n        void this.init(script);\n    }\n    /**\n   * Initialize the script by computing its SHA-1 hash.\n   */ async init(script) {\n        if (this.sha1) return;\n        this.sha1 = await this.digest(script);\n    }\n    /**\n   * Send an `EVAL` command to redis.\n   */ async eval(keys, args) {\n        await this.init(this.script);\n        return await this.redis.eval(this.script, keys, args);\n    }\n    /**\n   * Calculates the sha1 hash of the script and then calls `EVALSHA`.\n   */ async evalsha(keys, args) {\n        await this.init(this.script);\n        return await this.redis.evalsha(this.sha1, keys, args);\n    }\n    /**\n   * Optimistically try to run `EVALSHA` first.\n   * If the script is not loaded in redis, it will fall back and try again with `EVAL`.\n   *\n   * Following calls will be able to use the cached script\n   */ async exec(keys, args) {\n        await this.init(this.script);\n        const res = await this.redis.evalsha(this.sha1, keys, args).catch(async (error)=>{\n            if (error instanceof Error && error.message.toLowerCase().includes(\"noscript\")) {\n                return await this.redis.eval(this.script, keys, args);\n            }\n            throw error;\n        });\n        return res;\n    }\n    /**\n   * Compute the sha1 hash of the script and return its hex representation.\n   */ async digest(s) {\n        const data = new TextEncoder().encode(s);\n        const hashBuffer = await uncrypto__WEBPACK_IMPORTED_MODULE_0__.subtle.digest(\"SHA-1\", data);\n        const hashArray = [\n            ...new Uint8Array(hashBuffer)\n        ];\n        return hashArray.map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n    }\n};\n// pkg/scriptRo.ts\n\nvar ScriptRO = class {\n    constructor(redis, script){\n        this.redis = redis;\n        this.sha1 = \"\";\n        this.script = script;\n        void this.init(script);\n    }\n    async init(script) {\n        if (this.sha1) return;\n        this.sha1 = await this.digest(script);\n    }\n    /**\n   * Send an `EVAL_RO` command to redis.\n   */ async evalRo(keys, args) {\n        await this.init(this.script);\n        return await this.redis.evalRo(this.script, keys, args);\n    }\n    /**\n   * Calculates the sha1 hash of the script and then calls `EVALSHA_RO`.\n   */ async evalshaRo(keys, args) {\n        await this.init(this.script);\n        return await this.redis.evalshaRo(this.sha1, keys, args);\n    }\n    /**\n   * Optimistically try to run `EVALSHA_RO` first.\n   * If the script is not loaded in redis, it will fall back and try again with `EVAL_RO`.\n   *\n   * Following calls will be able to use the cached script\n   */ async exec(keys, args) {\n        await this.init(this.script);\n        const res = await this.redis.evalshaRo(this.sha1, keys, args).catch(async (error)=>{\n            if (error instanceof Error && error.message.toLowerCase().includes(\"noscript\")) {\n                return await this.redis.evalRo(this.script, keys, args);\n            }\n            throw error;\n        });\n        return res;\n    }\n    /**\n   * Compute the sha1 hash of the script and return its hex representation.\n   */ async digest(s) {\n        const data = new TextEncoder().encode(s);\n        const hashBuffer = await uncrypto__WEBPACK_IMPORTED_MODULE_0__.subtle.digest(\"SHA-1\", data);\n        const hashArray = [\n            ...new Uint8Array(hashBuffer)\n        ];\n        return hashArray.map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n    }\n};\n// pkg/redis.ts\nvar Redis = class {\n    /**\n   * Create a new redis client\n   *\n   * @example\n   * ```typescript\n   * const redis = new Redis({\n   *  url: \"<UPSTASH_REDIS_REST_URL>\",\n   *  token: \"<UPSTASH_REDIS_REST_TOKEN>\",\n   * });\n   * ```\n   */ constructor(client, opts){\n        /**\n   * Wrap a new middleware around the HTTP client.\n   */ this.use = (middleware)=>{\n            const makeRequest = this.client.request.bind(this.client);\n            this.client.request = (req)=>middleware(req, makeRequest);\n        };\n        /**\n   * Technically this is not private, we can hide it from intellisense by doing this\n   */ this.addTelemetry = (telemetry)=>{\n            if (!this.enableTelemetry) {\n                return;\n            }\n            try {\n                this.client.mergeTelemetry(telemetry);\n            } catch  {}\n        };\n        /**\n   * Create a new pipeline that allows you to send requests in bulk.\n   *\n   * @see {@link Pipeline}\n   */ this.pipeline = ()=>new Pipeline({\n                client: this.client,\n                commandOptions: this.opts,\n                multiExec: false\n            });\n        this.autoPipeline = ()=>{\n            return createAutoPipelineProxy(this);\n        };\n        /**\n   * Create a new transaction to allow executing multiple steps atomically.\n   *\n   * All the commands in a transaction are serialized and executed sequentially. A request sent by\n   * another client will never be served in the middle of the execution of a Redis Transaction. This\n   * guarantees that the commands are executed as a single isolated operation.\n   *\n   * @see {@link Pipeline}\n   */ this.multi = ()=>new Pipeline({\n                client: this.client,\n                commandOptions: this.opts,\n                multiExec: true\n            });\n        /**\n   * Returns an instance that can be used to execute `BITFIELD` commands on one key.\n   *\n   * @example\n   * ```typescript\n   * redis.set(\"mykey\", 0);\n   * const result = await redis.bitfield(\"mykey\")\n   *   .set(\"u4\", 0, 16)\n   *   .incr(\"u4\", \"#1\", 1)\n   *   .exec();\n   * console.log(result); // [0, 1]\n   * ```\n   *\n   * @see https://redis.io/commands/bitfield\n   */ this.bitfield = (...args)=>new BitFieldCommand(args, this.client, this.opts);\n        /**\n   * @see https://redis.io/commands/append\n   */ this.append = (...args)=>new AppendCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/bitcount\n   */ this.bitcount = (...args)=>new BitCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/bitop\n   */ this.bitop = (op, destinationKey, sourceKey, ...sourceKeys)=>new BitOpCommand([\n                op,\n                destinationKey,\n                sourceKey,\n                ...sourceKeys\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/bitpos\n   */ this.bitpos = (...args)=>new BitPosCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/copy\n   */ this.copy = (...args)=>new CopyCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/dbsize\n   */ this.dbsize = ()=>new DBSizeCommand(this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/decr\n   */ this.decr = (...args)=>new DecrCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/decrby\n   */ this.decrby = (...args)=>new DecrByCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/del\n   */ this.del = (...args)=>new DelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/echo\n   */ this.echo = (...args)=>new EchoCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/eval_ro\n   */ this.evalRo = (...args)=>new EvalROCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/eval\n   */ this.eval = (...args)=>new EvalCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/evalsha_ro\n   */ this.evalshaRo = (...args)=>new EvalshaROCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/evalsha\n   */ this.evalsha = (...args)=>new EvalshaCommand(args, this.opts).exec(this.client);\n        /**\n   * Generic method to execute any Redis command.\n   */ this.exec = (args)=>new ExecCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/exists\n   */ this.exists = (...args)=>new ExistsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/expire\n   */ this.expire = (...args)=>new ExpireCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/expireat\n   */ this.expireat = (...args)=>new ExpireAtCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/flushall\n   */ this.flushall = (args)=>new FlushAllCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/flushdb\n   */ this.flushdb = (...args)=>new FlushDBCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geoadd\n   */ this.geoadd = (...args)=>new GeoAddCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geopos\n   */ this.geopos = (...args)=>new GeoPosCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geodist\n   */ this.geodist = (...args)=>new GeoDistCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geohash\n   */ this.geohash = (...args)=>new GeoHashCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geosearch\n   */ this.geosearch = (...args)=>new GeoSearchCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geosearchstore\n   */ this.geosearchstore = (...args)=>new GeoSearchStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/get\n   */ this.get = (...args)=>new GetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getbit\n   */ this.getbit = (...args)=>new GetBitCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getdel\n   */ this.getdel = (...args)=>new GetDelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getex\n   */ this.getex = (...args)=>new GetExCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getrange\n   */ this.getrange = (...args)=>new GetRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getset\n   */ this.getset = (key, value)=>new GetSetCommand([\n                key,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hdel\n   */ this.hdel = (...args)=>new HDelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hexists\n   */ this.hexists = (...args)=>new HExistsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hexpire\n   */ this.hexpire = (...args)=>new HExpireCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hexpireat\n   */ this.hexpireat = (...args)=>new HExpireAtCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hexpiretime\n   */ this.hexpiretime = (...args)=>new HExpireTimeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/httl\n   */ this.httl = (...args)=>new HTtlCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hpexpire\n   */ this.hpexpire = (...args)=>new HPExpireCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hpexpireat\n   */ this.hpexpireat = (...args)=>new HPExpireAtCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hpexpiretime\n   */ this.hpexpiretime = (...args)=>new HPExpireTimeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hpttl\n   */ this.hpttl = (...args)=>new HPTtlCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hpersist\n   */ this.hpersist = (...args)=>new HPersistCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hget\n   */ this.hget = (...args)=>new HGetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hgetall\n   */ this.hgetall = (...args)=>new HGetAllCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hincrby\n   */ this.hincrby = (...args)=>new HIncrByCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hincrbyfloat\n   */ this.hincrbyfloat = (...args)=>new HIncrByFloatCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hkeys\n   */ this.hkeys = (...args)=>new HKeysCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hlen\n   */ this.hlen = (...args)=>new HLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hmget\n   */ this.hmget = (...args)=>new HMGetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hmset\n   */ this.hmset = (key, kv)=>new HMSetCommand([\n                key,\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hrandfield\n   */ this.hrandfield = (key, count, withValues)=>new HRandFieldCommand([\n                key,\n                count,\n                withValues\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hscan\n   */ this.hscan = (...args)=>new HScanCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hset\n   */ this.hset = (key, kv)=>new HSetCommand([\n                key,\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hsetnx\n   */ this.hsetnx = (key, field, value)=>new HSetNXCommand([\n                key,\n                field,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hstrlen\n   */ this.hstrlen = (...args)=>new HStrLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hvals\n   */ this.hvals = (...args)=>new HValsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/incr\n   */ this.incr = (...args)=>new IncrCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/incrby\n   */ this.incrby = (...args)=>new IncrByCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/incrbyfloat\n   */ this.incrbyfloat = (...args)=>new IncrByFloatCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/keys\n   */ this.keys = (...args)=>new KeysCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lindex\n   */ this.lindex = (...args)=>new LIndexCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/linsert\n   */ this.linsert = (key, direction, pivot, value)=>new LInsertCommand([\n                key,\n                direction,\n                pivot,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/llen\n   */ this.llen = (...args)=>new LLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lmove\n   */ this.lmove = (...args)=>new LMoveCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpop\n   */ this.lpop = (...args)=>new LPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lmpop\n   */ this.lmpop = (...args)=>new LmPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpos\n   */ this.lpos = (...args)=>new LPosCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpush\n   */ this.lpush = (key, ...elements)=>new LPushCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpushx\n   */ this.lpushx = (key, ...elements)=>new LPushXCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lrange\n   */ this.lrange = (...args)=>new LRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lrem\n   */ this.lrem = (key, count, value)=>new LRemCommand([\n                key,\n                count,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lset\n   */ this.lset = (key, index, value)=>new LSetCommand([\n                key,\n                index,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/ltrim\n   */ this.ltrim = (...args)=>new LTrimCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/mget\n   */ this.mget = (...args)=>new MGetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/mset\n   */ this.mset = (kv)=>new MSetCommand([\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/msetnx\n   */ this.msetnx = (kv)=>new MSetNXCommand([\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/persist\n   */ this.persist = (...args)=>new PersistCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pexpire\n   */ this.pexpire = (...args)=>new PExpireCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pexpireat\n   */ this.pexpireat = (...args)=>new PExpireAtCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pfadd\n   */ this.pfadd = (...args)=>new PfAddCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pfcount\n   */ this.pfcount = (...args)=>new PfCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pfmerge\n   */ this.pfmerge = (...args)=>new PfMergeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/ping\n   */ this.ping = (args)=>new PingCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/psetex\n   */ this.psetex = (key, ttl, value)=>new PSetEXCommand([\n                key,\n                ttl,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/psubscribe\n   */ this.psubscribe = (patterns)=>{\n            const patternArray = Array.isArray(patterns) ? patterns : [\n                patterns\n            ];\n            return new Subscriber(this.client, patternArray, true, this.opts);\n        };\n        /**\n   * @see https://redis.io/commands/pttl\n   */ this.pttl = (...args)=>new PTtlCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/publish\n   */ this.publish = (...args)=>new PublishCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/randomkey\n   */ this.randomkey = ()=>new RandomKeyCommand().exec(this.client);\n        /**\n   * @see https://redis.io/commands/rename\n   */ this.rename = (...args)=>new RenameCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/renamenx\n   */ this.renamenx = (...args)=>new RenameNXCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/rpop\n   */ this.rpop = (...args)=>new RPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/rpush\n   */ this.rpush = (key, ...elements)=>new RPushCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/rpushx\n   */ this.rpushx = (key, ...elements)=>new RPushXCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sadd\n   */ this.sadd = (key, member, ...members)=>new SAddCommand([\n                key,\n                member,\n                ...members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/scard\n   */ this.scard = (...args)=>new SCardCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/script-exists\n   */ this.scriptExists = (...args)=>new ScriptExistsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/script-flush\n   */ this.scriptFlush = (...args)=>new ScriptFlushCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/script-load\n   */ this.scriptLoad = (...args)=>new ScriptLoadCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sdiff\n   */ this.sdiff = (...args)=>new SDiffCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sdiffstore\n   */ this.sdiffstore = (...args)=>new SDiffStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/set\n   */ this.set = (key, value, opts)=>new SetCommand([\n                key,\n                value,\n                opts\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setbit\n   */ this.setbit = (...args)=>new SetBitCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setex\n   */ this.setex = (key, ttl, value)=>new SetExCommand([\n                key,\n                ttl,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setnx\n   */ this.setnx = (key, value)=>new SetNxCommand([\n                key,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setrange\n   */ this.setrange = (...args)=>new SetRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sinter\n   */ this.sinter = (...args)=>new SInterCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sinterstore\n   */ this.sinterstore = (...args)=>new SInterStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sismember\n   */ this.sismember = (key, member)=>new SIsMemberCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/smismember\n   */ this.smismember = (key, members)=>new SMIsMemberCommand([\n                key,\n                members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/smembers\n   */ this.smembers = (...args)=>new SMembersCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/smove\n   */ this.smove = (source, destination, member)=>new SMoveCommand([\n                source,\n                destination,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/spop\n   */ this.spop = (...args)=>new SPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/srandmember\n   */ this.srandmember = (...args)=>new SRandMemberCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/srem\n   */ this.srem = (key, ...members)=>new SRemCommand([\n                key,\n                ...members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sscan\n   */ this.sscan = (...args)=>new SScanCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/strlen\n   */ this.strlen = (...args)=>new StrLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/subscribe\n   */ this.subscribe = (channels)=>{\n            const channelArray = Array.isArray(channels) ? channels : [\n                channels\n            ];\n            return new Subscriber(this.client, channelArray, false, this.opts);\n        };\n        /**\n   * @see https://redis.io/commands/sunion\n   */ this.sunion = (...args)=>new SUnionCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sunionstore\n   */ this.sunionstore = (...args)=>new SUnionStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/time\n   */ this.time = ()=>new TimeCommand().exec(this.client);\n        /**\n   * @see https://redis.io/commands/touch\n   */ this.touch = (...args)=>new TouchCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/ttl\n   */ this.ttl = (...args)=>new TtlCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/type\n   */ this.type = (...args)=>new TypeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/unlink\n   */ this.unlink = (...args)=>new UnlinkCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xadd\n   */ this.xadd = (...args)=>new XAddCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xack\n   */ this.xack = (...args)=>new XAckCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xdel\n   */ this.xdel = (...args)=>new XDelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xgroup\n   */ this.xgroup = (...args)=>new XGroupCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xread\n   */ this.xread = (...args)=>new XReadCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xreadgroup\n   */ this.xreadgroup = (...args)=>new XReadGroupCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xinfo\n   */ this.xinfo = (...args)=>new XInfoCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xlen\n   */ this.xlen = (...args)=>new XLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xpending\n   */ this.xpending = (...args)=>new XPendingCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xclaim\n   */ this.xclaim = (...args)=>new XClaimCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xautoclaim\n   */ this.xautoclaim = (...args)=>new XAutoClaim(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xtrim\n   */ this.xtrim = (...args)=>new XTrimCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xrange\n   */ this.xrange = (...args)=>new XRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xrevrange\n   */ this.xrevrange = (...args)=>new XRevRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zadd\n   */ this.zadd = (...args)=>{\n            if (\"score\" in args[1]) {\n                return new ZAddCommand([\n                    args[0],\n                    args[1],\n                    ...args.slice(2)\n                ], this.opts).exec(this.client);\n            }\n            return new ZAddCommand([\n                args[0],\n                args[1],\n                ...args.slice(2)\n            ], this.opts).exec(this.client);\n        };\n        /**\n   * @see https://redis.io/commands/zcard\n   */ this.zcard = (...args)=>new ZCardCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zcount\n   */ this.zcount = (...args)=>new ZCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zdiffstore\n   */ this.zdiffstore = (...args)=>new ZDiffStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zincrby\n   */ this.zincrby = (key, increment, member)=>new ZIncrByCommand([\n                key,\n                increment,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zinterstore\n   */ this.zinterstore = (...args)=>new ZInterStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zlexcount\n   */ this.zlexcount = (...args)=>new ZLexCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zmscore\n   */ this.zmscore = (...args)=>new ZMScoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zpopmax\n   */ this.zpopmax = (...args)=>new ZPopMaxCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zpopmin\n   */ this.zpopmin = (...args)=>new ZPopMinCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrange\n   */ this.zrange = (...args)=>new ZRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrank\n   */ this.zrank = (key, member)=>new ZRankCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrem\n   */ this.zrem = (key, ...members)=>new ZRemCommand([\n                key,\n                ...members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zremrangebylex\n   */ this.zremrangebylex = (...args)=>new ZRemRangeByLexCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zremrangebyrank\n   */ this.zremrangebyrank = (...args)=>new ZRemRangeByRankCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zremrangebyscore\n   */ this.zremrangebyscore = (...args)=>new ZRemRangeByScoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrevrank\n   */ this.zrevrank = (key, member)=>new ZRevRankCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zscan\n   */ this.zscan = (...args)=>new ZScanCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zscore\n   */ this.zscore = (key, member)=>new ZScoreCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zunion\n   */ this.zunion = (...args)=>new ZUnionCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zunionstore\n   */ this.zunionstore = (...args)=>new ZUnionStoreCommand(args, this.opts).exec(this.client);\n        this.client = client;\n        this.opts = opts;\n        this.enableTelemetry = opts?.enableTelemetry ?? true;\n        if (opts?.readYourWrites === false) {\n            this.client.readYourWrites = false;\n        }\n        this.enableAutoPipelining = opts?.enableAutoPipelining ?? true;\n    }\n    get readYourWritesSyncToken() {\n        return this.client.upstashSyncToken;\n    }\n    set readYourWritesSyncToken(session) {\n        this.client.upstashSyncToken = session;\n    }\n    get json() {\n        return {\n            /**\n       * @see https://redis.io/commands/json.arrappend\n       */ arrappend: (...args)=>new JsonArrAppendCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrindex\n       */ arrindex: (...args)=>new JsonArrIndexCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrinsert\n       */ arrinsert: (...args)=>new JsonArrInsertCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrlen\n       */ arrlen: (...args)=>new JsonArrLenCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrpop\n       */ arrpop: (...args)=>new JsonArrPopCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrtrim\n       */ arrtrim: (...args)=>new JsonArrTrimCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.clear\n       */ clear: (...args)=>new JsonClearCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.del\n       */ del: (...args)=>new JsonDelCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.forget\n       */ forget: (...args)=>new JsonForgetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.get\n       */ get: (...args)=>new JsonGetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.merge\n       */ merge: (...args)=>new JsonMergeCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.mget\n       */ mget: (...args)=>new JsonMGetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.mset\n       */ mset: (...args)=>new JsonMSetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.numincrby\n       */ numincrby: (...args)=>new JsonNumIncrByCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.nummultby\n       */ nummultby: (...args)=>new JsonNumMultByCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.objkeys\n       */ objkeys: (...args)=>new JsonObjKeysCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.objlen\n       */ objlen: (...args)=>new JsonObjLenCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.resp\n       */ resp: (...args)=>new JsonRespCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.set\n       */ set: (...args)=>new JsonSetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.strappend\n       */ strappend: (...args)=>new JsonStrAppendCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.strlen\n       */ strlen: (...args)=>new JsonStrLenCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.toggle\n       */ toggle: (...args)=>new JsonToggleCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.type\n       */ type: (...args)=>new JsonTypeCommand(args, this.opts).exec(this.client)\n        };\n    }\n    /**\n   * Creates a new script.\n   *\n   * Scripts offer the ability to optimistically try to execute a script without having to send the\n   * entire script to the server. If the script is loaded on the server, it tries again by sending\n   * the entire script. Afterwards, the script is cached on the server.\n   *\n   * @param script - The script to create\n   * @param opts - Optional options to pass to the script `{ readonly?: boolean }`\n   * @returns A new script\n   *\n   * @example\n   * ```ts\n   * const redis = new Redis({...})\n   *\n   * const script = redis.createScript<string>(\"return ARGV[1];\")\n   * const arg1 = await script.eval([], [\"Hello World\"])\n   * expect(arg1, \"Hello World\")\n   * ```\n   * @example\n   * ```ts\n   * const redis = new Redis({...})\n   *\n   * const script = redis.createScript<string>(\"return ARGV[1];\", { readonly: true })\n   * const arg1 = await script.evalRo([], [\"Hello World\"])\n   * expect(arg1, \"Hello World\")\n   * ```\n   */ createScript(script, opts) {\n        return opts?.readonly ? new ScriptRO(this, script) : new Script(this, script);\n    }\n    scan(cursor, opts) {\n        return new ScanCommand([\n            cursor,\n            opts\n        ], this.opts).exec(this.client);\n    }\n};\n// version.ts\nvar VERSION = \"v1.35.4\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHVwc3Rhc2gvcmVkaXMvY2h1bmstWEpRQVdFV0QubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZkwsVUFBVUksUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBRUEsZUFBZTtBQUNmLElBQUlDLGdCQUFnQixDQUFDO0FBQ3JCTixTQUFTTSxlQUFlO0lBQ3RCQyxjQUFjLElBQU1BO0lBQ3BCQyxVQUFVLElBQU1BO0FBQ2xCO0FBQ0EsSUFBSUQsZUFBZSxjQUFjRTtJQUMvQkMsWUFBWUMsT0FBTyxDQUFFO1FBQ25CLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNSLElBQUksR0FBRztJQUNkO0FBQ0Y7QUFDQSxJQUFJSyxXQUFXLGNBQWNDO0lBQzNCQyxZQUFZRSxHQUFHLENBQUU7UUFDZixLQUFLLENBQ0gsQ0FBQyxzR0FBc0csRUFBRUEsSUFBSSxHQUFHLENBQUM7UUFFbkgsSUFBSSxDQUFDVCxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRUEsY0FBYztBQUNkLFNBQVNVLGVBQWVDLEdBQUc7SUFDekIsTUFBTUMsU0FBU0MsTUFBTUMsT0FBTyxDQUFDSCxPQUFPQSxJQUFJSSxHQUFHLENBQUMsQ0FBQ0M7UUFDM0MsSUFBSTtZQUNGLE9BQU9OLGVBQWVNO1FBQ3hCLEVBQUUsT0FBTTtZQUNOLE9BQU9BO1FBQ1Q7SUFDRixLQUFLQyxLQUFLQyxLQUFLLENBQUNQO0lBQ2hCLElBQUksT0FBT0MsV0FBVyxZQUFZQSxPQUFPTyxRQUFRLE9BQU9SLEtBQUs7UUFDM0QsT0FBT0E7SUFDVDtJQUNBLE9BQU9DO0FBQ1Q7QUFDQSxTQUFTUSxjQUFjQyxNQUFNO0lBQzNCLElBQUk7UUFDRixPQUFPWCxlQUFlVztJQUN4QixFQUFFLE9B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bG9uZS8uL25vZGVfbW9kdWxlcy9AdXBzdGFzaC9yZWRpcy9jaHVuay1YSlFBV0VXRC5tanM/MWNhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xuXG4vLyBwa2cvZXJyb3IudHNcbnZhciBlcnJvcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChlcnJvcl9leHBvcnRzLCB7XG4gIFVwc3Rhc2hFcnJvcjogKCkgPT4gVXBzdGFzaEVycm9yLFxuICBVcmxFcnJvcjogKCkgPT4gVXJsRXJyb3Jcbn0pO1xudmFyIFVwc3Rhc2hFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJVcHN0YXNoRXJyb3JcIjtcbiAgfVxufTtcbnZhciBVcmxFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih1cmwpIHtcbiAgICBzdXBlcihcbiAgICAgIGBVcHN0YXNoIFJlZGlzIGNsaWVudCB3YXMgcGFzc2VkIGFuIGludmFsaWQgVVJMLiBZb3Ugc2hvdWxkIHBhc3MgYSBVUkwgc3RhcnRpbmcgd2l0aCBodHRwcy4gUmVjZWl2ZWQ6IFwiJHt1cmx9XCIuIGBcbiAgICApO1xuICAgIHRoaXMubmFtZSA9IFwiVXJsRXJyb3JcIjtcbiAgfVxufTtcblxuLy8gcGtnL3V0aWwudHNcbmZ1bmN0aW9uIHBhcnNlUmVjdXJzaXZlKG9iaikge1xuICBjb25zdCBwYXJzZWQgPSBBcnJheS5pc0FycmF5KG9iaikgPyBvYmoubWFwKChvKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBwYXJzZVJlY3Vyc2l2ZShvKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBvO1xuICAgIH1cbiAgfSkgOiBKU09OLnBhcnNlKG9iaik7XG4gIGlmICh0eXBlb2YgcGFyc2VkID09PSBcIm51bWJlclwiICYmIHBhcnNlZC50b1N0cmluZygpICE9PSBvYmopIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59XG5mdW5jdGlvbiBwYXJzZVJlc3BvbnNlKHJlc3VsdCkge1xuICB0cnkge1xuICAgIHJldHVybiBwYXJzZVJlY3Vyc2l2ZShyZXN1bHQpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVNjYW5SZXNwb25zZShyZXN1bHQpIHtcbiAgcmV0dXJuIFtyZXN1bHRbMF0sIC4uLnBhcnNlUmVzcG9uc2UocmVzdWx0LnNsaWNlKDEpKV07XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVNjYW5XaXRoVHlwZXNSZXNwb25zZShyZXN1bHQpIHtcbiAgY29uc3QgW2N1cnNvciwga2V5c10gPSByZXN1bHQ7XG4gIGNvbnN0IHBhcnNlZEtleXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcGFyc2VkS2V5cy5wdXNoKHsga2V5OiBrZXlzW2ldLCB0eXBlOiBrZXlzW2kgKyAxXSB9KTtcbiAgfVxuICByZXR1cm4gW2N1cnNvciwgcGFyc2VkS2V5c107XG59XG5mdW5jdGlvbiBtZXJnZUhlYWRlcnMoLi4uaGVhZGVycykge1xuICBjb25zdCBtZXJnZWQgPSB7fTtcbiAgZm9yIChjb25zdCBoZWFkZXIgb2YgaGVhZGVycykge1xuICAgIGlmICghaGVhZGVyKSBjb250aW51ZTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhoZWFkZXIpKSB7XG4gICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBtZXJnZWRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VkO1xufVxuXG4vLyBwa2cvaHR0cC50c1xudmFyIEh0dHBDbGllbnQgPSBjbGFzcyB7XG4gIGJhc2VVcmw7XG4gIGhlYWRlcnM7XG4gIG9wdGlvbnM7XG4gIHJlYWRZb3VyV3JpdGVzO1xuICB1cHN0YXNoU3luY1Rva2VuID0gXCJcIjtcbiAgaGFzQ3JlZGVudGlhbHM7XG4gIHJldHJ5O1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBiYWNrZW5kOiBjb25maWcub3B0aW9ucz8uYmFja2VuZCxcbiAgICAgIGFnZW50OiBjb25maWcuYWdlbnQsXG4gICAgICByZXNwb25zZUVuY29kaW5nOiBjb25maWcucmVzcG9uc2VFbmNvZGluZyA/PyBcImJhc2U2NFwiLFxuICAgICAgLy8gZGVmYXVsdCB0byBiYXNlNjRcbiAgICAgIGNhY2hlOiBjb25maWcuY2FjaGUsXG4gICAgICBzaWduYWw6IGNvbmZpZy5zaWduYWwsXG4gICAgICBrZWVwQWxpdmU6IGNvbmZpZy5rZWVwQWxpdmUgPz8gdHJ1ZVxuICAgIH07XG4gICAgdGhpcy51cHN0YXNoU3luY1Rva2VuID0gXCJcIjtcbiAgICB0aGlzLnJlYWRZb3VyV3JpdGVzID0gY29uZmlnLnJlYWRZb3VyV3JpdGVzID8/IHRydWU7XG4gICAgdGhpcy5iYXNlVXJsID0gKGNvbmZpZy5iYXNlVXJsIHx8IFwiXCIpLnJlcGxhY2UoL1xcLyQvLCBcIlwiKTtcbiAgICBjb25zdCB1cmxSZWdleCA9IC9eaHR0cHM/OlxcL1xcL1teXFxzIyQuLz9dLlxcUyokLztcbiAgICBpZiAodGhpcy5iYXNlVXJsICYmICF1cmxSZWdleC50ZXN0KHRoaXMuYmFzZVVybCkpIHtcbiAgICAgIHRocm93IG5ldyBVcmxFcnJvcih0aGlzLmJhc2VVcmwpO1xuICAgIH1cbiAgICB0aGlzLmhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIC4uLmNvbmZpZy5oZWFkZXJzXG4gICAgfTtcbiAgICB0aGlzLmhhc0NyZWRlbnRpYWxzID0gQm9vbGVhbih0aGlzLmJhc2VVcmwgJiYgdGhpcy5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3BsaXQoXCIgXCIpWzFdKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNlRW5jb2RpbmcgPT09IFwiYmFzZTY0XCIpIHtcbiAgICAgIHRoaXMuaGVhZGVyc1tcIlVwc3Rhc2gtRW5jb2RpbmdcIl0gPSBcImJhc2U2NFwiO1xuICAgIH1cbiAgICB0aGlzLnJldHJ5ID0gdHlwZW9mIGNvbmZpZy5yZXRyeSA9PT0gXCJib29sZWFuXCIgJiYgIWNvbmZpZy5yZXRyeSA/IHtcbiAgICAgIGF0dGVtcHRzOiAxLFxuICAgICAgYmFja29mZjogKCkgPT4gMFxuICAgIH0gOiB7XG4gICAgICBhdHRlbXB0czogY29uZmlnLnJldHJ5Py5yZXRyaWVzID8/IDUsXG4gICAgICBiYWNrb2ZmOiBjb25maWcucmV0cnk/LmJhY2tvZmYgPz8gKChyZXRyeUNvdW50KSA9PiBNYXRoLmV4cChyZXRyeUNvdW50KSAqIDUwKVxuICAgIH07XG4gIH1cbiAgbWVyZ2VUZWxlbWV0cnkodGVsZW1ldHJ5KSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbWVyZ2UodGhpcy5oZWFkZXJzLCBcIlVwc3Rhc2gtVGVsZW1ldHJ5LVJ1bnRpbWVcIiwgdGVsZW1ldHJ5LnJ1bnRpbWUpO1xuICAgIHRoaXMuaGVhZGVycyA9IG1lcmdlKHRoaXMuaGVhZGVycywgXCJVcHN0YXNoLVRlbGVtZXRyeS1QbGF0Zm9ybVwiLCB0ZWxlbWV0cnkucGxhdGZvcm0pO1xuICAgIHRoaXMuaGVhZGVycyA9IG1lcmdlKHRoaXMuaGVhZGVycywgXCJVcHN0YXNoLVRlbGVtZXRyeS1TZGtcIiwgdGVsZW1ldHJ5LnNkayk7XG4gIH1cbiAgYXN5bmMgcmVxdWVzdChyZXEpIHtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IG1lcmdlSGVhZGVycyh0aGlzLmhlYWRlcnMsIHJlcS5oZWFkZXJzID8/IHt9KTtcbiAgICBjb25zdCByZXF1ZXN0VXJsID0gW3RoaXMuYmFzZVVybCwgLi4ucmVxLnBhdGggPz8gW11dLmpvaW4oXCIvXCIpO1xuICAgIGNvbnN0IGlzRXZlbnRTdHJlYW0gPSByZXF1ZXN0SGVhZGVycy5BY2NlcHQgPT09IFwidGV4dC9ldmVudC1zdHJlYW1cIjtcbiAgICBjb25zdCBzaWduYWwgPSByZXEuc2lnbmFsID8/IHRoaXMub3B0aW9ucy5zaWduYWw7XG4gICAgY29uc3QgaXNTaWduYWxGdW5jdGlvbiA9IHR5cGVvZiBzaWduYWwgPT09IFwiZnVuY3Rpb25cIjtcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIC8vQHRzLWV4cGVjdC1lcnJvciB0aGlzIHNob3VsZCB0aHJvdyBkdWUgdG8gYnVuIHJlZ3Jlc3Npb25cbiAgICAgIGNhY2hlOiB0aGlzLm9wdGlvbnMuY2FjaGUsXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXEuYm9keSksXG4gICAgICBrZWVwYWxpdmU6IHRoaXMub3B0aW9ucy5rZWVwQWxpdmUsXG4gICAgICBhZ2VudDogdGhpcy5vcHRpb25zLmFnZW50LFxuICAgICAgc2lnbmFsOiBpc1NpZ25hbEZ1bmN0aW9uID8gc2lnbmFsKCkgOiBzaWduYWwsXG4gICAgICAvKipcbiAgICAgICAqIEZhc3RseSBzcGVjaWZpY1xuICAgICAgICovXG4gICAgICBiYWNrZW5kOiB0aGlzLm9wdGlvbnMuYmFja2VuZFxuICAgIH07XG4gICAgaWYgKCF0aGlzLmhhc0NyZWRlbnRpYWxzKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiW1Vwc3Rhc2ggUmVkaXNdIFJlZGlzIGNsaWVudCB3YXMgaW5pdGlhbGl6ZWQgd2l0aG91dCB1cmwgb3IgdG9rZW4uIEZhaWxlZCB0byBleGVjdXRlIGNvbW1hbmQuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlYWRZb3VyV3JpdGVzKSB7XG4gICAgICBjb25zdCBuZXdIZWFkZXIgPSB0aGlzLnVwc3Rhc2hTeW5jVG9rZW47XG4gICAgICB0aGlzLmhlYWRlcnNbXCJ1cHN0YXNoLXN5bmMtdG9rZW5cIl0gPSBuZXdIZWFkZXI7XG4gICAgfVxuICAgIGxldCByZXMgPSBudWxsO1xuICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdGhpcy5yZXRyeS5hdHRlbXB0czsgaSsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXMgPSBhd2FpdCBmZXRjaChyZXF1ZXN0VXJsLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBjYXRjaCAoZXJyb3JfKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0T3B0aW9ucy5zaWduYWw/LmFib3J0ZWQgJiYgaXNTaWduYWxGdW5jdGlvbikge1xuICAgICAgICAgIHRocm93IGVycm9yXztcbiAgICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0T3B0aW9ucy5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICBjb25zdCBteUJsb2IgPSBuZXcgQmxvYihbXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7IHJlc3VsdDogcmVxdWVzdE9wdGlvbnMuc2lnbmFsLnJlYXNvbiA/PyBcIkFib3J0ZWRcIiB9KVxuICAgICAgICAgIF0pO1xuICAgICAgICAgIGNvbnN0IG15T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdE9wdGlvbnMuc2lnbmFsLnJlYXNvbiA/PyBcIkFib3J0ZWRcIlxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzID0gbmV3IFJlc3BvbnNlKG15QmxvYiwgbXlPcHRpb25zKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlcnJvciA9IGVycm9yXztcbiAgICAgICAgaWYgKGkgPCB0aGlzLnJldHJ5LmF0dGVtcHRzKSB7XG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHIpID0+IHNldFRpbWVvdXQociwgdGhpcy5yZXRyeS5iYWNrb2ZmKGkpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IGVycm9yID8/IG5ldyBFcnJvcihcIkV4aGF1c3RlZCBhbGwgcmV0cmllc1wiKTtcbiAgICB9XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IGJvZHkyID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBVcHN0YXNoRXJyb3IoYCR7Ym9keTIuZXJyb3J9LCBjb21tYW5kIHdhczogJHtKU09OLnN0cmluZ2lmeShyZXEuYm9keSl9YCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlYWRZb3VyV3JpdGVzKSB7XG4gICAgICBjb25zdCBoZWFkZXJzID0gcmVzLmhlYWRlcnM7XG4gICAgICB0aGlzLnVwc3Rhc2hTeW5jVG9rZW4gPSBoZWFkZXJzLmdldChcInVwc3Rhc2gtc3luYy10b2tlblwiKSA/PyBcIlwiO1xuICAgIH1cbiAgICBpZiAoaXNFdmVudFN0cmVhbSAmJiByZXEgJiYgcmVxLm9uTWVzc2FnZSAmJiByZXMuYm9keSkge1xuICAgICAgY29uc3QgcmVhZGVyID0gcmVzLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgaWYgKGRvbmUpIGJyZWFrO1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IGNodW5rLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCJkYXRhOiBcIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbGluZS5zbGljZSg2KTtcbiAgICAgICAgICAgICAgICByZXEub25NZXNzYWdlPy4oZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yMikge1xuICAgICAgICAgIGlmIChlcnJvcjIgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvcjIubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlN0cmVhbSByZWFkaW5nIGVycm9yOlwiLCBlcnJvcjIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcmVhZGVyLmNhbmNlbCgpO1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICAgIHJldHVybiB7IHJlc3VsdDogMSB9O1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBpZiAodGhpcy5yZWFkWW91cldyaXRlcykge1xuICAgICAgY29uc3QgaGVhZGVycyA9IHJlcy5oZWFkZXJzO1xuICAgICAgdGhpcy51cHN0YXNoU3luY1Rva2VuID0gaGVhZGVycy5nZXQoXCJ1cHN0YXNoLXN5bmMtdG9rZW5cIikgPz8gXCJcIjtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zZUVuY29kaW5nID09PSBcImJhc2U2NFwiKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShib2R5KSkge1xuICAgICAgICByZXR1cm4gYm9keS5tYXAoKHsgcmVzdWx0OiByZXN1bHQyLCBlcnJvcjogZXJyb3IyIH0pID0+ICh7XG4gICAgICAgICAgcmVzdWx0OiBkZWNvZGUocmVzdWx0MiksXG4gICAgICAgICAgZXJyb3I6IGVycm9yMlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBkZWNvZGUoYm9keS5yZXN1bHQpO1xuICAgICAgcmV0dXJuIHsgcmVzdWx0LCBlcnJvcjogYm9keS5lcnJvciB9O1xuICAgIH1cbiAgICByZXR1cm4gYm9keTtcbiAgfVxufTtcbmZ1bmN0aW9uIGJhc2U2NGRlY29kZShiNjQpIHtcbiAgbGV0IGRlYyA9IFwiXCI7XG4gIHRyeSB7XG4gICAgY29uc3QgYmluU3RyaW5nID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IHNpemUgPSBiaW5TdHJpbmcubGVuZ3RoO1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIGJ5dGVzW2ldID0gYmluU3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIGRlYyA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShieXRlcyk7XG4gIH0gY2F0Y2gge1xuICAgIGRlYyA9IGI2NDtcbiAgfVxuICByZXR1cm4gZGVjO1xufVxuZnVuY3Rpb24gZGVjb2RlKHJhdykge1xuICBsZXQgcmVzdWx0ID0gdm9pZCAwO1xuICBzd2l0Y2ggKHR5cGVvZiByYXcpIHtcbiAgICBjYXNlIFwidW5kZWZpbmVkXCI6IHtcbiAgICAgIHJldHVybiByYXc7XG4gICAgfVxuICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgcmVzdWx0ID0gcmF3O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmF3KSkge1xuICAgICAgICByZXN1bHQgPSByYXcubWFwKFxuICAgICAgICAgICh2KSA9PiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiA/IGJhc2U2NGRlY29kZSh2KSA6IEFycmF5LmlzQXJyYXkodikgPyB2Lm1hcCgoZWxlbWVudCkgPT4gZGVjb2RlKGVsZW1lbnQpKSA6IHZcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInN0cmluZ1wiOiB7XG4gICAgICByZXN1bHQgPSByYXcgPT09IFwiT0tcIiA/IFwiT0tcIiA6IGJhc2U2NGRlY29kZShyYXcpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbWVyZ2Uob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIG9ialtrZXldID0gb2JqW2tleV0gPyBbb2JqW2tleV0sIHZhbHVlXS5qb2luKFwiLFwiKSA6IHZhbHVlO1xuICByZXR1cm4gb2JqO1xufVxuXG4vLyBwa2cvY29tbWFuZHMvY29tbWFuZC50c1xudmFyIGRlZmF1bHRTZXJpYWxpemVyID0gKGMpID0+IHtcbiAgc3dpdGNoICh0eXBlb2YgYykge1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgY2FzZSBcImJvb2xlYW5cIjoge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjKTtcbiAgICB9XG4gIH1cbn07XG52YXIgQ29tbWFuZCA9IGNsYXNzIHtcbiAgY29tbWFuZDtcbiAgc2VyaWFsaXplO1xuICBkZXNlcmlhbGl6ZTtcbiAgaGVhZGVycztcbiAgcGF0aDtcbiAgb25NZXNzYWdlO1xuICBpc1N0cmVhbWluZztcbiAgc2lnbmFsO1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGNvbW1hbmQgaW5zdGFuY2UuXG4gICAqXG4gICAqIFlvdSBjYW4gZGVmaW5lIGEgY3VzdG9tIGBkZXNlcmlhbGl6ZWAgZnVuY3Rpb24uIEJ5IGRlZmF1bHQgd2UgdHJ5IHRvIGRlc2VyaWFsaXplIGFzIGpzb24uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb21tYW5kLCBvcHRzKSB7XG4gICAgdGhpcy5zZXJpYWxpemUgPSBkZWZhdWx0U2VyaWFsaXplcjtcbiAgICB0aGlzLmRlc2VyaWFsaXplID0gb3B0cz8uYXV0b21hdGljRGVzZXJpYWxpemF0aW9uID09PSB2b2lkIDAgfHwgb3B0cy5hdXRvbWF0aWNEZXNlcmlhbGl6YXRpb24gPyBvcHRzPy5kZXNlcmlhbGl6ZSA/PyBwYXJzZVJlc3BvbnNlIDogKHgpID0+IHg7XG4gICAgdGhpcy5jb21tYW5kID0gY29tbWFuZC5tYXAoKGMpID0+IHRoaXMuc2VyaWFsaXplKGMpKTtcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRzPy5oZWFkZXJzO1xuICAgIHRoaXMucGF0aCA9IG9wdHM/LnBhdGg7XG4gICAgdGhpcy5vbk1lc3NhZ2UgPSBvcHRzPy5zdHJlYW1PcHRpb25zPy5vbk1lc3NhZ2U7XG4gICAgdGhpcy5pc1N0cmVhbWluZyA9IG9wdHM/LnN0cmVhbU9wdGlvbnM/LmlzU3RyZWFtaW5nID8/IGZhbHNlO1xuICAgIHRoaXMuc2lnbmFsID0gb3B0cz8uc3RyZWFtT3B0aW9ucz8uc2lnbmFsO1xuICAgIGlmIChvcHRzPy5sYXRlbmN5TG9nZ2luZykge1xuICAgICAgY29uc3Qgb3JpZ2luYWxFeGVjID0gdGhpcy5leGVjLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmV4ZWMgPSBhc3luYyAoY2xpZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9yaWdpbmFsRXhlYyhjbGllbnQpO1xuICAgICAgICBjb25zdCBlbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgY29uc3QgbG9nZ2VyUmVzdWx0ID0gKGVuZCAtIHN0YXJ0KS50b0ZpeGVkKDIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBgTGF0ZW5jeSBmb3IgXFx4MUJbMzg7MjsxOTsxODU7MzltJHt0aGlzLmNvbW1hbmRbMF0udG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpfVxceDFCWzBtOiBcXHgxQlszODsyOzA7MjU1OzI1NW0ke2xvZ2dlclJlc3VsdH0gbXNcXHgxQlswbWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHRoZSBjb21tYW5kIHVzaW5nIGEgY2xpZW50LlxuICAgKi9cbiAgYXN5bmMgZXhlYyhjbGllbnQpIHtcbiAgICBjb25zdCB7IHJlc3VsdCwgZXJyb3IgfSA9IGF3YWl0IGNsaWVudC5yZXF1ZXN0KHtcbiAgICAgIGJvZHk6IHRoaXMuY29tbWFuZCxcbiAgICAgIHBhdGg6IHRoaXMucGF0aCxcbiAgICAgIHVwc3Rhc2hTeW5jVG9rZW46IGNsaWVudC51cHN0YXNoU3luY1Rva2VuLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgb25NZXNzYWdlOiB0aGlzLm9uTWVzc2FnZSxcbiAgICAgIGlzU3RyZWFtaW5nOiB0aGlzLmlzU3RyZWFtaW5nLFxuICAgICAgc2lnbmFsOiB0aGlzLnNpZ25hbFxuICAgIH0pO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVwc3Rhc2hFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlcXVlc3QgZGlkIG5vdCByZXR1cm4gYSByZXN1bHRcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRlc2VyaWFsaXplKHJlc3VsdCk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9ocmFuZGZpZWxkLnRzXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZShyZXN1bHQpIHtcbiAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBvYmogPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBjb25zdCBrZXkgPSByZXN1bHRbaV07XG4gICAgY29uc3QgdmFsdWUgPSByZXN1bHRbaSArIDFdO1xuICAgIHRyeSB7XG4gICAgICBvYmpba2V5XSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbnZhciBIUmFuZEZpZWxkQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJocmFuZGZpZWxkXCIsIGNtZFswXV07XG4gICAgaWYgKHR5cGVvZiBjbWRbMV0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChjbWRbMV0pO1xuICAgIH1cbiAgICBpZiAoY21kWzJdKSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJXSVRIVkFMVUVTXCIpO1xuICAgIH1cbiAgICBzdXBlcihjb21tYW5kLCB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRvIHNpbGVuY2UgY29tcGlsZXJcbiAgICAgIGRlc2VyaWFsaXplOiBjbWRbMl0gPyAocmVzdWx0KSA9PiBkZXNlcmlhbGl6ZShyZXN1bHQpIDogb3B0cz8uZGVzZXJpYWxpemUsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9hcHBlbmQudHNcbnZhciBBcHBlbmRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiYXBwZW5kXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvYml0Y291bnQudHNcbnZhciBCaXRDb3VudENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBzdGFydCwgZW5kXSwgb3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJiaXRjb3VudFwiLCBrZXldO1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChzdGFydCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5kID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjb21tYW5kLnB1c2goZW5kKTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9iaXRmaWVsZC50c1xudmFyIEJpdEZpZWxkQ29tbWFuZCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoYXJncywgY2xpZW50LCBvcHRzLCBleGVjT3BlcmF0aW9uID0gKGNvbW1hbmQpID0+IGNvbW1hbmQuZXhlYyh0aGlzLmNsaWVudCkpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMuZXhlY09wZXJhdGlvbiA9IGV4ZWNPcGVyYXRpb247XG4gICAgdGhpcy5jb21tYW5kID0gW1wiYml0ZmllbGRcIiwgLi4uYXJnc107XG4gIH1cbiAgY29tbWFuZDtcbiAgY2hhaW4oLi4uYXJncykge1xuICAgIHRoaXMuY29tbWFuZC5wdXNoKC4uLmFyZ3MpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGdldCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhaW4oXCJnZXRcIiwgLi4uYXJncyk7XG4gIH1cbiAgc2V0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFpbihcInNldFwiLCAuLi5hcmdzKTtcbiAgfVxuICBpbmNyYnkoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmNoYWluKFwiaW5jcmJ5XCIsIC4uLmFyZ3MpO1xuICB9XG4gIG92ZXJmbG93KG92ZXJmbG93KSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhaW4oXCJvdmVyZmxvd1wiLCBvdmVyZmxvdyk7XG4gIH1cbiAgZXhlYygpIHtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IENvbW1hbmQodGhpcy5jb21tYW5kLCB0aGlzLm9wdHMpO1xuICAgIHJldHVybiB0aGlzLmV4ZWNPcGVyYXRpb24oY29tbWFuZCk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9iaXRvcC50c1xudmFyIEJpdE9wQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImJpdG9wXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvYml0cG9zLnRzXG52YXIgQml0UG9zQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImJpdHBvc1wiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2NvcHkudHNcbnZhciBDb3B5Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIGRlc3RpbmF0aW9uS2V5LCBvcHRzXSwgY29tbWFuZE9wdGlvbnMpIHtcbiAgICBzdXBlcihbXCJDT1BZXCIsIGtleSwgZGVzdGluYXRpb25LZXksIC4uLm9wdHM/LnJlcGxhY2UgPyBbXCJSRVBMQUNFXCJdIDogW11dLCB7XG4gICAgICAuLi5jb21tYW5kT3B0aW9ucyxcbiAgICAgIGRlc2VyaWFsaXplKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0ID4gMCkge1xuICAgICAgICAgIHJldHVybiBcIkNPUElFRFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIk5PVF9DT1BJRURcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2Ric2l6ZS50c1xudmFyIERCU2l6ZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoW1wiZGJzaXplXCJdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2RlY3IudHNcbnZhciBEZWNyQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImRlY3JcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9kZWNyYnkudHNcbnZhciBEZWNyQnlDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiZGVjcmJ5XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZGVsLnRzXG52YXIgRGVsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImRlbFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2VjaG8udHNcbnZhciBFY2hvQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImVjaG9cIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9ldmFsUm8udHNcbnZhciBFdmFsUk9Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW3NjcmlwdCwga2V5cywgYXJnc10sIG9wdHMpIHtcbiAgICBzdXBlcihbXCJldmFsX3JvXCIsIHNjcmlwdCwga2V5cy5sZW5ndGgsIC4uLmtleXMsIC4uLmFyZ3MgPz8gW11dLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2V2YWwudHNcbnZhciBFdmFsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtzY3JpcHQsIGtleXMsIGFyZ3NdLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiZXZhbFwiLCBzY3JpcHQsIGtleXMubGVuZ3RoLCAuLi5rZXlzLCAuLi5hcmdzID8/IFtdXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9ldmFsc2hhUm8udHNcbnZhciBFdmFsc2hhUk9Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW3NoYSwga2V5cywgYXJnc10sIG9wdHMpIHtcbiAgICBzdXBlcihbXCJldmFsc2hhX3JvXCIsIHNoYSwga2V5cy5sZW5ndGgsIC4uLmtleXMsIC4uLmFyZ3MgPz8gW11dLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2V2YWxzaGEudHNcbnZhciBFdmFsc2hhQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtzaGEsIGtleXMsIGFyZ3NdLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiZXZhbHNoYVwiLCBzaGEsIGtleXMubGVuZ3RoLCAuLi5rZXlzLCAuLi5hcmdzID8/IFtdXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9leGVjLnRzXG52YXIgRXhlY0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBjb25zdCBub3JtYWxpemVkQ21kID0gY21kLm1hcCgoYXJnKSA9PiB0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiID8gYXJnIDogU3RyaW5nKGFyZykpO1xuICAgIHN1cGVyKG5vcm1hbGl6ZWRDbWQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZXhpc3RzLnRzXG52YXIgRXhpc3RzQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImV4aXN0c1wiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2V4cGlyZS50c1xudmFyIEV4cGlyZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJleHBpcmVcIiwgLi4uY21kLmZpbHRlcihCb29sZWFuKV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZXhwaXJlYXQudHNcbnZhciBFeHBpcmVBdENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJleHBpcmVhdFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2ZsdXNoYWxsLnRzXG52YXIgRmx1c2hBbGxDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoYXJncywgb3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJmbHVzaGFsbFwiXTtcbiAgICBpZiAoYXJncyAmJiBhcmdzLmxlbmd0aCA+IDAgJiYgYXJnc1swXS5hc3luYykge1xuICAgICAgY29tbWFuZC5wdXNoKFwiYXN5bmNcIik7XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZmx1c2hkYi50c1xudmFyIEZsdXNoREJDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW29wdHNdLCBjbWRPcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcImZsdXNoZGJcIl07XG4gICAgaWYgKG9wdHM/LmFzeW5jKSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJhc3luY1wiKTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgY21kT3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9nZW9fYWRkLnRzXG52YXIgR2VvQWRkQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIGFyZzEsIC4uLmFyZzJdLCBvcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcImdlb2FkZFwiLCBrZXldO1xuICAgIGlmIChcIm54XCIgaW4gYXJnMSAmJiBhcmcxLm54KSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJueFwiKTtcbiAgICB9IGVsc2UgaWYgKFwieHhcIiBpbiBhcmcxICYmIGFyZzEueHgpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcInh4XCIpO1xuICAgIH1cbiAgICBpZiAoXCJjaFwiIGluIGFyZzEgJiYgYXJnMS5jaCkge1xuICAgICAgY29tbWFuZC5wdXNoKFwiY2hcIik7XG4gICAgfVxuICAgIGlmIChcImxhdGl0dWRlXCIgaW4gYXJnMSAmJiBhcmcxLmxhdGl0dWRlKSB7XG4gICAgICBjb21tYW5kLnB1c2goYXJnMS5sb25naXR1ZGUsIGFyZzEubGF0aXR1ZGUsIGFyZzEubWVtYmVyKTtcbiAgICB9XG4gICAgY29tbWFuZC5wdXNoKFxuICAgICAgLi4uYXJnMi5mbGF0TWFwKCh7IGxhdGl0dWRlLCBsb25naXR1ZGUsIG1lbWJlciB9KSA9PiBbbG9uZ2l0dWRlLCBsYXRpdHVkZSwgbWVtYmVyXSlcbiAgICApO1xuICAgIHN1cGVyKGNvbW1hbmQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZ2VvX2Rpc3QudHNcbnZhciBHZW9EaXN0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIG1lbWJlcjEsIG1lbWJlcjIsIHVuaXQgPSBcIk1cIl0sIG9wdHMpIHtcbiAgICBzdXBlcihbXCJHRU9ESVNUXCIsIGtleSwgbWVtYmVyMSwgbWVtYmVyMiwgdW5pdF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZ2VvX2hhc2gudHNcbnZhciBHZW9IYXNoQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IFtrZXldID0gY21kO1xuICAgIGNvbnN0IG1lbWJlcnMgPSBBcnJheS5pc0FycmF5KGNtZFsxXSkgPyBjbWRbMV0gOiBjbWQuc2xpY2UoMSk7XG4gICAgc3VwZXIoW1wiR0VPSEFTSFwiLCBrZXksIC4uLm1lbWJlcnNdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2dlb19wb3MudHNcbnZhciBHZW9Qb3NDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW2tleV0gPSBjbWQ7XG4gICAgY29uc3QgbWVtYmVycyA9IEFycmF5LmlzQXJyYXkoY21kWzFdKSA/IGNtZFsxXSA6IGNtZC5zbGljZSgxKTtcbiAgICBzdXBlcihbXCJHRU9QT1NcIiwga2V5LCAuLi5tZW1iZXJzXSwge1xuICAgICAgZGVzZXJpYWxpemU6IChyZXN1bHQpID0+IHRyYW5zZm9ybShyZXN1bHQpLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gdHJhbnNmb3JtKHJlc3VsdCkge1xuICBjb25zdCBmaW5hbCA9IFtdO1xuICBmb3IgKGNvbnN0IHBvcyBvZiByZXN1bHQpIHtcbiAgICBpZiAoIXBvcz8uWzBdIHx8ICFwb3M/LlsxXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZpbmFsLnB1c2goeyBsbmc6IE51bWJlci5wYXJzZUZsb2F0KHBvc1swXSksIGxhdDogTnVtYmVyLnBhcnNlRmxvYXQocG9zWzFdKSB9KTtcbiAgfVxuICByZXR1cm4gZmluYWw7XG59XG5cbi8vIHBrZy9jb21tYW5kcy9nZW9fc2VhcmNoLnRzXG52YXIgR2VvU2VhcmNoQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIGNlbnRlclBvaW50LCBzaGFwZSwgb3JkZXIsIG9wdHNdLCBjb21tYW5kT3B0aW9ucykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJHRU9TRUFSQ0hcIiwga2V5XTtcbiAgICBpZiAoY2VudGVyUG9pbnQudHlwZSA9PT0gXCJGUk9NTUVNQkVSXCIgfHwgY2VudGVyUG9pbnQudHlwZSA9PT0gXCJmcm9tbWVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChjZW50ZXJQb2ludC50eXBlLCBjZW50ZXJQb2ludC5tZW1iZXIpO1xuICAgIH1cbiAgICBpZiAoY2VudGVyUG9pbnQudHlwZSA9PT0gXCJGUk9NTE9OTEFUXCIgfHwgY2VudGVyUG9pbnQudHlwZSA9PT0gXCJmcm9tbG9ubGF0XCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChjZW50ZXJQb2ludC50eXBlLCBjZW50ZXJQb2ludC5jb29yZGluYXRlLmxvbiwgY2VudGVyUG9pbnQuY29vcmRpbmF0ZS5sYXQpO1xuICAgIH1cbiAgICBpZiAoc2hhcGUudHlwZSA9PT0gXCJCWVJBRElVU1wiIHx8IHNoYXBlLnR5cGUgPT09IFwiYnlyYWRpdXNcIikge1xuICAgICAgY29tbWFuZC5wdXNoKHNoYXBlLnR5cGUsIHNoYXBlLnJhZGl1cywgc2hhcGUucmFkaXVzVHlwZSk7XG4gICAgfVxuICAgIGlmIChzaGFwZS50eXBlID09PSBcIkJZQk9YXCIgfHwgc2hhcGUudHlwZSA9PT0gXCJieWJveFwiKSB7XG4gICAgICBjb21tYW5kLnB1c2goc2hhcGUudHlwZSwgc2hhcGUucmVjdC53aWR0aCwgc2hhcGUucmVjdC5oZWlnaHQsIHNoYXBlLnJlY3RUeXBlKTtcbiAgICB9XG4gICAgY29tbWFuZC5wdXNoKG9yZGVyKTtcbiAgICBpZiAob3B0cz8uY291bnQpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcIkNPVU5UXCIsIG9wdHMuY291bnQubGltaXQsIC4uLm9wdHMuY291bnQuYW55ID8gW1wiQU5ZXCJdIDogW10pO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2Zvcm0yID0gKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKCFvcHRzPy53aXRoQ29vcmQgJiYgIW9wdHM/LndpdGhEaXN0ICYmICFvcHRzPy53aXRoSGFzaCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0Lm1hcCgobWVtYmVyKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB7IG1lbWJlcjogSlNPTi5wYXJzZShtZW1iZXIpIH07XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4geyBtZW1iZXIgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdC5tYXAoKG1lbWJlcnMpID0+IHtcbiAgICAgICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvYmoubWVtYmVyID0gSlNPTi5wYXJzZShtZW1iZXJzWzBdKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgb2JqLm1lbWJlciA9IG1lbWJlcnNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMud2l0aERpc3QpIHtcbiAgICAgICAgICBvYmouZGlzdCA9IE51bWJlci5wYXJzZUZsb2F0KG1lbWJlcnNbY291bnRlcisrXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMud2l0aEhhc2gpIHtcbiAgICAgICAgICBvYmouaGFzaCA9IG1lbWJlcnNbY291bnRlcisrXS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLndpdGhDb29yZCkge1xuICAgICAgICAgIG9iai5jb29yZCA9IHtcbiAgICAgICAgICAgIGxvbmc6IE51bWJlci5wYXJzZUZsb2F0KG1lbWJlcnNbY291bnRlcl1bMF0pLFxuICAgICAgICAgICAgbGF0OiBOdW1iZXIucGFyc2VGbG9hdChtZW1iZXJzW2NvdW50ZXJdWzFdKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgc3VwZXIoXG4gICAgICBbXG4gICAgICAgIC4uLmNvbW1hbmQsXG4gICAgICAgIC4uLm9wdHM/LndpdGhDb29yZCA/IFtcIldJVEhDT09SRFwiXSA6IFtdLFxuICAgICAgICAuLi5vcHRzPy53aXRoRGlzdCA/IFtcIldJVEhESVNUXCJdIDogW10sXG4gICAgICAgIC4uLm9wdHM/LndpdGhIYXNoID8gW1wiV0lUSEhBU0hcIl0gOiBbXVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgZGVzZXJpYWxpemU6IHRyYW5zZm9ybTIsXG4gICAgICAgIC4uLmNvbW1hbmRPcHRpb25zXG4gICAgICB9XG4gICAgKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2dlb19zZWFyY2hfc3RvcmUudHNcbnZhciBHZW9TZWFyY2hTdG9yZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihbZGVzdGluYXRpb24sIGtleSwgY2VudGVyUG9pbnQsIHNoYXBlLCBvcmRlciwgb3B0c10sIGNvbW1hbmRPcHRpb25zKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcIkdFT1NFQVJDSFNUT1JFXCIsIGRlc3RpbmF0aW9uLCBrZXldO1xuICAgIGlmIChjZW50ZXJQb2ludC50eXBlID09PSBcIkZST01NRU1CRVJcIiB8fCBjZW50ZXJQb2ludC50eXBlID09PSBcImZyb21tZW1iZXJcIikge1xuICAgICAgY29tbWFuZC5wdXNoKGNlbnRlclBvaW50LnR5cGUsIGNlbnRlclBvaW50Lm1lbWJlcik7XG4gICAgfVxuICAgIGlmIChjZW50ZXJQb2ludC50eXBlID09PSBcIkZST01MT05MQVRcIiB8fCBjZW50ZXJQb2ludC50eXBlID09PSBcImZyb21sb25sYXRcIikge1xuICAgICAgY29tbWFuZC5wdXNoKGNlbnRlclBvaW50LnR5cGUsIGNlbnRlclBvaW50LmNvb3JkaW5hdGUubG9uLCBjZW50ZXJQb2ludC5jb29yZGluYXRlLmxhdCk7XG4gICAgfVxuICAgIGlmIChzaGFwZS50eXBlID09PSBcIkJZUkFESVVTXCIgfHwgc2hhcGUudHlwZSA9PT0gXCJieXJhZGl1c1wiKSB7XG4gICAgICBjb21tYW5kLnB1c2goc2hhcGUudHlwZSwgc2hhcGUucmFkaXVzLCBzaGFwZS5yYWRpdXNUeXBlKTtcbiAgICB9XG4gICAgaWYgKHNoYXBlLnR5cGUgPT09IFwiQllCT1hcIiB8fCBzaGFwZS50eXBlID09PSBcImJ5Ym94XCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChzaGFwZS50eXBlLCBzaGFwZS5yZWN0LndpZHRoLCBzaGFwZS5yZWN0LmhlaWdodCwgc2hhcGUucmVjdFR5cGUpO1xuICAgIH1cbiAgICBjb21tYW5kLnB1c2gob3JkZXIpO1xuICAgIGlmIChvcHRzPy5jb3VudCkge1xuICAgICAgY29tbWFuZC5wdXNoKFwiQ09VTlRcIiwgb3B0cy5jb3VudC5saW1pdCwgLi4ub3B0cy5jb3VudC5hbnkgPyBbXCJBTllcIl0gOiBbXSk7XG4gICAgfVxuICAgIHN1cGVyKFsuLi5jb21tYW5kLCAuLi5vcHRzPy5zdG9yZURpc3QgPyBbXCJTVE9SRURJU1RcIl0gOiBbXV0sIGNvbW1hbmRPcHRpb25zKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2dldC50c1xudmFyIEdldENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJnZXRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9nZXRiaXQudHNcbnZhciBHZXRCaXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiZ2V0Yml0XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZ2V0ZGVsLnRzXG52YXIgR2V0RGVsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImdldGRlbFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2dldGV4LnRzXG52YXIgR2V0RXhDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgb3B0c10sIGNtZE9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wiZ2V0ZXhcIiwga2V5XTtcbiAgICBpZiAob3B0cykge1xuICAgICAgaWYgKFwiZXhcIiBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLmV4ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcImV4XCIsIG9wdHMuZXgpO1xuICAgICAgfSBlbHNlIGlmIChcInB4XCIgaW4gb3B0cyAmJiB0eXBlb2Ygb3B0cy5weCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJweFwiLCBvcHRzLnB4KTtcbiAgICAgIH0gZWxzZSBpZiAoXCJleGF0XCIgaW4gb3B0cyAmJiB0eXBlb2Ygb3B0cy5leGF0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcImV4YXRcIiwgb3B0cy5leGF0KTtcbiAgICAgIH0gZWxzZSBpZiAoXCJweGF0XCIgaW4gb3B0cyAmJiB0eXBlb2Ygb3B0cy5weGF0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcInB4YXRcIiwgb3B0cy5weGF0KTtcbiAgICAgIH0gZWxzZSBpZiAoXCJwZXJzaXN0XCIgaW4gb3B0cyAmJiBvcHRzLnBlcnNpc3QpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwicGVyc2lzdFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgY21kT3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9nZXRyYW5nZS50c1xudmFyIEdldFJhbmdlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImdldHJhbmdlXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvZ2V0c2V0LnRzXG52YXIgR2V0U2V0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImdldHNldFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2hkZWwudHNcbnZhciBIRGVsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImhkZWxcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9oZXhpc3RzLnRzXG52YXIgSEV4aXN0c0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJoZXhpc3RzXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaGV4cGlyZS50c1xudmFyIEhFeHBpcmVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW2tleSwgZmllbGRzLCBzZWNvbmRzLCBvcHRpb25dID0gY21kO1xuICAgIGNvbnN0IGZpZWxkQXJyYXkgPSBBcnJheS5pc0FycmF5KGZpZWxkcykgPyBmaWVsZHMgOiBbZmllbGRzXTtcbiAgICBzdXBlcihcbiAgICAgIFtcbiAgICAgICAgXCJoZXhwaXJlXCIsXG4gICAgICAgIGtleSxcbiAgICAgICAgc2Vjb25kcyxcbiAgICAgICAgLi4ub3B0aW9uID8gW29wdGlvbl0gOiBbXSxcbiAgICAgICAgXCJGSUVMRFNcIixcbiAgICAgICAgZmllbGRBcnJheS5sZW5ndGgsXG4gICAgICAgIC4uLmZpZWxkQXJyYXlcbiAgICAgIF0sXG4gICAgICBvcHRzXG4gICAgKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2hleHBpcmVhdC50c1xudmFyIEhFeHBpcmVBdENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBjb25zdCBba2V5LCBmaWVsZHMsIHRpbWVzdGFtcCwgb3B0aW9uXSA9IGNtZDtcbiAgICBjb25zdCBmaWVsZEFycmF5ID0gQXJyYXkuaXNBcnJheShmaWVsZHMpID8gZmllbGRzIDogW2ZpZWxkc107XG4gICAgc3VwZXIoXG4gICAgICBbXG4gICAgICAgIFwiaGV4cGlyZWF0XCIsXG4gICAgICAgIGtleSxcbiAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAuLi5vcHRpb24gPyBbb3B0aW9uXSA6IFtdLFxuICAgICAgICBcIkZJRUxEU1wiLFxuICAgICAgICBmaWVsZEFycmF5Lmxlbmd0aCxcbiAgICAgICAgLi4uZmllbGRBcnJheVxuICAgICAgXSxcbiAgICAgIG9wdHNcbiAgICApO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaGV4cGlyZXRpbWUudHNcbnZhciBIRXhwaXJlVGltZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBjb25zdCBba2V5LCBmaWVsZHNdID0gY21kO1xuICAgIGNvbnN0IGZpZWxkQXJyYXkgPSBBcnJheS5pc0FycmF5KGZpZWxkcykgPyBmaWVsZHMgOiBbZmllbGRzXTtcbiAgICBzdXBlcihbXCJoZXhwaXJldGltZVwiLCBrZXksIFwiRklFTERTXCIsIGZpZWxkQXJyYXkubGVuZ3RoLCAuLi5maWVsZEFycmF5XSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9ocGVyc2lzdC50c1xudmFyIEhQZXJzaXN0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IFtrZXksIGZpZWxkc10gPSBjbWQ7XG4gICAgY29uc3QgZmllbGRBcnJheSA9IEFycmF5LmlzQXJyYXkoZmllbGRzKSA/IGZpZWxkcyA6IFtmaWVsZHNdO1xuICAgIHN1cGVyKFtcImhwZXJzaXN0XCIsIGtleSwgXCJGSUVMRFNcIiwgZmllbGRBcnJheS5sZW5ndGgsIC4uLmZpZWxkQXJyYXldLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2hwZXhwaXJlLnRzXG52YXIgSFBFeHBpcmVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW2tleSwgZmllbGRzLCBtaWxsaXNlY29uZHMsIG9wdGlvbl0gPSBjbWQ7XG4gICAgY29uc3QgZmllbGRBcnJheSA9IEFycmF5LmlzQXJyYXkoZmllbGRzKSA/IGZpZWxkcyA6IFtmaWVsZHNdO1xuICAgIHN1cGVyKFxuICAgICAgW1xuICAgICAgICBcImhwZXhwaXJlXCIsXG4gICAgICAgIGtleSxcbiAgICAgICAgbWlsbGlzZWNvbmRzLFxuICAgICAgICAuLi5vcHRpb24gPyBbb3B0aW9uXSA6IFtdLFxuICAgICAgICBcIkZJRUxEU1wiLFxuICAgICAgICBmaWVsZEFycmF5Lmxlbmd0aCxcbiAgICAgICAgLi4uZmllbGRBcnJheVxuICAgICAgXSxcbiAgICAgIG9wdHNcbiAgICApO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaHBleHBpcmVhdC50c1xudmFyIEhQRXhwaXJlQXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW2tleSwgZmllbGRzLCB0aW1lc3RhbXAsIG9wdGlvbl0gPSBjbWQ7XG4gICAgY29uc3QgZmllbGRBcnJheSA9IEFycmF5LmlzQXJyYXkoZmllbGRzKSA/IGZpZWxkcyA6IFtmaWVsZHNdO1xuICAgIHN1cGVyKFxuICAgICAgW1xuICAgICAgICBcImhwZXhwaXJlYXRcIixcbiAgICAgICAga2V5LFxuICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgIC4uLm9wdGlvbiA/IFtvcHRpb25dIDogW10sXG4gICAgICAgIFwiRklFTERTXCIsXG4gICAgICAgIGZpZWxkQXJyYXkubGVuZ3RoLFxuICAgICAgICAuLi5maWVsZEFycmF5XG4gICAgICBdLFxuICAgICAgb3B0c1xuICAgICk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9ocGV4cGlyZXRpbWUudHNcbnZhciBIUEV4cGlyZVRpbWVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW2tleSwgZmllbGRzXSA9IGNtZDtcbiAgICBjb25zdCBmaWVsZEFycmF5ID0gQXJyYXkuaXNBcnJheShmaWVsZHMpID8gZmllbGRzIDogW2ZpZWxkc107XG4gICAgc3VwZXIoW1wiaHBleHBpcmV0aW1lXCIsIGtleSwgXCJGSUVMRFNcIiwgZmllbGRBcnJheS5sZW5ndGgsIC4uLmZpZWxkQXJyYXldLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2hwdHRsLnRzXG52YXIgSFBUdGxDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW2tleSwgZmllbGRzXSA9IGNtZDtcbiAgICBjb25zdCBmaWVsZEFycmF5ID0gQXJyYXkuaXNBcnJheShmaWVsZHMpID8gZmllbGRzIDogW2ZpZWxkc107XG4gICAgc3VwZXIoW1wiaHB0dGxcIiwga2V5LCBcIkZJRUxEU1wiLCBmaWVsZEFycmF5Lmxlbmd0aCwgLi4uZmllbGRBcnJheV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaGdldC50c1xudmFyIEhHZXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaGdldFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2hnZXRhbGwudHNcbmZ1bmN0aW9uIGRlc2VyaWFsaXplMihyZXN1bHQpIHtcbiAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBvYmogPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBjb25zdCBrZXkgPSByZXN1bHRbaV07XG4gICAgY29uc3QgdmFsdWUgPSByZXN1bHRbaSArIDFdO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB2YWx1ZUlzTnVtYmVyQW5kTm90U2FmZUludGVnZXIgPSAhTnVtYmVyLmlzTmFOKE51bWJlcih2YWx1ZSkpICYmICFOdW1iZXIuaXNTYWZlSW50ZWdlcihOdW1iZXIodmFsdWUpKTtcbiAgICAgIG9ialtrZXldID0gdmFsdWVJc051bWJlckFuZE5vdFNhZmVJbnRlZ2VyID8gdmFsdWUgOiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG52YXIgSEdldEFsbENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJoZ2V0YWxsXCIsIC4uLmNtZF0sIHtcbiAgICAgIGRlc2VyaWFsaXplOiAocmVzdWx0KSA9PiBkZXNlcmlhbGl6ZTIocmVzdWx0KSxcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2hpbmNyYnkudHNcbnZhciBISW5jckJ5Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImhpbmNyYnlcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9oaW5jcmJ5ZmxvYXQudHNcbnZhciBISW5jckJ5RmxvYXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaGluY3JieWZsb2F0XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaGtleXMudHNcbnZhciBIS2V5c0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5XSwgb3B0cykge1xuICAgIHN1cGVyKFtcImhrZXlzXCIsIGtleV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaGxlbi50c1xudmFyIEhMZW5Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaGxlblwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2htZ2V0LnRzXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZTMoZmllbGRzLCByZXN1bHQpIHtcbiAgaWYgKHJlc3VsdC5ldmVyeSgoZmllbGQpID0+IGZpZWxkID09PSBudWxsKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBmb3IgKGNvbnN0IFtpLCBmaWVsZF0gb2YgZmllbGRzLmVudHJpZXMoKSkge1xuICAgIHRyeSB7XG4gICAgICBvYmpbZmllbGRdID0gSlNPTi5wYXJzZShyZXN1bHRbaV0pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgb2JqW2ZpZWxkXSA9IHJlc3VsdFtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbnZhciBITUdldENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCAuLi5maWVsZHNdLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaG1nZXRcIiwga2V5LCAuLi5maWVsZHNdLCB7XG4gICAgICBkZXNlcmlhbGl6ZTogKHJlc3VsdCkgPT4gZGVzZXJpYWxpemUzKGZpZWxkcywgcmVzdWx0KSxcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2htc2V0LnRzXG52YXIgSE1TZXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwga3ZdLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaG1zZXRcIiwga2V5LCAuLi5PYmplY3QuZW50cmllcyhrdikuZmxhdE1hcCgoW2ZpZWxkLCB2YWx1ZV0pID0+IFtmaWVsZCwgdmFsdWVdKV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaHNjYW4udHNcbnZhciBIU2NhbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBjdXJzb3IsIGNtZE9wdHNdLCBvcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcImhzY2FuXCIsIGtleSwgY3Vyc29yXTtcbiAgICBpZiAoY21kT3B0cz8ubWF0Y2gpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcIm1hdGNoXCIsIGNtZE9wdHMubWF0Y2gpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNtZE9wdHM/LmNvdW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJjb3VudFwiLCBjbWRPcHRzLmNvdW50KTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwge1xuICAgICAgZGVzZXJpYWxpemU6IGRlc2VyaWFsaXplU2NhblJlc3BvbnNlLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaHNldC50c1xudmFyIEhTZXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwga3ZdLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaHNldFwiLCBrZXksIC4uLk9iamVjdC5lbnRyaWVzKGt2KS5mbGF0TWFwKChbZmllbGQsIHZhbHVlXSkgPT4gW2ZpZWxkLCB2YWx1ZV0pXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9oc2V0bngudHNcbnZhciBIU2V0TlhDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaHNldG54XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaHN0cmxlbi50c1xudmFyIEhTdHJMZW5Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaHN0cmxlblwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2h0dGwudHNcbnZhciBIVHRsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IFtrZXksIGZpZWxkc10gPSBjbWQ7XG4gICAgY29uc3QgZmllbGRBcnJheSA9IEFycmF5LmlzQXJyYXkoZmllbGRzKSA/IGZpZWxkcyA6IFtmaWVsZHNdO1xuICAgIHN1cGVyKFtcImh0dGxcIiwga2V5LCBcIkZJRUxEU1wiLCBmaWVsZEFycmF5Lmxlbmd0aCwgLi4uZmllbGRBcnJheV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaHZhbHMudHNcbnZhciBIVmFsc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJodmFsc1wiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2luY3IudHNcbnZhciBJbmNyQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImluY3JcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9pbmNyYnkudHNcbnZhciBJbmNyQnlDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiaW5jcmJ5XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvaW5jcmJ5ZmxvYXQudHNcbnZhciBJbmNyQnlGbG9hdENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJpbmNyYnlmbG9hdFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2pzb25fYXJyYXBwZW5kLnRzXG52YXIgSnNvbkFyckFwcGVuZENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJKU09OLkFSUkFQUEVORFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2pzb25fYXJyaW5kZXgudHNcbnZhciBKc29uQXJySW5kZXhDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5BUlJJTkRFWFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2pzb25fYXJyaW5zZXJ0LnRzXG52YXIgSnNvbkFyckluc2VydENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJKU09OLkFSUklOU0VSVFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2pzb25fYXJybGVuLnRzXG52YXIgSnNvbkFyckxlbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJKU09OLkFSUkxFTlwiLCBjbWRbMF0sIGNtZFsxXSA/PyBcIiRcIl0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9hcnJwb3AudHNcbnZhciBKc29uQXJyUG9wQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcIkpTT04uQVJSUE9QXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9hcnJ0cmltLnRzXG52YXIgSnNvbkFyclRyaW1Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgcGF0aCA9IGNtZFsxXSA/PyBcIiRcIjtcbiAgICBjb25zdCBzdGFydCA9IGNtZFsyXSA/PyAwO1xuICAgIGNvbnN0IHN0b3AgPSBjbWRbM10gPz8gMDtcbiAgICBzdXBlcihbXCJKU09OLkFSUlRSSU1cIiwgY21kWzBdLCBwYXRoLCBzdGFydCwgc3RvcF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9jbGVhci50c1xudmFyIEpzb25DbGVhckNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJKU09OLkNMRUFSXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9kZWwudHNcbnZhciBKc29uRGVsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcIkpTT04uREVMXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9mb3JnZXQudHNcbnZhciBKc29uRm9yZ2V0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcIkpTT04uRk9SR0VUXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9nZXQudHNcbnZhciBKc29uR2V0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJKU09OLkdFVFwiXTtcbiAgICBpZiAodHlwZW9mIGNtZFsxXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29tbWFuZC5wdXNoKC4uLmNtZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1hbmQucHVzaChjbWRbMF0pO1xuICAgICAgaWYgKGNtZFsxXSkge1xuICAgICAgICBpZiAoY21kWzFdLmluZGVudCkge1xuICAgICAgICAgIGNvbW1hbmQucHVzaChcIklOREVOVFwiLCBjbWRbMV0uaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY21kWzFdLm5ld2xpbmUpIHtcbiAgICAgICAgICBjb21tYW5kLnB1c2goXCJORVdMSU5FXCIsIGNtZFsxXS5uZXdsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY21kWzFdLnNwYWNlKSB7XG4gICAgICAgICAgY29tbWFuZC5wdXNoKFwiU1BBQ0VcIiwgY21kWzFdLnNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29tbWFuZC5wdXNoKC4uLmNtZC5zbGljZSgyKSk7XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9tZXJnZS50c1xudmFyIEpzb25NZXJnZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wiSlNPTi5NRVJHRVwiLCAuLi5jbWRdO1xuICAgIHN1cGVyKGNvbW1hbmQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvanNvbl9tZ2V0LnRzXG52YXIgSnNvbk1HZXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5NR0VUXCIsIC4uLmNtZFswXSwgY21kWzFdXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX21zZXQudHNcbnZhciBKc29uTVNldENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wiSlNPTi5NU0VUXCJdO1xuICAgIGZvciAoY29uc3QgYyBvZiBjbWQpIHtcbiAgICAgIGNvbW1hbmQucHVzaChjLmtleSwgYy5wYXRoLCBjLnZhbHVlKTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX251bWluY3JieS50c1xudmFyIEpzb25OdW1JbmNyQnlDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5OVU1JTkNSQllcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX251bW11bHRieS50c1xudmFyIEpzb25OdW1NdWx0QnlDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5OVU1NVUxUQllcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX29iamtleXMudHNcbnZhciBKc29uT2JqS2V5c0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJKU09OLk9CSktFWVNcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX29iamxlbi50c1xudmFyIEpzb25PYmpMZW5Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5PQkpMRU5cIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX3Jlc3AudHNcbnZhciBKc29uUmVzcENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJKU09OLlJFU1BcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX3NldC50c1xudmFyIEpzb25TZXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcIkpTT04uU0VUXCIsIGNtZFswXSwgY21kWzFdLCBjbWRbMl1dO1xuICAgIGlmIChjbWRbM10pIHtcbiAgICAgIGlmIChjbWRbM10ubngpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwiTlhcIik7XG4gICAgICB9IGVsc2UgaWYgKGNtZFszXS54eCkge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJYWFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX3N0cmFwcGVuZC50c1xudmFyIEpzb25TdHJBcHBlbmRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5TVFJBUFBFTkRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX3N0cmxlbi50c1xudmFyIEpzb25TdHJMZW5Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5TVFJMRU5cIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX3RvZ2dsZS50c1xudmFyIEpzb25Ub2dnbGVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiSlNPTi5UT0dHTEVcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9qc29uX3R5cGUudHNcbnZhciBKc29uVHlwZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJKU09OLlRZUEVcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9rZXlzLnRzXG52YXIgS2V5c0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJrZXlzXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvbGluZGV4LnRzXG52YXIgTEluZGV4Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImxpbmRleFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2xpbnNlcnQudHNcbnZhciBMSW5zZXJ0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImxpbnNlcnRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9sbGVuLnRzXG52YXIgTExlbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJsbGVuXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvbG1vdmUudHNcbnZhciBMTW92ZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJsbW92ZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2xtcG9wLnRzXG52YXIgTG1Qb3BDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW251bWtleXMsIGtleXMsIGRpcmVjdGlvbiwgY291bnRdID0gY21kO1xuICAgIHN1cGVyKFtcIkxNUE9QXCIsIG51bWtleXMsIC4uLmtleXMsIGRpcmVjdGlvbiwgLi4uY291bnQgPyBbXCJDT1VOVFwiLCBjb3VudF0gOiBbXV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvbHBvcC50c1xudmFyIExQb3BDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wibHBvcFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2xwb3MudHNcbnZhciBMUG9zQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IGFyZ3MgPSBbXCJscG9zXCIsIGNtZFswXSwgY21kWzFdXTtcbiAgICBpZiAodHlwZW9mIGNtZFsyXT8ucmFuayA9PT0gXCJudW1iZXJcIikge1xuICAgICAgYXJncy5wdXNoKFwicmFua1wiLCBjbWRbMl0ucmFuayk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY21kWzJdPy5jb3VudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgYXJncy5wdXNoKFwiY291bnRcIiwgY21kWzJdLmNvdW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjbWRbMl0/Lm1heExlbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgYXJncy5wdXNoKFwibWF4TGVuXCIsIGNtZFsyXS5tYXhMZW4pO1xuICAgIH1cbiAgICBzdXBlcihhcmdzLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2xwdXNoLnRzXG52YXIgTFB1c2hDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wibHB1c2hcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9scHVzaHgudHNcbnZhciBMUHVzaFhDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wibHB1c2h4XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvbHJhbmdlLnRzXG52YXIgTFJhbmdlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImxyYW5nZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL2xyZW0udHNcbnZhciBMUmVtQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcImxyZW1cIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9sc2V0LnRzXG52YXIgTFNldENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJsc2V0XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvbHRyaW0udHNcbnZhciBMVHJpbUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJsdHJpbVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL21nZXQudHNcbnZhciBNR2V0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IGtleXMgPSBBcnJheS5pc0FycmF5KGNtZFswXSkgPyBjbWRbMF0gOiBjbWQ7XG4gICAgc3VwZXIoW1wibWdldFwiLCAuLi5rZXlzXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9tc2V0LnRzXG52YXIgTVNldENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba3ZdLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wibXNldFwiLCAuLi5PYmplY3QuZW50cmllcyhrdikuZmxhdE1hcCgoW2tleSwgdmFsdWVdKSA9PiBba2V5LCB2YWx1ZV0pXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9tc2V0bngudHNcbnZhciBNU2V0TlhDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2t2XSwgb3B0cykge1xuICAgIHN1cGVyKFtcIm1zZXRueFwiLCAuLi5PYmplY3QuZW50cmllcyhrdikuZmxhdCgpXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9wZXJzaXN0LnRzXG52YXIgUGVyc2lzdENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJwZXJzaXN0XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvcGV4cGlyZS50c1xudmFyIFBFeHBpcmVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wicGV4cGlyZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3BleHBpcmVhdC50c1xudmFyIFBFeHBpcmVBdENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJwZXhwaXJlYXRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9wZmFkZC50c1xudmFyIFBmQWRkQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInBmYWRkXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvcGZjb3VudC50c1xudmFyIFBmQ291bnRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wicGZjb3VudFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3BmbWVyZ2UudHNcbnZhciBQZk1lcmdlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInBmbWVyZ2VcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9waW5nLnRzXG52YXIgUGluZ0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wicGluZ1wiXTtcbiAgICBpZiAoY21kPy5bMF0gIT09IHZvaWQgMCkge1xuICAgICAgY29tbWFuZC5wdXNoKGNtZFswXSk7XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvcHNldGV4LnRzXG52YXIgUFNldEVYQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInBzZXRleFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3B0dGwudHNcbnZhciBQVHRsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInB0dGxcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9wdWJsaXNoLnRzXG52YXIgUHVibGlzaENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJwdWJsaXNoXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvcmFuZG9ta2V5LnRzXG52YXIgUmFuZG9tS2V5Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihbXCJyYW5kb21rZXlcIl0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvcmVuYW1lLnRzXG52YXIgUmVuYW1lQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInJlbmFtZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3JlbmFtZW54LnRzXG52YXIgUmVuYW1lTlhDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wicmVuYW1lbnhcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9ycG9wLnRzXG52YXIgUlBvcENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJycG9wXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvcnB1c2gudHNcbnZhciBSUHVzaENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJycHVzaFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3JwdXNoeC50c1xudmFyIFJQdXNoWENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJycHVzaHhcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zYWRkLnRzXG52YXIgU0FkZENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzYWRkXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc2Nhbi50c1xudmFyIFNjYW5Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2N1cnNvciwgb3B0c10sIGNtZE9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wic2NhblwiLCBjdXJzb3JdO1xuICAgIGlmIChvcHRzPy5tYXRjaCkge1xuICAgICAgY29tbWFuZC5wdXNoKFwibWF0Y2hcIiwgb3B0cy5tYXRjaCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0cz8uY291bnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcImNvdW50XCIsIG9wdHMuY291bnQpO1xuICAgIH1cbiAgICBpZiAob3B0cyAmJiBcIndpdGhUeXBlXCIgaW4gb3B0cyAmJiBvcHRzLndpdGhUeXBlID09PSB0cnVlKSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJ3aXRodHlwZVwiKTtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgXCJ0eXBlXCIgaW4gb3B0cyAmJiBvcHRzLnR5cGUgJiYgb3B0cy50eXBlLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbW1hbmQucHVzaChcInR5cGVcIiwgb3B0cy50eXBlKTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpZ25vcmUgdHlwZXMgaGVyZVxuICAgICAgZGVzZXJpYWxpemU6IG9wdHM/LndpdGhUeXBlID8gZGVzZXJpYWxpemVTY2FuV2l0aFR5cGVzUmVzcG9uc2UgOiBkZXNlcmlhbGl6ZVNjYW5SZXNwb25zZSxcbiAgICAgIC4uLmNtZE9wdHNcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3NjYXJkLnRzXG52YXIgU0NhcmRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wic2NhcmRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zY3JpcHRfZXhpc3RzLnRzXG52YXIgU2NyaXB0RXhpc3RzQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGhhc2hlcywgb3B0cykge1xuICAgIHN1cGVyKFtcInNjcmlwdFwiLCBcImV4aXN0c1wiLCAuLi5oYXNoZXNdLCB7XG4gICAgICBkZXNlcmlhbGl6ZTogKHJlc3VsdCkgPT4gcmVzdWx0LFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc2NyaXB0X2ZsdXNoLnRzXG52YXIgU2NyaXB0Rmx1c2hDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW29wdHNdLCBjbWRPcHRzKSB7XG4gICAgY29uc3QgY21kID0gW1wic2NyaXB0XCIsIFwiZmx1c2hcIl07XG4gICAgaWYgKG9wdHM/LnN5bmMpIHtcbiAgICAgIGNtZC5wdXNoKFwic3luY1wiKTtcbiAgICB9IGVsc2UgaWYgKG9wdHM/LmFzeW5jKSB7XG4gICAgICBjbWQucHVzaChcImFzeW5jXCIpO1xuICAgIH1cbiAgICBzdXBlcihjbWQsIGNtZE9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc2NyaXB0X2xvYWQudHNcbnZhciBTY3JpcHRMb2FkQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzY3JpcHRcIiwgXCJsb2FkXCIsIC4uLmFyZ3NdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3NkaWZmLnRzXG52YXIgU0RpZmZDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wic2RpZmZcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zZGlmZnN0b3JlLnRzXG52YXIgU0RpZmZTdG9yZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzZGlmZnN0b3JlXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc2V0LnRzXG52YXIgU2V0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIHZhbHVlLCBvcHRzXSwgY21kT3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJzZXRcIiwga2V5LCB2YWx1ZV07XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIGlmIChcIm54XCIgaW4gb3B0cyAmJiBvcHRzLm54KSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcIm54XCIpO1xuICAgICAgfSBlbHNlIGlmIChcInh4XCIgaW4gb3B0cyAmJiBvcHRzLnh4KSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcInh4XCIpO1xuICAgICAgfVxuICAgICAgaWYgKFwiZ2V0XCIgaW4gb3B0cyAmJiBvcHRzLmdldCkge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJnZXRcIik7XG4gICAgICB9XG4gICAgICBpZiAoXCJleFwiIGluIG9wdHMgJiYgdHlwZW9mIG9wdHMuZXggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwiZXhcIiwgb3B0cy5leCk7XG4gICAgICB9IGVsc2UgaWYgKFwicHhcIiBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLnB4ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcInB4XCIsIG9wdHMucHgpO1xuICAgICAgfSBlbHNlIGlmIChcImV4YXRcIiBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLmV4YXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwiZXhhdFwiLCBvcHRzLmV4YXQpO1xuICAgICAgfSBlbHNlIGlmIChcInB4YXRcIiBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLnB4YXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwicHhhdFwiLCBvcHRzLnB4YXQpO1xuICAgICAgfSBlbHNlIGlmIChcImtlZXBUdGxcIiBpbiBvcHRzICYmIG9wdHMua2VlcFR0bCkge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJrZWVwVHRsXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdXBlcihjb21tYW5kLCBjbWRPcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3NldGJpdC50c1xudmFyIFNldEJpdENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzZXRiaXRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zZXRleC50c1xudmFyIFNldEV4Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInNldGV4XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc2V0bngudHNcbnZhciBTZXROeENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzZXRueFwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3NldHJhbmdlLnRzXG52YXIgU2V0UmFuZ2VDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wic2V0cmFuZ2VcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zaW50ZXIudHNcbnZhciBTSW50ZXJDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wic2ludGVyXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc2ludGVyc3RvcmUudHNcbnZhciBTSW50ZXJTdG9yZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzaW50ZXJzdG9yZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3Npc21lbWJlci50c1xudmFyIFNJc01lbWJlckNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzaXNtZW1iZXJcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zbWVtYmVycy50c1xudmFyIFNNZW1iZXJzQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInNtZW1iZXJzXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc21pc21lbWJlci50c1xudmFyIFNNSXNNZW1iZXJDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wic21pc21lbWJlclwiLCBjbWRbMF0sIC4uLmNtZFsxXV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc21vdmUudHNcbnZhciBTTW92ZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzbW92ZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3Nwb3AudHNcbnZhciBTUG9wQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIGNvdW50XSwgb3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJzcG9wXCIsIGtleV07XG4gICAgaWYgKHR5cGVvZiBjb3VudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29tbWFuZC5wdXNoKGNvdW50KTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zcmFuZG1lbWJlci50c1xudmFyIFNSYW5kTWVtYmVyQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIGNvdW50XSwgb3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJzcmFuZG1lbWJlclwiLCBrZXldO1xuICAgIGlmICh0eXBlb2YgY291bnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChjb3VudCk7XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc3JlbS50c1xudmFyIFNSZW1Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wic3JlbVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3NzY2FuLnRzXG52YXIgU1NjYW5Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgY3Vyc29yLCBvcHRzXSwgY21kT3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJzc2NhblwiLCBrZXksIGN1cnNvcl07XG4gICAgaWYgKG9wdHM/Lm1hdGNoKSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJtYXRjaFwiLCBvcHRzLm1hdGNoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRzPy5jb3VudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29tbWFuZC5wdXNoKFwiY291bnRcIiwgb3B0cy5jb3VudCk7XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIHtcbiAgICAgIGRlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZVNjYW5SZXNwb25zZSxcbiAgICAgIC4uLmNtZE9wdHNcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3N0cmxlbi50c1xudmFyIFN0ckxlbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzdHJsZW5cIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zdW5pb24udHNcbnZhciBTVW5pb25Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wic3VuaW9uXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvc3VuaW9uc3RvcmUudHNcbnZhciBTVW5pb25TdG9yZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJzdW5pb25zdG9yZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3RpbWUudHNcbnZhciBUaW1lQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihbXCJ0aW1lXCJdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3RvdWNoLnRzXG52YXIgVG91Y2hDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1widG91Y2hcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy90dGwudHNcbnZhciBUdGxDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1widHRsXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvdHlwZS50c1xudmFyIFR5cGVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1widHlwZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3VubGluay50c1xudmFyIFVubGlua0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJ1bmxpbmtcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy94YWNrLnRzXG52YXIgWEFja0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBncm91cCwgaWRdLCBvcHRzKSB7XG4gICAgY29uc3QgaWRzID0gQXJyYXkuaXNBcnJheShpZCkgPyBbLi4uaWRdIDogW2lkXTtcbiAgICBzdXBlcihbXCJYQUNLXCIsIGtleSwgZ3JvdXAsIC4uLmlkc10sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMveGFkZC50c1xudmFyIFhBZGRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgaWQsIGVudHJpZXMsIG9wdHNdLCBjb21tYW5kT3B0aW9ucykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJYQUREXCIsIGtleV07XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIGlmIChvcHRzLm5vbWtTdHJlYW0pIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwiTk9NS1NUUkVBTVwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLnRyaW0pIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKG9wdHMudHJpbS50eXBlLCBvcHRzLnRyaW0uY29tcGFyaXNvbiwgb3B0cy50cmltLnRocmVzaG9sZCk7XG4gICAgICAgIGlmIChvcHRzLnRyaW0ubGltaXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbW1hbmQucHVzaChcIkxJTUlUXCIsIG9wdHMudHJpbS5saW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29tbWFuZC5wdXNoKGlkKTtcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhlbnRyaWVzKSkge1xuICAgICAgY29tbWFuZC5wdXNoKGssIHYpO1xuICAgIH1cbiAgICBzdXBlcihjb21tYW5kLCBjb21tYW5kT3B0aW9ucyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy94YXV0b2NsYWltLnRzXG52YXIgWEF1dG9DbGFpbSA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIGdyb3VwLCBjb25zdW1lciwgbWluSWRsZVRpbWUsIHN0YXJ0LCBvcHRpb25zXSwgb3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmRzID0gW107XG4gICAgaWYgKG9wdGlvbnM/LmNvdW50KSB7XG4gICAgICBjb21tYW5kcy5wdXNoKFwiQ09VTlRcIiwgb3B0aW9ucy5jb3VudCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zPy5qdXN0SWQpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goXCJKVVNUSURcIik7XG4gICAgfVxuICAgIHN1cGVyKFtcIlhBVVRPQ0xBSU1cIiwga2V5LCBncm91cCwgY29uc3VtZXIsIG1pbklkbGVUaW1lLCBzdGFydCwgLi4uY29tbWFuZHNdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3hjbGFpbS50c1xudmFyIFhDbGFpbUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBncm91cCwgY29uc3VtZXIsIG1pbklkbGVUaW1lLCBpZCwgb3B0aW9uc10sIG9wdHMpIHtcbiAgICBjb25zdCBpZHMgPSBBcnJheS5pc0FycmF5KGlkKSA/IFsuLi5pZF0gOiBbaWRdO1xuICAgIGNvbnN0IGNvbW1hbmRzID0gW107XG4gICAgaWYgKG9wdGlvbnM/LmlkbGVNUykge1xuICAgICAgY29tbWFuZHMucHVzaChcIklETEVcIiwgb3B0aW9ucy5pZGxlTVMpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucz8uaWRsZU1TKSB7XG4gICAgICBjb21tYW5kcy5wdXNoKFwiVElNRVwiLCBvcHRpb25zLnRpbWVNUyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zPy5yZXRyeUNvdW50KSB7XG4gICAgICBjb21tYW5kcy5wdXNoKFwiUkVUUllDT1VOVFwiLCBvcHRpb25zLnJldHJ5Q291bnQpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucz8uZm9yY2UpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goXCJGT1JDRVwiKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnM/Lmp1c3RJZCkge1xuICAgICAgY29tbWFuZHMucHVzaChcIkpVU1RJRFwiKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnM/Lmxhc3RJZCkge1xuICAgICAgY29tbWFuZHMucHVzaChcIkxBU1RJRFwiLCBvcHRpb25zLmxhc3RJZCk7XG4gICAgfVxuICAgIHN1cGVyKFtcIlhDTEFJTVwiLCBrZXksIGdyb3VwLCBjb25zdW1lciwgbWluSWRsZVRpbWUsIC4uLmlkcywgLi4uY29tbWFuZHNdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3hkZWwudHNcbnZhciBYRGVsQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIGlkc10sIG9wdHMpIHtcbiAgICBjb25zdCBjbWRzID0gQXJyYXkuaXNBcnJheShpZHMpID8gWy4uLmlkc10gOiBbaWRzXTtcbiAgICBzdXBlcihbXCJYREVMXCIsIGtleSwgLi4uY21kc10sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMveGdyb3VwLnRzXG52YXIgWEdyb3VwQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtrZXksIG9wdHNdLCBjb21tYW5kT3B0aW9ucykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJYR1JPVVBcIl07XG4gICAgc3dpdGNoIChvcHRzLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJDUkVBVEVcIjoge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJDUkVBVEVcIiwga2V5LCBvcHRzLmdyb3VwLCBvcHRzLmlkKTtcbiAgICAgICAgaWYgKG9wdHMub3B0aW9ucykge1xuICAgICAgICAgIGlmIChvcHRzLm9wdGlvbnMuTUtTVFJFQU0pIHtcbiAgICAgICAgICAgIGNvbW1hbmQucHVzaChcIk1LU1RSRUFNXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0cy5vcHRpb25zLkVOVFJJRVNSRUFEICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGNvbW1hbmQucHVzaChcIkVOVFJJRVNSRUFEXCIsIG9wdHMub3B0aW9ucy5FTlRSSUVTUkVBRC50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiQ1JFQVRFQ09OU1VNRVJcIjoge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJDUkVBVEVDT05TVU1FUlwiLCBrZXksIG9wdHMuZ3JvdXAsIG9wdHMuY29uc3VtZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJERUxDT05TVU1FUlwiOiB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcIkRFTENPTlNVTUVSXCIsIGtleSwgb3B0cy5ncm91cCwgb3B0cy5jb25zdW1lcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcIkRFU1RST1lcIjoge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJERVNUUk9ZXCIsIGtleSwgb3B0cy5ncm91cCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcIlNFVElEXCI6IHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwiU0VUSURcIiwga2V5LCBvcHRzLmdyb3VwLCBvcHRzLmlkKTtcbiAgICAgICAgaWYgKG9wdHMub3B0aW9ucz8uRU5UUklFU1JFQUQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbW1hbmQucHVzaChcIkVOVFJJRVNSRUFEXCIsIG9wdHMub3B0aW9ucy5FTlRSSUVTUkVBRC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBYR1JPVVBcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIGNvbW1hbmRPcHRpb25zKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3hpbmZvLnRzXG52YXIgWEluZm9Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgb3B0aW9uc10sIG9wdHMpIHtcbiAgICBjb25zdCBjbWRzID0gW107XG4gICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gXCJDT05TVU1FUlNcIikge1xuICAgICAgY21kcy5wdXNoKFwiQ09OU1VNRVJTXCIsIGtleSwgb3B0aW9ucy5ncm91cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNtZHMucHVzaChcIkdST1VQU1wiLCBrZXkpO1xuICAgIH1cbiAgICBzdXBlcihbXCJYSU5GT1wiLCAuLi5jbWRzXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy94bGVuLnRzXG52YXIgWExlbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJYTEVOXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMveHBlbmRpbmcudHNcbnZhciBYUGVuZGluZ0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBncm91cCwgc3RhcnQsIGVuZCwgY291bnQsIG9wdGlvbnNdLCBvcHRzKSB7XG4gICAgY29uc3QgY29uc3VtZXJzID0gb3B0aW9ucz8uY29uc3VtZXIgPT09IHZvaWQgMCA/IFtdIDogQXJyYXkuaXNBcnJheShvcHRpb25zLmNvbnN1bWVyKSA/IFsuLi5vcHRpb25zLmNvbnN1bWVyXSA6IFtvcHRpb25zLmNvbnN1bWVyXTtcbiAgICBzdXBlcihcbiAgICAgIFtcbiAgICAgICAgXCJYUEVORElOR1wiLFxuICAgICAgICBrZXksXG4gICAgICAgIGdyb3VwLFxuICAgICAgICAuLi5vcHRpb25zPy5pZGxlVGltZSA/IFtcIklETEVcIiwgb3B0aW9ucy5pZGxlVGltZV0gOiBbXSxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgY291bnQsXG4gICAgICAgIC4uLmNvbnN1bWVyc1xuICAgICAgXSxcbiAgICAgIG9wdHNcbiAgICApO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMveHJhbmdlLnRzXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZTQocmVzdWx0KSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBmb3IgKGNvbnN0IGUgb2YgcmVzdWx0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjb25zdCBzdHJlYW1JZCA9IGVbaV07XG4gICAgICBjb25zdCBlbnRyaWVzID0gZVtpICsgMV07XG4gICAgICBpZiAoIShzdHJlYW1JZCBpbiBvYmopKSB7XG4gICAgICAgIG9ialtzdHJlYW1JZF0gPSB7fTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZW50cmllcy5sZW5ndGg7IGogKz0gMikge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGVudHJpZXNbal07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZW50cmllc1tqICsgMV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb2JqW3N0cmVhbUlkXVtmaWVsZF0gPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgb2JqW3N0cmVhbUlkXVtmaWVsZF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxudmFyIFhSYW5nZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBzdGFydCwgZW5kLCBjb3VudF0sIG9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wiWFJBTkdFXCIsIGtleSwgc3RhcnQsIGVuZF07XG4gICAgaWYgKHR5cGVvZiBjb3VudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29tbWFuZC5wdXNoKFwiQ09VTlRcIiwgY291bnQpO1xuICAgIH1cbiAgICBzdXBlcihjb21tYW5kLCB7XG4gICAgICBkZXNlcmlhbGl6ZTogKHJlc3VsdCkgPT4gZGVzZXJpYWxpemU0KHJlc3VsdCksXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy94cmVhZC50c1xudmFyIFVOQkFMQU5DRURfWFJFQURfRVJSID0gXCJFUlIgVW5iYWxhbmNlZCBYUkVBRCBsaXN0IG9mIHN0cmVhbXM6IGZvciBlYWNoIHN0cmVhbSBrZXkgYW4gSUQgb3IgJyQnIG11c3QgYmUgc3BlY2lmaWVkXCI7XG52YXIgWFJlYWRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgaWQsIG9wdGlvbnNdLCBvcHRzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSAmJiBBcnJheS5pc0FycmF5KGlkKSAmJiBrZXkubGVuZ3RoICE9PSBpZC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihVTkJBTEFOQ0VEX1hSRUFEX0VSUik7XG4gICAgfVxuICAgIGNvbnN0IGNvbW1hbmRzID0gW107XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zPy5jb3VudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29tbWFuZHMucHVzaChcIkNPVU5UXCIsIG9wdGlvbnMuY291bnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnM/LmJsb2NrTVMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goXCJCTE9DS1wiLCBvcHRpb25zLmJsb2NrTVMpO1xuICAgIH1cbiAgICBjb21tYW5kcy5wdXNoKFxuICAgICAgXCJTVFJFQU1TXCIsXG4gICAgICAuLi5BcnJheS5pc0FycmF5KGtleSkgPyBbLi4ua2V5XSA6IFtrZXldLFxuICAgICAgLi4uQXJyYXkuaXNBcnJheShpZCkgPyBbLi4uaWRdIDogW2lkXVxuICAgICk7XG4gICAgc3VwZXIoW1wiWFJFQURcIiwgLi4uY29tbWFuZHNdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3hyZWFkZ3JvdXAudHNcbnZhciBVTkJBTEFOQ0VEX1hSRUFER1JPVVBfRVJSID0gXCJFUlIgVW5iYWxhbmNlZCBYUkVBREdST1VQIGxpc3Qgb2Ygc3RyZWFtczogZm9yIGVhY2ggc3RyZWFtIGtleSBhbiBJRCBvciAnJCcgbXVzdCBiZSBzcGVjaWZpZWRcIjtcbnZhciBYUmVhZEdyb3VwQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtncm91cCwgY29uc3VtZXIsIGtleSwgaWQsIG9wdGlvbnNdLCBvcHRzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSAmJiBBcnJheS5pc0FycmF5KGlkKSAmJiBrZXkubGVuZ3RoICE9PSBpZC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihVTkJBTEFOQ0VEX1hSRUFER1JPVVBfRVJSKTtcbiAgICB9XG4gICAgY29uc3QgY29tbWFuZHMgPSBbXTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnM/LmNvdW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjb21tYW5kcy5wdXNoKFwiQ09VTlRcIiwgb3B0aW9ucy5jb3VudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8uYmxvY2tNUyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29tbWFuZHMucHVzaChcIkJMT0NLXCIsIG9wdGlvbnMuYmxvY2tNUyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8uTk9BQ0sgPT09IFwiYm9vbGVhblwiICYmIG9wdGlvbnMuTk9BQ0spIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goXCJOT0FDS1wiKTtcbiAgICB9XG4gICAgY29tbWFuZHMucHVzaChcbiAgICAgIFwiU1RSRUFNU1wiLFxuICAgICAgLi4uQXJyYXkuaXNBcnJheShrZXkpID8gWy4uLmtleV0gOiBba2V5XSxcbiAgICAgIC4uLkFycmF5LmlzQXJyYXkoaWQpID8gWy4uLmlkXSA6IFtpZF1cbiAgICApO1xuICAgIHN1cGVyKFtcIlhSRUFER1JPVVBcIiwgXCJHUk9VUFwiLCBncm91cCwgY29uc3VtZXIsIC4uLmNvbW1hbmRzXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy94cmV2cmFuZ2UudHNcbnZhciBYUmV2UmFuZ2VDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgZW5kLCBzdGFydCwgY291bnRdLCBvcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcIlhSRVZSQU5HRVwiLCBrZXksIGVuZCwgc3RhcnRdO1xuICAgIGlmICh0eXBlb2YgY291bnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcIkNPVU5UXCIsIGNvdW50KTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwge1xuICAgICAgZGVzZXJpYWxpemU6IChyZXN1bHQpID0+IGRlc2VyaWFsaXplNShyZXN1bHQpLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gZGVzZXJpYWxpemU1KHJlc3VsdCkge1xuICBjb25zdCBvYmogPSB7fTtcbiAgZm9yIChjb25zdCBlIG9mIHJlc3VsdCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgY29uc3Qgc3RyZWFtSWQgPSBlW2ldO1xuICAgICAgY29uc3QgZW50cmllcyA9IGVbaSArIDFdO1xuICAgICAgaWYgKCEoc3RyZWFtSWQgaW4gb2JqKSkge1xuICAgICAgICBvYmpbc3RyZWFtSWRdID0ge307XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVudHJpZXMubGVuZ3RoOyBqICs9IDIpIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBlbnRyaWVzW2pdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGVudHJpZXNbaiArIDFdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9ialtzdHJlYW1JZF1bZmllbGRdID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIG9ialtzdHJlYW1JZF1bZmllbGRdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLy8gcGtnL2NvbW1hbmRzL3h0cmltLnRzXG52YXIgWFRyaW1Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgb3B0aW9uc10sIG9wdHMpIHtcbiAgICBjb25zdCB7IGxpbWl0LCBzdHJhdGVneSwgdGhyZXNob2xkLCBleGFjdG5lc3MgPSBcIn5cIiB9ID0gb3B0aW9ucztcbiAgICBzdXBlcihbXCJYVFJJTVwiLCBrZXksIHN0cmF0ZWd5LCBleGFjdG5lc3MsIHRocmVzaG9sZCwgLi4ubGltaXQgPyBbXCJMSU1JVFwiLCBsaW1pdF0gOiBbXV0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvemFkZC50c1xudmFyIFpBZGRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgYXJnMSwgLi4uYXJnMl0sIG9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wiemFkZFwiLCBrZXldO1xuICAgIGlmIChcIm54XCIgaW4gYXJnMSAmJiBhcmcxLm54KSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJueFwiKTtcbiAgICB9IGVsc2UgaWYgKFwieHhcIiBpbiBhcmcxICYmIGFyZzEueHgpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcInh4XCIpO1xuICAgIH1cbiAgICBpZiAoXCJjaFwiIGluIGFyZzEgJiYgYXJnMS5jaCkge1xuICAgICAgY29tbWFuZC5wdXNoKFwiY2hcIik7XG4gICAgfVxuICAgIGlmIChcImluY3JcIiBpbiBhcmcxICYmIGFyZzEuaW5jcikge1xuICAgICAgY29tbWFuZC5wdXNoKFwiaW5jclwiKTtcbiAgICB9XG4gICAgaWYgKFwibHRcIiBpbiBhcmcxICYmIGFyZzEubHQpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcImx0XCIpO1xuICAgIH0gZWxzZSBpZiAoXCJndFwiIGluIGFyZzEgJiYgYXJnMS5ndCkge1xuICAgICAgY29tbWFuZC5wdXNoKFwiZ3RcIik7XG4gICAgfVxuICAgIGlmIChcInNjb3JlXCIgaW4gYXJnMSAmJiBcIm1lbWJlclwiIGluIGFyZzEpIHtcbiAgICAgIGNvbW1hbmQucHVzaChhcmcxLnNjb3JlLCBhcmcxLm1lbWJlcik7XG4gICAgfVxuICAgIGNvbW1hbmQucHVzaCguLi5hcmcyLmZsYXRNYXAoKHsgc2NvcmUsIG1lbWJlciB9KSA9PiBbc2NvcmUsIG1lbWJlcl0pKTtcbiAgICBzdXBlcihjb21tYW5kLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3pjYXJkLnRzXG52YXIgWkNhcmRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiemNhcmRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy96Y291bnQudHNcbnZhciBaQ291bnRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiemNvdW50XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvemluY3JieS50c1xudmFyIFpJbmNyQnlDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgc3VwZXIoW1wiemluY3JieVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3ppbnRlcnN0b3JlLnRzXG52YXIgWkludGVyU3RvcmVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2Rlc3RpbmF0aW9uLCBudW1LZXlzLCBrZXlPcktleXMsIG9wdHNdLCBjbWRPcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcInppbnRlcnN0b3JlXCIsIGRlc3RpbmF0aW9uLCBudW1LZXlzXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlPcktleXMpKSB7XG4gICAgICBjb21tYW5kLnB1c2goLi4ua2V5T3JLZXlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tbWFuZC5wdXNoKGtleU9yS2V5cyk7XG4gICAgfVxuICAgIGlmIChvcHRzKSB7XG4gICAgICBpZiAoXCJ3ZWlnaHRzXCIgaW4gb3B0cyAmJiBvcHRzLndlaWdodHMpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwid2VpZ2h0c1wiLCAuLi5vcHRzLndlaWdodHMpO1xuICAgICAgfSBlbHNlIGlmIChcIndlaWdodFwiIGluIG9wdHMgJiYgdHlwZW9mIG9wdHMud2VpZ2h0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcIndlaWdodHNcIiwgb3B0cy53ZWlnaHQpO1xuICAgICAgfVxuICAgICAgaWYgKFwiYWdncmVnYXRlXCIgaW4gb3B0cykge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJhZ2dyZWdhdGVcIiwgb3B0cy5hZ2dyZWdhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdXBlcihjb21tYW5kLCBjbWRPcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3psZXhjb3VudC50c1xudmFyIFpMZXhDb3VudENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJ6bGV4Y291bnRcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy96cG9wbWF4LnRzXG52YXIgWlBvcE1heENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBjb3VudF0sIG9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wienBvcG1heFwiLCBrZXldO1xuICAgIGlmICh0eXBlb2YgY291bnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbW1hbmQucHVzaChjb3VudCk7XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvenBvcG1pbi50c1xudmFyIFpQb3BNaW5Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoW2tleSwgY291bnRdLCBvcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcInpwb3BtaW5cIiwga2V5XTtcbiAgICBpZiAodHlwZW9mIGNvdW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjb21tYW5kLnB1c2goY291bnQpO1xuICAgIH1cbiAgICBzdXBlcihjb21tYW5kLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3pyYW5nZS50c1xudmFyIFpSYW5nZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBtaW4sIG1heCwgb3B0c10sIGNtZE9wdHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0gW1wienJhbmdlXCIsIGtleSwgbWluLCBtYXhdO1xuICAgIGlmIChvcHRzPy5ieVNjb3JlKSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJieXNjb3JlXCIpO1xuICAgIH1cbiAgICBpZiAob3B0cz8uYnlMZXgpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcImJ5bGV4XCIpO1xuICAgIH1cbiAgICBpZiAob3B0cz8ucmV2KSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJyZXZcIik7XG4gICAgfVxuICAgIGlmIChvcHRzPy5jb3VudCAhPT0gdm9pZCAwICYmIG9wdHMub2Zmc2V0ICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbW1hbmQucHVzaChcImxpbWl0XCIsIG9wdHMub2Zmc2V0LCBvcHRzLmNvdW50KTtcbiAgICB9XG4gICAgaWYgKG9wdHM/LndpdGhTY29yZXMpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcIndpdGhzY29yZXNcIik7XG4gICAgfVxuICAgIHN1cGVyKGNvbW1hbmQsIGNtZE9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvenJhbmsudHNcbnZhciBaUmFua0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJ6cmFua1wiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3pyZW0udHNcbnZhciBaUmVtQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInpyZW1cIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy96cmVtcmFuZ2VieWxleC50c1xudmFyIFpSZW1SYW5nZUJ5TGV4Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInpyZW1yYW5nZWJ5bGV4XCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvenJlbXJhbmdlYnlyYW5rLnRzXG52YXIgWlJlbVJhbmdlQnlSYW5rQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInpyZW1yYW5nZWJ5cmFua1wiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3pyZW1yYW5nZWJ5c2NvcmUudHNcbnZhciBaUmVtUmFuZ2VCeVNjb3JlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInpyZW1yYW5nZWJ5c2NvcmVcIiwgLi4uY21kXSwgb3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy96cmV2cmFuay50c1xudmFyIFpSZXZSYW5rQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInpyZXZyYW5rXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvenNjYW4udHNcbnZhciBaU2NhbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3Rvcihba2V5LCBjdXJzb3IsIG9wdHNdLCBjbWRPcHRzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IFtcInpzY2FuXCIsIGtleSwgY3Vyc29yXTtcbiAgICBpZiAob3B0cz8ubWF0Y2gpIHtcbiAgICAgIGNvbW1hbmQucHVzaChcIm1hdGNoXCIsIG9wdHMubWF0Y2gpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdHM/LmNvdW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjb21tYW5kLnB1c2goXCJjb3VudFwiLCBvcHRzLmNvdW50KTtcbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwge1xuICAgICAgZGVzZXJpYWxpemU6IGRlc2VyaWFsaXplU2NhblJlc3BvbnNlLFxuICAgICAgLi4uY21kT3B0c1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvenNjb3JlLnRzXG52YXIgWlNjb3JlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIHN1cGVyKFtcInpzY29yZVwiLCAuLi5jbWRdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3p1bmlvbi50c1xudmFyIFpVbmlvbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihbbnVtS2V5cywga2V5T3JLZXlzLCBvcHRzXSwgY21kT3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJ6dW5pb25cIiwgbnVtS2V5c107XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5T3JLZXlzKSkge1xuICAgICAgY29tbWFuZC5wdXNoKC4uLmtleU9yS2V5cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1hbmQucHVzaChrZXlPcktleXMpO1xuICAgIH1cbiAgICBpZiAob3B0cykge1xuICAgICAgaWYgKFwid2VpZ2h0c1wiIGluIG9wdHMgJiYgb3B0cy53ZWlnaHRzKSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcIndlaWdodHNcIiwgLi4ub3B0cy53ZWlnaHRzKTtcbiAgICAgIH0gZWxzZSBpZiAoXCJ3ZWlnaHRcIiBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLndlaWdodCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJ3ZWlnaHRzXCIsIG9wdHMud2VpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGlmIChcImFnZ3JlZ2F0ZVwiIGluIG9wdHMpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwiYWdncmVnYXRlXCIsIG9wdHMuYWdncmVnYXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLndpdGhTY29yZXMpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwid2l0aHNjb3Jlc1wiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgY21kT3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy96dW5pb25zdG9yZS50c1xudmFyIFpVbmlvblN0b3JlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKFtkZXN0aW5hdGlvbiwgbnVtS2V5cywga2V5T3JLZXlzLCBvcHRzXSwgY21kT3B0cykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBbXCJ6dW5pb25zdG9yZVwiLCBkZXN0aW5hdGlvbiwgbnVtS2V5c107XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5T3JLZXlzKSkge1xuICAgICAgY29tbWFuZC5wdXNoKC4uLmtleU9yS2V5cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1hbmQucHVzaChrZXlPcktleXMpO1xuICAgIH1cbiAgICBpZiAob3B0cykge1xuICAgICAgaWYgKFwid2VpZ2h0c1wiIGluIG9wdHMgJiYgb3B0cy53ZWlnaHRzKSB7XG4gICAgICAgIGNvbW1hbmQucHVzaChcIndlaWdodHNcIiwgLi4ub3B0cy53ZWlnaHRzKTtcbiAgICAgIH0gZWxzZSBpZiAoXCJ3ZWlnaHRcIiBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLndlaWdodCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBjb21tYW5kLnB1c2goXCJ3ZWlnaHRzXCIsIG9wdHMud2VpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGlmIChcImFnZ3JlZ2F0ZVwiIGluIG9wdHMpIHtcbiAgICAgICAgY29tbWFuZC5wdXNoKFwiYWdncmVnYXRlXCIsIG9wdHMuYWdncmVnYXRlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIoY29tbWFuZCwgY21kT3B0cyk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy96ZGlmZnN0b3JlLnRzXG52YXIgWkRpZmZTdG9yZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWQsIG9wdHMpIHtcbiAgICBzdXBlcihbXCJ6ZGlmZnN0b3JlXCIsIC4uLmNtZF0sIG9wdHMpO1xuICB9XG59O1xuXG4vLyBwa2cvY29tbWFuZHMvem1zY29yZS50c1xudmFyIFpNU2NvcmVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3QgW2tleSwgbWVtYmVyc10gPSBjbWQ7XG4gICAgc3VwZXIoW1wiem1zY29yZVwiLCBrZXksIC4uLm1lbWJlcnNdLCBvcHRzKTtcbiAgfVxufTtcblxuLy8gcGtnL3BpcGVsaW5lLnRzXG52YXIgUGlwZWxpbmUgPSBjbGFzcyB7XG4gIGNsaWVudDtcbiAgY29tbWFuZHM7XG4gIGNvbW1hbmRPcHRpb25zO1xuICBtdWx0aUV4ZWM7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICB0aGlzLmNsaWVudCA9IG9wdHMuY2xpZW50O1xuICAgIHRoaXMuY29tbWFuZHMgPSBbXTtcbiAgICB0aGlzLmNvbW1hbmRPcHRpb25zID0gb3B0cy5jb21tYW5kT3B0aW9ucztcbiAgICB0aGlzLm11bHRpRXhlYyA9IG9wdHMubXVsdGlFeGVjID8/IGZhbHNlO1xuICAgIGlmICh0aGlzLmNvbW1hbmRPcHRpb25zPy5sYXRlbmN5TG9nZ2luZykge1xuICAgICAgY29uc3Qgb3JpZ2luYWxFeGVjID0gdGhpcy5leGVjLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmV4ZWMgPSBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAob3B0aW9ucyA/IG9yaWdpbmFsRXhlYyhvcHRpb25zKSA6IG9yaWdpbmFsRXhlYygpKTtcbiAgICAgICAgY29uc3QgZW5kID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGNvbnN0IGxvZ2dlclJlc3VsdCA9IChlbmQgLSBzdGFydCkudG9GaXhlZCgyKTtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYExhdGVuY3kgZm9yIFxceDFCWzM4OzI7MTk7MTg1OzM5bSR7dGhpcy5tdWx0aUV4ZWMgPyBbXCJNVUxUSS1FWEVDXCJdIDogW1wiUElQRUxJTkVcIl0udG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpfVxceDFCWzBtOiBcXHgxQlszODsyOzA7MjU1OzI1NW0ke2xvZ2dlclJlc3VsdH0gbXNcXHgxQlswbWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGV4ZWMgPSBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgIGlmICh0aGlzLmNvbW1hbmRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGlwZWxpbmUgaXMgZW1wdHlcIik7XG4gICAgfVxuICAgIGNvbnN0IHBhdGggPSB0aGlzLm11bHRpRXhlYyA/IFtcIm11bHRpLWV4ZWNcIl0gOiBbXCJwaXBlbGluZVwiXTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5yZXF1ZXN0KHtcbiAgICAgIHBhdGgsXG4gICAgICBib2R5OiBPYmplY3QudmFsdWVzKHRoaXMuY29tbWFuZHMpLm1hcCgoYykgPT4gYy5jb21tYW5kKVxuICAgIH0pO1xuICAgIHJldHVybiBvcHRpb25zPy5rZWVwRXJyb3JzID8gcmVzLm1hcCgoeyBlcnJvciwgcmVzdWx0IH0sIGkpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yLFxuICAgICAgICByZXN1bHQ6IHRoaXMuY29tbWFuZHNbaV0uZGVzZXJpYWxpemUocmVzdWx0KVxuICAgICAgfTtcbiAgICB9KSA6IHJlcy5tYXAoKHsgZXJyb3IsIHJlc3VsdCB9LCBpKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVwc3Rhc2hFcnJvcihcbiAgICAgICAgICBgQ29tbWFuZCAke2kgKyAxfSBbICR7dGhpcy5jb21tYW5kc1tpXS5jb21tYW5kWzBdfSBdIGZhaWxlZDogJHtlcnJvcn1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jb21tYW5kc1tpXS5kZXNlcmlhbGl6ZShyZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHBpcGVsaW5lIGJlZm9yZSB0aGUgZXhlY3V0aW9uXG4gICAqL1xuICBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tbWFuZHMubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBQdXNoZXMgYSBjb21tYW5kIGludG8gdGhlIHBpcGVsaW5lIGFuZCByZXR1cm5zIGEgY2hhaW5hYmxlIGluc3RhbmNlIG9mIHRoZVxuICAgKiBwaXBlbGluZVxuICAgKi9cbiAgY2hhaW4oY29tbWFuZCkge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaChjb21tYW5kKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2FwcGVuZFxuICAgKi9cbiAgYXBwZW5kID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEFwcGVuZENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2JpdGNvdW50XG4gICAqL1xuICBiaXRjb3VudCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBCaXRDb3VudENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogUmV0dXJucyBhbiBpbnN0YW5jZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGV4ZWN1dGUgYEJJVEZJRUxEYCBjb21tYW5kcyBvbiBvbmUga2V5LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIHJlZGlzLnNldChcIm15a2V5XCIsIDApO1xuICAgKiBjb25zdCByZXN1bHQgPSBhd2FpdCByZWRpcy5waXBlbGluZSgpXG4gICAqICAgLmJpdGZpZWxkKFwibXlrZXlcIilcbiAgICogICAuc2V0KFwidTRcIiwgMCwgMTYpXG4gICAqICAgLmluY3IoXCJ1NFwiLCBcIiMxXCIsIDEpXG4gICAqICAgLmV4ZWMoKTtcbiAgICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gW1swLCAxXV1cbiAgICogYGBgXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9iaXRmaWVsZFxuICAgKi9cbiAgYml0ZmllbGQgPSAoLi4uYXJncykgPT4gbmV3IEJpdEZpZWxkQ29tbWFuZChhcmdzLCB0aGlzLmNsaWVudCwgdGhpcy5jb21tYW5kT3B0aW9ucywgdGhpcy5jaGFpbi5iaW5kKHRoaXMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9iaXRvcFxuICAgKi9cbiAgYml0b3AgPSAob3AsIGRlc3RpbmF0aW9uS2V5LCBzb3VyY2VLZXksIC4uLnNvdXJjZUtleXMpID0+IHRoaXMuY2hhaW4oXG4gICAgbmV3IEJpdE9wQ29tbWFuZChbb3AsIGRlc3RpbmF0aW9uS2V5LCBzb3VyY2VLZXksIC4uLnNvdXJjZUtleXNdLCB0aGlzLmNvbW1hbmRPcHRpb25zKVxuICApO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2JpdHBvc1xuICAgKi9cbiAgYml0cG9zID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEJpdFBvc0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2NvcHlcbiAgICovXG4gIGNvcHkgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgQ29weUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pkaWZmc3RvcmVcbiAgICovXG4gIHpkaWZmc3RvcmUgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWkRpZmZTdG9yZUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2Ric2l6ZVxuICAgKi9cbiAgZGJzaXplID0gKCkgPT4gdGhpcy5jaGFpbihuZXcgREJTaXplQ29tbWFuZCh0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZGVjclxuICAgKi9cbiAgZGVjciA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBEZWNyQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZGVjcmJ5XG4gICAqL1xuICBkZWNyYnkgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgRGVjckJ5Q29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZGVsXG4gICAqL1xuICBkZWwgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgRGVsQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZWNob1xuICAgKi9cbiAgZWNobyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBFY2hvQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZXZhbF9yb1xuICAgKi9cbiAgZXZhbFJvID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEV2YWxST0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2V2YWxcbiAgICovXG4gIGV2YWwgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgRXZhbENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2V2YWxzaGFfcm9cbiAgICovXG4gIGV2YWxzaGFSbyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBFdmFsc2hhUk9Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9ldmFsc2hhXG4gICAqL1xuICBldmFsc2hhID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEV2YWxzaGFDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9leGlzdHNcbiAgICovXG4gIGV4aXN0cyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBFeGlzdHNDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9leHBpcmVcbiAgICovXG4gIGV4cGlyZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBFeHBpcmVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9leHBpcmVhdFxuICAgKi9cbiAgZXhwaXJlYXQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgRXhwaXJlQXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9mbHVzaGFsbFxuICAgKi9cbiAgZmx1c2hhbGwgPSAoYXJncykgPT4gdGhpcy5jaGFpbihuZXcgRmx1c2hBbGxDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9mbHVzaGRiXG4gICAqL1xuICBmbHVzaGRiID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEZsdXNoREJDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9hZGRcbiAgICovXG4gIGdlb2FkZCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBHZW9BZGRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9kaXN0XG4gICAqL1xuICBnZW9kaXN0ID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEdlb0Rpc3RDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9wb3NcbiAgICovXG4gIGdlb3BvcyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBHZW9Qb3NDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9oYXNoXG4gICAqL1xuICBnZW9oYXNoID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEdlb0hhc2hDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9zZWFyY2hcbiAgICovXG4gIGdlb3NlYXJjaCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBHZW9TZWFyY2hDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9zZWFyY2hzdG9yZVxuICAgKi9cbiAgZ2Vvc2VhcmNoc3RvcmUgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgR2VvU2VhcmNoU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRcbiAgICovXG4gIGdldCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBHZXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRiaXRcbiAgICovXG4gIGdldGJpdCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBHZXRCaXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRkZWxcbiAgICovXG4gIGdldGRlbCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBHZXREZWxDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRleFxuICAgKi9cbiAgZ2V0ZXggPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgR2V0RXhDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRyYW5nZVxuICAgKi9cbiAgZ2V0cmFuZ2UgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgR2V0UmFuZ2VDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRzZXRcbiAgICovXG4gIGdldHNldCA9IChrZXksIHZhbHVlKSA9PiB0aGlzLmNoYWluKG5ldyBHZXRTZXRDb21tYW5kKFtrZXksIHZhbHVlXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hkZWxcbiAgICovXG4gIGhkZWwgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSERlbENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hleGlzdHNcbiAgICovXG4gIGhleGlzdHMgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSEV4aXN0c0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hleHBpcmVcbiAgICovXG4gIGhleHBpcmUgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSEV4cGlyZUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hleHBpcmVhdFxuICAgKi9cbiAgaGV4cGlyZWF0ID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEhFeHBpcmVBdENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hleHBpcmV0aW1lXG4gICAqL1xuICBoZXhwaXJldGltZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBIRXhwaXJlVGltZUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2h0dGxcbiAgICovXG4gIGh0dGwgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSFR0bENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hwZXhwaXJlXG4gICAqL1xuICBocGV4cGlyZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBIUEV4cGlyZUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hwZXhwaXJlYXRcbiAgICovXG4gIGhwZXhwaXJlYXQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSFBFeHBpcmVBdENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hwZXhwaXJldGltZVxuICAgKi9cbiAgaHBleHBpcmV0aW1lID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEhQRXhwaXJlVGltZUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hwdHRsXG4gICAqL1xuICBocHR0bCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBIUFR0bENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hwZXJzaXN0XG4gICAqL1xuICBocGVyc2lzdCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBIUGVyc2lzdENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hnZXRcbiAgICovXG4gIGhnZXQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSEdldENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hnZXRhbGxcbiAgICovXG4gIGhnZXRhbGwgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSEdldEFsbENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hpbmNyYnlcbiAgICovXG4gIGhpbmNyYnkgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSEluY3JCeUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hpbmNyYnlmbG9hdFxuICAgKi9cbiAgaGluY3JieWZsb2F0ID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEhJbmNyQnlGbG9hdENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hrZXlzXG4gICAqL1xuICBoa2V5cyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBIS2V5c0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hsZW5cbiAgICovXG4gIGhsZW4gPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSExlbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2htZ2V0XG4gICAqL1xuICBobWdldCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBITUdldENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2htc2V0XG4gICAqL1xuICBobXNldCA9IChrZXksIGt2KSA9PiB0aGlzLmNoYWluKG5ldyBITVNldENvbW1hbmQoW2tleSwga3ZdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaHJhbmRmaWVsZFxuICAgKi9cbiAgaHJhbmRmaWVsZCA9IChrZXksIGNvdW50LCB3aXRoVmFsdWVzKSA9PiB0aGlzLmNoYWluKG5ldyBIUmFuZEZpZWxkQ29tbWFuZChba2V5LCBjb3VudCwgd2l0aFZhbHVlc10sIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9oc2NhblxuICAgKi9cbiAgaHNjYW4gPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSFNjYW5Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9oc2V0XG4gICAqL1xuICBoc2V0ID0gKGtleSwga3YpID0+IHRoaXMuY2hhaW4obmV3IEhTZXRDb21tYW5kKFtrZXksIGt2XSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hzZXRueFxuICAgKi9cbiAgaHNldG54ID0gKGtleSwgZmllbGQsIHZhbHVlKSA9PiB0aGlzLmNoYWluKG5ldyBIU2V0TlhDb21tYW5kKFtrZXksIGZpZWxkLCB2YWx1ZV0sIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9oc3RybGVuXG4gICAqL1xuICBoc3RybGVuID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEhTdHJMZW5Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9odmFsc1xuICAgKi9cbiAgaHZhbHMgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSFZhbHNDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9pbmNyXG4gICAqL1xuICBpbmNyID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEluY3JDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9pbmNyYnlcbiAgICovXG4gIGluY3JieSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBJbmNyQnlDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9pbmNyYnlmbG9hdFxuICAgKi9cbiAgaW5jcmJ5ZmxvYXQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSW5jckJ5RmxvYXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9rZXlzXG4gICAqL1xuICBrZXlzID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEtleXNDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9saW5kZXhcbiAgICovXG4gIGxpbmRleCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBMSW5kZXhDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9saW5zZXJ0XG4gICAqL1xuICBsaW5zZXJ0ID0gKGtleSwgZGlyZWN0aW9uLCBwaXZvdCwgdmFsdWUpID0+IHRoaXMuY2hhaW4obmV3IExJbnNlcnRDb21tYW5kKFtrZXksIGRpcmVjdGlvbiwgcGl2b3QsIHZhbHVlXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xsZW5cbiAgICovXG4gIGxsZW4gPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgTExlbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xtb3ZlXG4gICAqL1xuICBsbW92ZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBMTW92ZUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xwb3BcbiAgICovXG4gIGxwb3AgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgTFBvcENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xtcG9wXG4gICAqL1xuICBsbXBvcCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBMbVBvcENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xwb3NcbiAgICovXG4gIGxwb3MgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgTFBvc0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xwdXNoXG4gICAqL1xuICBscHVzaCA9IChrZXksIC4uLmVsZW1lbnRzKSA9PiB0aGlzLmNoYWluKG5ldyBMUHVzaENvbW1hbmQoW2tleSwgLi4uZWxlbWVudHNdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbHB1c2h4XG4gICAqL1xuICBscHVzaHggPSAoa2V5LCAuLi5lbGVtZW50cykgPT4gdGhpcy5jaGFpbihuZXcgTFB1c2hYQ29tbWFuZChba2V5LCAuLi5lbGVtZW50c10sIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9scmFuZ2VcbiAgICovXG4gIGxyYW5nZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBMUmFuZ2VDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9scmVtXG4gICAqL1xuICBscmVtID0gKGtleSwgY291bnQsIHZhbHVlKSA9PiB0aGlzLmNoYWluKG5ldyBMUmVtQ29tbWFuZChba2V5LCBjb3VudCwgdmFsdWVdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbHNldFxuICAgKi9cbiAgbHNldCA9IChrZXksIGluZGV4LCB2YWx1ZSkgPT4gdGhpcy5jaGFpbihuZXcgTFNldENvbW1hbmQoW2tleSwgaW5kZXgsIHZhbHVlXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2x0cmltXG4gICAqL1xuICBsdHJpbSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBMVHJpbUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL21nZXRcbiAgICovXG4gIG1nZXQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgTUdldENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL21zZXRcbiAgICovXG4gIG1zZXQgPSAoa3YpID0+IHRoaXMuY2hhaW4obmV3IE1TZXRDb21tYW5kKFtrdl0sIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9tc2V0bnhcbiAgICovXG4gIG1zZXRueCA9IChrdikgPT4gdGhpcy5jaGFpbihuZXcgTVNldE5YQ29tbWFuZChba3ZdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGVyc2lzdFxuICAgKi9cbiAgcGVyc2lzdCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBQZXJzaXN0Q29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGV4cGlyZVxuICAgKi9cbiAgcGV4cGlyZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBQRXhwaXJlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGV4cGlyZWF0XG4gICAqL1xuICBwZXhwaXJlYXQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgUEV4cGlyZUF0Q29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGZhZGRcbiAgICovXG4gIHBmYWRkID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFBmQWRkQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGZjb3VudFxuICAgKi9cbiAgcGZjb3VudCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBQZkNvdW50Q29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGZtZXJnZVxuICAgKi9cbiAgcGZtZXJnZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBQZk1lcmdlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGluZ1xuICAgKi9cbiAgcGluZyA9IChhcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBQaW5nQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcHNldGV4XG4gICAqL1xuICBwc2V0ZXggPSAoa2V5LCB0dGwsIHZhbHVlKSA9PiB0aGlzLmNoYWluKG5ldyBQU2V0RVhDb21tYW5kKFtrZXksIHR0bCwgdmFsdWVdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcHR0bFxuICAgKi9cbiAgcHR0bCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBQVHRsQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcHVibGlzaFxuICAgKi9cbiAgcHVibGlzaCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBQdWJsaXNoQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcmFuZG9ta2V5XG4gICAqL1xuICByYW5kb21rZXkgPSAoKSA9PiB0aGlzLmNoYWluKG5ldyBSYW5kb21LZXlDb21tYW5kKHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9yZW5hbWVcbiAgICovXG4gIHJlbmFtZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBSZW5hbWVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9yZW5hbWVueFxuICAgKi9cbiAgcmVuYW1lbnggPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgUmVuYW1lTlhDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9ycG9wXG4gICAqL1xuICBycG9wID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFJQb3BDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9ycHVzaFxuICAgKi9cbiAgcnB1c2ggPSAoa2V5LCAuLi5lbGVtZW50cykgPT4gdGhpcy5jaGFpbihuZXcgUlB1c2hDb21tYW5kKFtrZXksIC4uLmVsZW1lbnRzXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3JwdXNoeFxuICAgKi9cbiAgcnB1c2h4ID0gKGtleSwgLi4uZWxlbWVudHMpID0+IHRoaXMuY2hhaW4obmV3IFJQdXNoWENvbW1hbmQoW2tleSwgLi4uZWxlbWVudHNdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2FkZFxuICAgKi9cbiAgc2FkZCA9IChrZXksIG1lbWJlciwgLi4ubWVtYmVycykgPT4gdGhpcy5jaGFpbihuZXcgU0FkZENvbW1hbmQoW2tleSwgbWVtYmVyLCAuLi5tZW1iZXJzXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NjYW5cbiAgICovXG4gIHNjYW4gPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgU2NhbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NjYXJkXG4gICAqL1xuICBzY2FyZCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBTQ2FyZENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NjcmlwdC1leGlzdHNcbiAgICovXG4gIHNjcmlwdEV4aXN0cyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBTY3JpcHRFeGlzdHNDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zY3JpcHQtZmx1c2hcbiAgICovXG4gIHNjcmlwdEZsdXNoID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFNjcmlwdEZsdXNoQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2NyaXB0LWxvYWRcbiAgICovXG4gIHNjcmlwdExvYWQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgU2NyaXB0TG9hZENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKikqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zZGlmZlxuICAgKi9cbiAgc2RpZmYgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgU0RpZmZDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zZGlmZnN0b3JlXG4gICAqL1xuICBzZGlmZnN0b3JlID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFNEaWZmU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zZXRcbiAgICovXG4gIHNldCA9IChrZXksIHZhbHVlLCBvcHRzKSA9PiB0aGlzLmNoYWluKG5ldyBTZXRDb21tYW5kKFtrZXksIHZhbHVlLCBvcHRzXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NldGJpdFxuICAgKi9cbiAgc2V0Yml0ID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFNldEJpdENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NldGV4XG4gICAqL1xuICBzZXRleCA9IChrZXksIHR0bCwgdmFsdWUpID0+IHRoaXMuY2hhaW4obmV3IFNldEV4Q29tbWFuZChba2V5LCB0dGwsIHZhbHVlXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NldG54XG4gICAqL1xuICBzZXRueCA9IChrZXksIHZhbHVlKSA9PiB0aGlzLmNoYWluKG5ldyBTZXROeENvbW1hbmQoW2tleSwgdmFsdWVdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2V0cmFuZ2VcbiAgICovXG4gIHNldHJhbmdlID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFNldFJhbmdlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2ludGVyXG4gICAqL1xuICBzaW50ZXIgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgU0ludGVyQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2ludGVyc3RvcmVcbiAgICovXG4gIHNpbnRlcnN0b3JlID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFNJbnRlclN0b3JlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2lzbWVtYmVyXG4gICAqL1xuICBzaXNtZW1iZXIgPSAoa2V5LCBtZW1iZXIpID0+IHRoaXMuY2hhaW4obmV3IFNJc01lbWJlckNvbW1hbmQoW2tleSwgbWVtYmVyXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NtZW1iZXJzXG4gICAqL1xuICBzbWVtYmVycyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBTTWVtYmVyc0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NtaXNtZW1iZXJcbiAgICovXG4gIHNtaXNtZW1iZXIgPSAoa2V5LCBtZW1iZXJzKSA9PiB0aGlzLmNoYWluKG5ldyBTTUlzTWVtYmVyQ29tbWFuZChba2V5LCBtZW1iZXJzXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3Ntb3ZlXG4gICAqL1xuICBzbW92ZSA9IChzb3VyY2UsIGRlc3RpbmF0aW9uLCBtZW1iZXIpID0+IHRoaXMuY2hhaW4obmV3IFNNb3ZlQ29tbWFuZChbc291cmNlLCBkZXN0aW5hdGlvbiwgbWVtYmVyXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3Nwb3BcbiAgICovXG4gIHNwb3AgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgU1BvcENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NyYW5kbWVtYmVyXG4gICAqL1xuICBzcmFuZG1lbWJlciA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBTUmFuZE1lbWJlckNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NyZW1cbiAgICovXG4gIHNyZW0gPSAoa2V5LCAuLi5tZW1iZXJzKSA9PiB0aGlzLmNoYWluKG5ldyBTUmVtQ29tbWFuZChba2V5LCAuLi5tZW1iZXJzXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NzY2FuXG4gICAqL1xuICBzc2NhbiA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBTU2NhbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3N0cmxlblxuICAgKi9cbiAgc3RybGVuID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFN0ckxlbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3N1bmlvblxuICAgKi9cbiAgc3VuaW9uID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFNVbmlvbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3N1bmlvbnN0b3JlXG4gICAqL1xuICBzdW5pb25zdG9yZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBTVW5pb25TdG9yZUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3RpbWVcbiAgICovXG4gIHRpbWUgPSAoKSA9PiB0aGlzLmNoYWluKG5ldyBUaW1lQ29tbWFuZCh0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvdG91Y2hcbiAgICovXG4gIHRvdWNoID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFRvdWNoQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvdHRsXG4gICAqL1xuICB0dGwgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgVHRsQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvdHlwZVxuICAgKi9cbiAgdHlwZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBUeXBlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvdW5saW5rXG4gICAqL1xuICB1bmxpbmsgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgVW5saW5rQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemFkZFxuICAgKi9cbiAgemFkZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKFwic2NvcmVcIiBpbiBhcmdzWzFdKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGFpbihcbiAgICAgICAgbmV3IFpBZGRDb21tYW5kKFthcmdzWzBdLCBhcmdzWzFdLCAuLi5hcmdzLnNsaWNlKDIpXSwgdGhpcy5jb21tYW5kT3B0aW9ucylcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNoYWluKFxuICAgICAgbmV3IFpBZGRDb21tYW5kKFxuICAgICAgICBbYXJnc1swXSwgYXJnc1sxXSwgLi4uYXJncy5zbGljZSgyKV0sXG4gICAgICAgIHRoaXMuY29tbWFuZE9wdGlvbnNcbiAgICAgIClcbiAgICApO1xuICB9O1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hhZGRcbiAgICovXG4gIHhhZGQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWEFkZENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hhY2tcbiAgICovXG4gIHhhY2sgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWEFja0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hkZWxcbiAgICovXG4gIHhkZWwgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWERlbENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hncm91cFxuICAgKi9cbiAgeGdyb3VwID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFhHcm91cENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hyZWFkXG4gICAqL1xuICB4cmVhZCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBYUmVhZENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hyZWFkZ3JvdXBcbiAgICovXG4gIHhyZWFkZ3JvdXAgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWFJlYWRHcm91cENvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hpbmZvXG4gICAqL1xuICB4aW5mbyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBYSW5mb0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hsZW5cbiAgICovXG4gIHhsZW4gPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWExlbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hwZW5kaW5nXG4gICAqL1xuICB4cGVuZGluZyA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBYUGVuZGluZ0NvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hjbGFpbVxuICAgKi9cbiAgeGNsYWltID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFhDbGFpbUNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hhdXRvY2xhaW1cbiAgICovXG4gIHhhdXRvY2xhaW0gPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWEF1dG9DbGFpbShhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveHRyaW1cbiAgICovXG4gIHh0cmltID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFhUcmltQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveHJhbmdlXG4gICAqL1xuICB4cmFuZ2UgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWFJhbmdlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveHJldnJhbmdlXG4gICAqL1xuICB4cmV2cmFuZ2UgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWFJldlJhbmdlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemNhcmRcbiAgICovXG4gIHpjYXJkID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFpDYXJkQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemNvdW50XG4gICAqL1xuICB6Y291bnQgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWkNvdW50Q29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemluY3JieVxuICAgKi9cbiAgemluY3JieSA9IChrZXksIGluY3JlbWVudCwgbWVtYmVyKSA9PiB0aGlzLmNoYWluKG5ldyBaSW5jckJ5Q29tbWFuZChba2V5LCBpbmNyZW1lbnQsIG1lbWJlcl0sIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96aW50ZXJzdG9yZVxuICAgKi9cbiAgemludGVyc3RvcmUgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWkludGVyU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96bGV4Y291bnRcbiAgICovXG4gIHpsZXhjb3VudCA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBaTGV4Q291bnRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96bXNjb3JlXG4gICAqL1xuICB6bXNjb3JlID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFpNU2NvcmVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96cG9wbWF4XG4gICAqL1xuICB6cG9wbWF4ID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFpQb3BNYXhDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96cG9wbWluXG4gICAqL1xuICB6cG9wbWluID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFpQb3BNaW5Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96cmFuZ2VcbiAgICovXG4gIHpyYW5nZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBaUmFuZ2VDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96cmFua1xuICAgKi9cbiAgenJhbmsgPSAoa2V5LCBtZW1iZXIpID0+IHRoaXMuY2hhaW4obmV3IFpSYW5rQ29tbWFuZChba2V5LCBtZW1iZXJdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenJlbVxuICAgKi9cbiAgenJlbSA9IChrZXksIC4uLm1lbWJlcnMpID0+IHRoaXMuY2hhaW4obmV3IFpSZW1Db21tYW5kKFtrZXksIC4uLm1lbWJlcnNdLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenJlbXJhbmdlYnlsZXhcbiAgICovXG4gIHpyZW1yYW5nZWJ5bGV4ID0gKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IFpSZW1SYW5nZUJ5TGV4Q29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenJlbXJhbmdlYnlyYW5rXG4gICAqL1xuICB6cmVtcmFuZ2VieXJhbmsgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWlJlbVJhbmdlQnlSYW5rQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenJlbXJhbmdlYnlzY29yZVxuICAgKi9cbiAgenJlbXJhbmdlYnlzY29yZSA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBaUmVtUmFuZ2VCeVNjb3JlQ29tbWFuZChhcmdzLCB0aGlzLmNvbW1hbmRPcHRpb25zKSk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenJldnJhbmtcbiAgICovXG4gIHpyZXZyYW5rID0gKGtleSwgbWVtYmVyKSA9PiB0aGlzLmNoYWluKG5ldyBaUmV2UmFua0NvbW1hbmQoW2tleSwgbWVtYmVyXSwgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pzY2FuXG4gICAqL1xuICB6c2NhbiA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBaU2NhbkNvbW1hbmQoYXJncywgdGhpcy5jb21tYW5kT3B0aW9ucykpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pzY29yZVxuICAgKi9cbiAgenNjb3JlID0gKGtleSwgbWVtYmVyKSA9PiB0aGlzLmNoYWluKG5ldyBaU2NvcmVDb21tYW5kKFtrZXksIG1lbWJlcl0sIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96dW5pb25zdG9yZVxuICAgKi9cbiAgenVuaW9uc3RvcmUgPSAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgWlVuaW9uU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96dW5pb25cbiAgICovXG4gIHp1bmlvbiA9ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBaVW5pb25Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy8/Z3JvdXA9anNvblxuICAgKi9cbiAgZ2V0IGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJyYXBwZW5kXG4gICAgICAgKi9cbiAgICAgIGFycmFwcGVuZDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25BcnJBcHBlbmRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJyaW5kZXhcbiAgICAgICAqL1xuICAgICAgYXJyaW5kZXg6ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBKc29uQXJySW5kZXhDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJyaW5zZXJ0XG4gICAgICAgKi9cbiAgICAgIGFycmluc2VydDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25BcnJJbnNlcnRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJybGVuXG4gICAgICAgKi9cbiAgICAgIGFycmxlbjogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25BcnJMZW5Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJycG9wXG4gICAgICAgKi9cbiAgICAgIGFycnBvcDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25BcnJQb3BDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJydHJpbVxuICAgICAgICovXG4gICAgICBhcnJ0cmltOiAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSnNvbkFyclRyaW1Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uY2xlYXJcbiAgICAgICAqL1xuICAgICAgY2xlYXI6ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBKc29uQ2xlYXJDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uZGVsXG4gICAgICAgKi9cbiAgICAgIGRlbDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25EZWxDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uZm9yZ2V0XG4gICAgICAgKi9cbiAgICAgIGZvcmdldDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25Gb3JnZXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uZ2V0XG4gICAgICAgKi9cbiAgICAgIGdldDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25HZXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ubWVyZ2VcbiAgICAgICAqL1xuICAgICAgbWVyZ2U6ICguLi5hcmdzKSA9PiB0aGlzLmNoYWluKG5ldyBKc29uTWVyZ2VDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ubWdldFxuICAgICAgICovXG4gICAgICBtZ2V0OiAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSnNvbk1HZXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ubXNldFxuICAgICAgICovXG4gICAgICBtc2V0OiAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSnNvbk1TZXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ubnVtaW5jcmJ5XG4gICAgICAgKi9cbiAgICAgIG51bWluY3JieTogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25OdW1JbmNyQnlDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ubnVtbXVsdGJ5XG4gICAgICAgKi9cbiAgICAgIG51bW11bHRieTogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25OdW1NdWx0QnlDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ub2Jqa2V5c1xuICAgICAgICovXG4gICAgICBvYmprZXlzOiAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSnNvbk9iaktleXNDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ub2JqbGVuXG4gICAgICAgKi9cbiAgICAgIG9iamxlbjogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25PYmpMZW5Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ucmVzcFxuICAgICAgICovXG4gICAgICByZXNwOiAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSnNvblJlc3BDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uc2V0XG4gICAgICAgKi9cbiAgICAgIHNldDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25TZXRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uc3RyYXBwZW5kXG4gICAgICAgKi9cbiAgICAgIHN0cmFwcGVuZDogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25TdHJBcHBlbmRDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uc3RybGVuXG4gICAgICAgKi9cbiAgICAgIHN0cmxlbjogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25TdHJMZW5Db21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24udG9nZ2xlXG4gICAgICAgKi9cbiAgICAgIHRvZ2dsZTogKC4uLmFyZ3MpID0+IHRoaXMuY2hhaW4obmV3IEpzb25Ub2dnbGVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24udHlwZVxuICAgICAgICovXG4gICAgICB0eXBlOiAoLi4uYXJncykgPT4gdGhpcy5jaGFpbihuZXcgSnNvblR5cGVDb21tYW5kKGFyZ3MsIHRoaXMuY29tbWFuZE9wdGlvbnMpKVxuICAgIH07XG4gIH1cbn07XG5cbi8vIHBrZy9hdXRvLXBpcGVsaW5lLnRzXG52YXIgRVhDTFVERV9DT01NQU5EUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgXCJzY2FuXCIsXG4gIFwia2V5c1wiLFxuICBcImZsdXNoZGJcIixcbiAgXCJmbHVzaGFsbFwiLFxuICBcImRic2l6ZVwiLFxuICBcImhzY2FuXCIsXG4gIFwiaGdldGFsbFwiLFxuICBcImhrZXlzXCIsXG4gIFwibHJhbmdlXCIsXG4gIFwic3NjYW5cIixcbiAgXCJzbWVtYmVyc1wiLFxuICBcInhyYW5nZVwiLFxuICBcInhyZXZyYW5nZVwiLFxuICBcInpzY2FuXCIsXG4gIFwienJhbmdlXCIsXG4gIFwiZXhlY1wiXG5dKTtcbmZ1bmN0aW9uIGNyZWF0ZUF1dG9QaXBlbGluZVByb3h5KF9yZWRpcywganNvbikge1xuICBjb25zdCByZWRpcyA9IF9yZWRpcztcbiAgaWYgKCFyZWRpcy5hdXRvUGlwZWxpbmVFeGVjdXRvcikge1xuICAgIHJlZGlzLmF1dG9QaXBlbGluZUV4ZWN1dG9yID0gbmV3IEF1dG9QaXBlbGluZUV4ZWN1dG9yKHJlZGlzKTtcbiAgfVxuICByZXR1cm4gbmV3IFByb3h5KHJlZGlzLCB7XG4gICAgZ2V0OiAocmVkaXMyLCBjb21tYW5kKSA9PiB7XG4gICAgICBpZiAoY29tbWFuZCA9PT0gXCJwaXBlbGluZUNvdW50ZXJcIikge1xuICAgICAgICByZXR1cm4gcmVkaXMyLmF1dG9QaXBlbGluZUV4ZWN1dG9yLnBpcGVsaW5lQ291bnRlcjtcbiAgICAgIH1cbiAgICAgIGlmIChjb21tYW5kID09PSBcImpzb25cIikge1xuICAgICAgICByZXR1cm4gY3JlYXRlQXV0b1BpcGVsaW5lUHJveHkocmVkaXMyLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbW1hbmRJblJlZGlzQnV0Tm90UGlwZWxpbmUgPSBjb21tYW5kIGluIHJlZGlzMiAmJiAhKGNvbW1hbmQgaW4gcmVkaXMyLmF1dG9QaXBlbGluZUV4ZWN1dG9yLnBpcGVsaW5lKTtcbiAgICAgIGNvbnN0IGlzQ29tbWFuZEV4Y2x1ZGVkID0gRVhDTFVERV9DT01NQU5EUy5oYXMoY29tbWFuZCk7XG4gICAgICBpZiAoY29tbWFuZEluUmVkaXNCdXROb3RQaXBlbGluZSB8fCBpc0NvbW1hbmRFeGNsdWRlZCkge1xuICAgICAgICByZXR1cm4gcmVkaXMyW2NvbW1hbmRdO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNGdW5jdGlvbiA9IGpzb24gPyB0eXBlb2YgcmVkaXMyLmF1dG9QaXBlbGluZUV4ZWN1dG9yLnBpcGVsaW5lLmpzb25bY29tbWFuZF0gPT09IFwiZnVuY3Rpb25cIiA6IHR5cGVvZiByZWRpczIuYXV0b1BpcGVsaW5lRXhlY3V0b3IucGlwZWxpbmVbY29tbWFuZF0gPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIHJldHVybiByZWRpczIuYXV0b1BpcGVsaW5lRXhlY3V0b3Iud2l0aEF1dG9QaXBlbGluZSgocGlwZWxpbmUpID0+IHtcbiAgICAgICAgICAgIGlmIChqc29uKSB7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLmpzb25bY29tbWFuZF0oXG4gICAgICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGlwZWxpbmVbY29tbWFuZF0oLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVkaXMyLmF1dG9QaXBlbGluZUV4ZWN1dG9yLnBpcGVsaW5lW2NvbW1hbmRdO1xuICAgIH1cbiAgfSk7XG59XG52YXIgQXV0b1BpcGVsaW5lRXhlY3V0b3IgPSBjbGFzcyB7XG4gIHBpcGVsaW5lUHJvbWlzZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgYWN0aXZlUGlwZWxpbmUgPSBudWxsO1xuICBpbmRleEluQ3VycmVudFBpcGVsaW5lID0gMDtcbiAgcmVkaXM7XG4gIHBpcGVsaW5lO1xuICAvLyBvbmx5IHRvIG1ha2Ugc3VyZSB0aGF0IHByb3h5IGNhbiB3b3JrXG4gIHBpcGVsaW5lQ291bnRlciA9IDA7XG4gIC8vIHRvIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgdGltZXMgYSBwaXBlbGluZSB3YXMgZXhlY3V0ZWRcbiAgY29uc3RydWN0b3IocmVkaXMpIHtcbiAgICB0aGlzLnJlZGlzID0gcmVkaXM7XG4gICAgdGhpcy5waXBlbGluZSA9IHJlZGlzLnBpcGVsaW5lKCk7XG4gIH1cbiAgYXN5bmMgd2l0aEF1dG9QaXBlbGluZShleGVjdXRlV2l0aFBpcGVsaW5lKSB7XG4gICAgY29uc3QgcGlwZWxpbmUgPSB0aGlzLmFjdGl2ZVBpcGVsaW5lID8/IHRoaXMucmVkaXMucGlwZWxpbmUoKTtcbiAgICBpZiAoIXRoaXMuYWN0aXZlUGlwZWxpbmUpIHtcbiAgICAgIHRoaXMuYWN0aXZlUGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICAgIHRoaXMuaW5kZXhJbkN1cnJlbnRQaXBlbGluZSA9IDA7XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleEluQ3VycmVudFBpcGVsaW5lKys7XG4gICAgZXhlY3V0ZVdpdGhQaXBlbGluZShwaXBlbGluZSk7XG4gICAgY29uc3QgcGlwZWxpbmVEb25lID0gdGhpcy5kZWZlckV4ZWN1dGlvbigpLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLnBpcGVsaW5lUHJvbWlzZXMuaGFzKHBpcGVsaW5lKSkge1xuICAgICAgICBjb25zdCBwaXBlbGluZVByb21pc2UgPSBwaXBlbGluZS5leGVjKHsga2VlcEVycm9yczogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5waXBlbGluZUNvdW50ZXIgKz0gMTtcbiAgICAgICAgdGhpcy5waXBlbGluZVByb21pc2VzLnNldChwaXBlbGluZSwgcGlwZWxpbmVQcm9taXNlKTtcbiAgICAgICAgdGhpcy5hY3RpdmVQaXBlbGluZSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5waXBlbGluZVByb21pc2VzLmdldChwaXBlbGluZSk7XG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHBpcGVsaW5lRG9uZTtcbiAgICBjb25zdCBjb21tYW5kUmVzdWx0ID0gcmVzdWx0c1tpbmRleF07XG4gICAgaWYgKGNvbW1hbmRSZXN1bHQuZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVcHN0YXNoRXJyb3IoYENvbW1hbmQgZmFpbGVkOiAke2NvbW1hbmRSZXN1bHQuZXJyb3J9YCk7XG4gICAgfVxuICAgIHJldHVybiBjb21tYW5kUmVzdWx0LnJlc3VsdDtcbiAgfVxuICBhc3luYyBkZWZlckV4ZWN1dGlvbigpIHtcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxufTtcblxuLy8gcGtnL2NvbW1hbmRzL3BzdWJzY3JpYmUudHNcbnZhciBQU3Vic2NyaWJlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZCwgb3B0cykge1xuICAgIGNvbnN0IHNzZUhlYWRlcnMgPSB7XG4gICAgICBBY2NlcHQ6IFwidGV4dC9ldmVudC1zdHJlYW1cIixcbiAgICAgIFwiQ2FjaGUtQ29udHJvbFwiOiBcIm5vLWNhY2hlXCIsXG4gICAgICBDb25uZWN0aW9uOiBcImtlZXAtYWxpdmVcIlxuICAgIH07XG4gICAgc3VwZXIoW10sIHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBoZWFkZXJzOiBzc2VIZWFkZXJzLFxuICAgICAgcGF0aDogW1wicHN1YnNjcmliZVwiLCAuLi5jbWRdLFxuICAgICAgc3RyZWFtT3B0aW9uczoge1xuICAgICAgICBpc1N0cmVhbWluZzogdHJ1ZSxcbiAgICAgICAgb25NZXNzYWdlOiBvcHRzPy5zdHJlYW1PcHRpb25zPy5vbk1lc3NhZ2UsXG4gICAgICAgIHNpZ25hbDogb3B0cz8uc3RyZWFtT3B0aW9ucz8uc2lnbmFsXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHBrZy9jb21tYW5kcy9zdWJzY3JpYmUudHNcbnZhciBTdWJzY3JpYmVyID0gY2xhc3MgZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIHN1YnNjcmlwdGlvbnM7XG4gIGNsaWVudDtcbiAgbGlzdGVuZXJzO1xuICBvcHRzO1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGNoYW5uZWxzLCBpc1BhdHRlcm4gPSBmYWxzZSwgb3B0cykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICBmb3IgKGNvbnN0IGNoYW5uZWwgb2YgY2hhbm5lbHMpIHtcbiAgICAgIGlmIChpc1BhdHRlcm4pIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1BhdHRlcm4oY2hhbm5lbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvQ2hhbm5lbChjaGFubmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3Vic2NyaWJlVG9DaGFubmVsKGNoYW5uZWwpIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgU3Vic2NyaWJlQ29tbWFuZChbY2hhbm5lbF0sIHtcbiAgICAgIHN0cmVhbU9wdGlvbnM6IHtcbiAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgb25NZXNzYWdlOiAoZGF0YSkgPT4gdGhpcy5oYW5kbGVNZXNzYWdlKGRhdGEsIGZhbHNlKVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbW1hbmQuZXhlYyh0aGlzLmNsaWVudCkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3IubmFtZSAhPT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaFRvTGlzdGVuZXJzKFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5zZXQoY2hhbm5lbCwge1xuICAgICAgY29tbWFuZCxcbiAgICAgIGNvbnRyb2xsZXIsXG4gICAgICBpc1BhdHRlcm46IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgc3Vic2NyaWJlVG9QYXR0ZXJuKHBhdHRlcm4pIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgUFN1YnNjcmliZUNvbW1hbmQoW3BhdHRlcm5dLCB7XG4gICAgICBzdHJlYW1PcHRpb25zOiB7XG4gICAgICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWwsXG4gICAgICAgIG9uTWVzc2FnZTogKGRhdGEpID0+IHRoaXMuaGFuZGxlTWVzc2FnZShkYXRhLCB0cnVlKVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbW1hbmQuZXhlYyh0aGlzLmNsaWVudCkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3IubmFtZSAhPT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaFRvTGlzdGVuZXJzKFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5zZXQocGF0dGVybiwge1xuICAgICAgY29tbWFuZCxcbiAgICAgIGNvbnRyb2xsZXIsXG4gICAgICBpc1BhdHRlcm46IHRydWVcbiAgICB9KTtcbiAgfVxuICBoYW5kbGVNZXNzYWdlKGRhdGEsIGlzUGF0dGVybikge1xuICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0gZGF0YS5yZXBsYWNlKC9eZGF0YTpcXHMqLywgXCJcIik7XG4gICAgY29uc3QgZmlyc3RDb21tYUluZGV4ID0gbWVzc2FnZURhdGEuaW5kZXhPZihcIixcIik7XG4gICAgY29uc3Qgc2Vjb25kQ29tbWFJbmRleCA9IG1lc3NhZ2VEYXRhLmluZGV4T2YoXCIsXCIsIGZpcnN0Q29tbWFJbmRleCArIDEpO1xuICAgIGNvbnN0IHRoaXJkQ29tbWFJbmRleCA9IGlzUGF0dGVybiA/IG1lc3NhZ2VEYXRhLmluZGV4T2YoXCIsXCIsIHNlY29uZENvbW1hSW5kZXggKyAxKSA6IC0xO1xuICAgIGlmIChmaXJzdENvbW1hSW5kZXggIT09IC0xICYmIHNlY29uZENvbW1hSW5kZXggIT09IC0xKSB7XG4gICAgICBjb25zdCB0eXBlID0gbWVzc2FnZURhdGEuc2xpY2UoMCwgZmlyc3RDb21tYUluZGV4KTtcbiAgICAgIGlmIChpc1BhdHRlcm4gJiYgdHlwZSA9PT0gXCJwbWVzc2FnZVwiICYmIHRoaXJkQ29tbWFJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgcGF0dGVybiA9IG1lc3NhZ2VEYXRhLnNsaWNlKGZpcnN0Q29tbWFJbmRleCArIDEsIHNlY29uZENvbW1hSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGFubmVsID0gbWVzc2FnZURhdGEuc2xpY2Uoc2Vjb25kQ29tbWFJbmRleCArIDEsIHRoaXJkQ29tbWFJbmRleCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VTdHIgPSBtZXNzYWdlRGF0YS5zbGljZSh0aGlyZENvbW1hSW5kZXggKyAxKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5vcHRzPy5hdXRvbWF0aWNEZXNlcmlhbGl6YXRpb24gPT09IGZhbHNlID8gbWVzc2FnZVN0ciA6IEpTT04ucGFyc2UobWVzc2FnZVN0cik7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaFRvTGlzdGVuZXJzKFwicG1lc3NhZ2VcIiwgeyBwYXR0ZXJuLCBjaGFubmVsLCBtZXNzYWdlIH0pO1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hUb0xpc3RlbmVycyhgcG1lc3NhZ2U6JHtwYXR0ZXJufWAsIHsgcGF0dGVybiwgY2hhbm5lbCwgbWVzc2FnZSB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoVG9MaXN0ZW5lcnMoXCJlcnJvclwiLCBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBtZXNzYWdlOiAke2Vycm9yfWApKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IG1lc3NhZ2VEYXRhLnNsaWNlKGZpcnN0Q29tbWFJbmRleCArIDEsIHNlY29uZENvbW1hSW5kZXgpO1xuICAgICAgICBjb25zdCBtZXNzYWdlU3RyID0gbWVzc2FnZURhdGEuc2xpY2Uoc2Vjb25kQ29tbWFJbmRleCArIDEpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh0eXBlID09PSBcInN1YnNjcmliZVwiIHx8IHR5cGUgPT09IFwicHN1YnNjcmliZVwiIHx8IHR5cGUgPT09IFwidW5zdWJzY3JpYmVcIiB8fCB0eXBlID09PSBcInB1bnN1YnNjcmliZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IE51bWJlci5wYXJzZUludChtZXNzYWdlU3RyKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hUb0xpc3RlbmVycyh0eXBlLCBjb3VudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm9wdHM/LmF1dG9tYXRpY0Rlc2VyaWFsaXphdGlvbiA9PT0gZmFsc2UgPyBtZXNzYWdlU3RyIDogSlNPTi5wYXJzZShtZXNzYWdlU3RyKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hUb0xpc3RlbmVycyh0eXBlLCB7IGNoYW5uZWwsIG1lc3NhZ2UgfSk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoVG9MaXN0ZW5lcnMoYCR7dHlwZX06JHtjaGFubmVsfWAsIHsgY2hhbm5lbCwgbWVzc2FnZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaFRvTGlzdGVuZXJzKFwiZXJyb3JcIiwgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgbWVzc2FnZTogJHtlcnJvcn1gKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZGlzcGF0Y2hUb0xpc3RlbmVycyh0eXBlLCBkYXRhKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZ2V0KHR5cGUpO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgIGxpc3RlbmVyKGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnMuaGFzKHR5cGUpKSB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5zZXQodHlwZSwgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSk7XG4gICAgfVxuICAgIHRoaXMubGlzdGVuZXJzLmdldCh0eXBlKT8uYWRkKGxpc3RlbmVyKTtcbiAgfVxuICByZW1vdmVBbGxMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgfVxuICBhc3luYyB1bnN1YnNjcmliZShjaGFubmVscykge1xuICAgIGlmIChjaGFubmVscykge1xuICAgICAgZm9yIChjb25zdCBjaGFubmVsIG9mIGNoYW5uZWxzKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9ucy5nZXQoY2hhbm5lbCk7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmRlbGV0ZShjaGFubmVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiB0aGlzLnN1YnNjcmlwdGlvbnMudmFsdWVzKCkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24uY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmNsZWFyKCk7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIH1cbiAgfVxuICBnZXRTdWJzY3JpYmVkQ2hhbm5lbHMoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLnN1YnNjcmlwdGlvbnMua2V5cygpXTtcbiAgfVxufTtcbnZhciBTdWJzY3JpYmVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY21kLCBvcHRzKSB7XG4gICAgY29uc3Qgc3NlSGVhZGVycyA9IHtcbiAgICAgIEFjY2VwdDogXCJ0ZXh0L2V2ZW50LXN0cmVhbVwiLFxuICAgICAgXCJDYWNoZS1Db250cm9sXCI6IFwibm8tY2FjaGVcIixcbiAgICAgIENvbm5lY3Rpb246IFwia2VlcC1hbGl2ZVwiXG4gICAgfTtcbiAgICBzdXBlcihbXSwge1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGhlYWRlcnM6IHNzZUhlYWRlcnMsXG4gICAgICBwYXRoOiBbXCJzdWJzY3JpYmVcIiwgLi4uY21kXSxcbiAgICAgIHN0cmVhbU9wdGlvbnM6IHtcbiAgICAgICAgaXNTdHJlYW1pbmc6IHRydWUsXG4gICAgICAgIG9uTWVzc2FnZTogb3B0cz8uc3RyZWFtT3B0aW9ucz8ub25NZXNzYWdlLFxuICAgICAgICBzaWduYWw6IG9wdHM/LnN0cmVhbU9wdGlvbnM/LnNpZ25hbFxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyBwa2cvc2NyaXB0LnRzXG5pbXBvcnQgeyBzdWJ0bGUgfSBmcm9tIFwidW5jcnlwdG9cIjtcbnZhciBTY3JpcHQgPSBjbGFzcyB7XG4gIHNjcmlwdDtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgcHJvcGVydHkgaXMgaW5pdGlhbGl6ZWQgdG8gYW4gZW1wdHkgc3RyaW5nIGFuZCB3aWxsIGJlIHNldCBpbiB0aGUgaW5pdCBtZXRob2RcbiAgICogYXN5bmNocm9ub3VzbHkuIERvIG5vdCB1c2UgdGhpcyBwcm9wZXJ0eSBpbW1pZGlhdGVseSBhZnRlciB0aGUgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgb25seSBleHBvc2VkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZVxuICAgKiBmdXR1cmUgbWFqb3IgcmVsZWFzZS5cbiAgICovXG4gIHNoYTE7XG4gIHJlZGlzO1xuICBjb25zdHJ1Y3RvcihyZWRpcywgc2NyaXB0KSB7XG4gICAgdGhpcy5yZWRpcyA9IHJlZGlzO1xuICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuICAgIHRoaXMuc2hhMSA9IFwiXCI7XG4gICAgdm9pZCB0aGlzLmluaXQoc2NyaXB0KTtcbiAgfVxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgc2NyaXB0IGJ5IGNvbXB1dGluZyBpdHMgU0hBLTEgaGFzaC5cbiAgICovXG4gIGFzeW5jIGluaXQoc2NyaXB0KSB7XG4gICAgaWYgKHRoaXMuc2hhMSkgcmV0dXJuO1xuICAgIHRoaXMuc2hhMSA9IGF3YWl0IHRoaXMuZGlnZXN0KHNjcmlwdCk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbmQgYW4gYEVWQUxgIGNvbW1hbmQgdG8gcmVkaXMuXG4gICAqL1xuICBhc3luYyBldmFsKGtleXMsIGFyZ3MpIHtcbiAgICBhd2FpdCB0aGlzLmluaXQodGhpcy5zY3JpcHQpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlZGlzLmV2YWwodGhpcy5zY3JpcHQsIGtleXMsIGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzaGExIGhhc2ggb2YgdGhlIHNjcmlwdCBhbmQgdGhlbiBjYWxscyBgRVZBTFNIQWAuXG4gICAqL1xuICBhc3luYyBldmFsc2hhKGtleXMsIGFyZ3MpIHtcbiAgICBhd2FpdCB0aGlzLmluaXQodGhpcy5zY3JpcHQpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlZGlzLmV2YWxzaGEodGhpcy5zaGExLCBrZXlzLCBhcmdzKTtcbiAgfVxuICAvKipcbiAgICogT3B0aW1pc3RpY2FsbHkgdHJ5IHRvIHJ1biBgRVZBTFNIQWAgZmlyc3QuXG4gICAqIElmIHRoZSBzY3JpcHQgaXMgbm90IGxvYWRlZCBpbiByZWRpcywgaXQgd2lsbCBmYWxsIGJhY2sgYW5kIHRyeSBhZ2FpbiB3aXRoIGBFVkFMYC5cbiAgICpcbiAgICogRm9sbG93aW5nIGNhbGxzIHdpbGwgYmUgYWJsZSB0byB1c2UgdGhlIGNhY2hlZCBzY3JpcHRcbiAgICovXG4gIGFzeW5jIGV4ZWMoa2V5cywgYXJncykge1xuICAgIGF3YWl0IHRoaXMuaW5pdCh0aGlzLnNjcmlwdCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5yZWRpcy5ldmFsc2hhKHRoaXMuc2hhMSwga2V5cywgYXJncykuY2F0Y2goYXN5bmMgKGVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5tZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJub3NjcmlwdFwiKSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWRpcy5ldmFsKHRoaXMuc2NyaXB0LCBrZXlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIHNoYTEgaGFzaCBvZiB0aGUgc2NyaXB0IGFuZCByZXR1cm4gaXRzIGhleCByZXByZXNlbnRhdGlvbi5cbiAgICovXG4gIGFzeW5jIGRpZ2VzdChzKSB7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzKTtcbiAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgc3VidGxlLmRpZ2VzdChcIlNIQS0xXCIsIGRhdGEpO1xuICAgIGNvbnN0IGhhc2hBcnJheSA9IFsuLi5uZXcgVWludDhBcnJheShoYXNoQnVmZmVyKV07XG4gICAgcmV0dXJuIGhhc2hBcnJheS5tYXAoKGIpID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSkuam9pbihcIlwiKTtcbiAgfVxufTtcblxuLy8gcGtnL3NjcmlwdFJvLnRzXG5pbXBvcnQgeyBzdWJ0bGUgYXMgc3VidGxlMiB9IGZyb20gXCJ1bmNyeXB0b1wiO1xudmFyIFNjcmlwdFJPID0gY2xhc3Mge1xuICBzY3JpcHQ7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIHByb3BlcnR5IGlzIGluaXRpYWxpemVkIHRvIGFuIGVtcHR5IHN0cmluZyBhbmQgd2lsbCBiZSBzZXQgaW4gdGhlIGluaXQgbWV0aG9kXG4gICAqIGFzeW5jaHJvbm91c2x5LiBEbyBub3QgdXNlIHRoaXMgcHJvcGVydHkgaW1taWRpYXRlbHkgYWZ0ZXIgdGhlIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgZXhwb3NlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGVcbiAgICogZnV0dXJlIG1ham9yIHJlbGVhc2UuXG4gICAqL1xuICBzaGExO1xuICByZWRpcztcbiAgY29uc3RydWN0b3IocmVkaXMsIHNjcmlwdCkge1xuICAgIHRoaXMucmVkaXMgPSByZWRpcztcbiAgICB0aGlzLnNoYTEgPSBcIlwiO1xuICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuICAgIHZvaWQgdGhpcy5pbml0KHNjcmlwdCk7XG4gIH1cbiAgYXN5bmMgaW5pdChzY3JpcHQpIHtcbiAgICBpZiAodGhpcy5zaGExKSByZXR1cm47XG4gICAgdGhpcy5zaGExID0gYXdhaXQgdGhpcy5kaWdlc3Qoc2NyaXB0KTtcbiAgfVxuICAvKipcbiAgICogU2VuZCBhbiBgRVZBTF9ST2AgY29tbWFuZCB0byByZWRpcy5cbiAgICovXG4gIGFzeW5jIGV2YWxSbyhrZXlzLCBhcmdzKSB7XG4gICAgYXdhaXQgdGhpcy5pbml0KHRoaXMuc2NyaXB0KTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWRpcy5ldmFsUm8odGhpcy5zY3JpcHQsIGtleXMsIGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzaGExIGhhc2ggb2YgdGhlIHNjcmlwdCBhbmQgdGhlbiBjYWxscyBgRVZBTFNIQV9ST2AuXG4gICAqL1xuICBhc3luYyBldmFsc2hhUm8oa2V5cywgYXJncykge1xuICAgIGF3YWl0IHRoaXMuaW5pdCh0aGlzLnNjcmlwdCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVkaXMuZXZhbHNoYVJvKHRoaXMuc2hhMSwga2V5cywgYXJncyk7XG4gIH1cbiAgLyoqXG4gICAqIE9wdGltaXN0aWNhbGx5IHRyeSB0byBydW4gYEVWQUxTSEFfUk9gIGZpcnN0LlxuICAgKiBJZiB0aGUgc2NyaXB0IGlzIG5vdCBsb2FkZWQgaW4gcmVkaXMsIGl0IHdpbGwgZmFsbCBiYWNrIGFuZCB0cnkgYWdhaW4gd2l0aCBgRVZBTF9ST2AuXG4gICAqXG4gICAqIEZvbGxvd2luZyBjYWxscyB3aWxsIGJlIGFibGUgdG8gdXNlIHRoZSBjYWNoZWQgc2NyaXB0XG4gICAqL1xuICBhc3luYyBleGVjKGtleXMsIGFyZ3MpIHtcbiAgICBhd2FpdCB0aGlzLmluaXQodGhpcy5zY3JpcHQpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVkaXMuZXZhbHNoYVJvKHRoaXMuc2hhMSwga2V5cywgYXJncykuY2F0Y2goYXN5bmMgKGVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5tZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJub3NjcmlwdFwiKSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWRpcy5ldmFsUm8odGhpcy5zY3JpcHQsIGtleXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgc2hhMSBoYXNoIG9mIHRoZSBzY3JpcHQgYW5kIHJldHVybiBpdHMgaGV4IHJlcHJlc2VudGF0aW9uLlxuICAgKi9cbiAgYXN5bmMgZGlnZXN0KHMpIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHMpO1xuICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBzdWJ0bGUyLmRpZ2VzdChcIlNIQS0xXCIsIGRhdGEpO1xuICAgIGNvbnN0IGhhc2hBcnJheSA9IFsuLi5uZXcgVWludDhBcnJheShoYXNoQnVmZmVyKV07XG4gICAgcmV0dXJuIGhhc2hBcnJheS5tYXAoKGIpID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSkuam9pbihcIlwiKTtcbiAgfVxufTtcblxuLy8gcGtnL3JlZGlzLnRzXG52YXIgUmVkaXMgPSBjbGFzcyB7XG4gIGNsaWVudDtcbiAgb3B0cztcbiAgZW5hYmxlVGVsZW1ldHJ5O1xuICBlbmFibGVBdXRvUGlwZWxpbmluZztcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyByZWRpcyBjbGllbnRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCByZWRpcyA9IG5ldyBSZWRpcyh7XG4gICAqICB1cmw6IFwiPFVQU1RBU0hfUkVESVNfUkVTVF9VUkw+XCIsXG4gICAqICB0b2tlbjogXCI8VVBTVEFTSF9SRURJU19SRVNUX1RPS0VOPlwiLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9wdHMpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMuZW5hYmxlVGVsZW1ldHJ5ID0gb3B0cz8uZW5hYmxlVGVsZW1ldHJ5ID8/IHRydWU7XG4gICAgaWYgKG9wdHM/LnJlYWRZb3VyV3JpdGVzID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5jbGllbnQucmVhZFlvdXJXcml0ZXMgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5lbmFibGVBdXRvUGlwZWxpbmluZyA9IG9wdHM/LmVuYWJsZUF1dG9QaXBlbGluaW5nID8/IHRydWU7XG4gIH1cbiAgZ2V0IHJlYWRZb3VyV3JpdGVzU3luY1Rva2VuKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC51cHN0YXNoU3luY1Rva2VuO1xuICB9XG4gIHNldCByZWFkWW91cldyaXRlc1N5bmNUb2tlbihzZXNzaW9uKSB7XG4gICAgdGhpcy5jbGllbnQudXBzdGFzaFN5bmNUb2tlbiA9IHNlc3Npb247XG4gIH1cbiAgZ2V0IGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJyYXBwZW5kXG4gICAgICAgKi9cbiAgICAgIGFycmFwcGVuZDogKC4uLmFyZ3MpID0+IG5ldyBKc29uQXJyQXBwZW5kQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi5hcnJpbmRleFxuICAgICAgICovXG4gICAgICBhcnJpbmRleDogKC4uLmFyZ3MpID0+IG5ldyBKc29uQXJySW5kZXhDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCksXG4gICAgICAvKipcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9qc29uLmFycmluc2VydFxuICAgICAgICovXG4gICAgICBhcnJpbnNlcnQ6ICguLi5hcmdzKSA9PiBuZXcgSnNvbkFyckluc2VydENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uYXJybGVuXG4gICAgICAgKi9cbiAgICAgIGFycmxlbjogKC4uLmFyZ3MpID0+IG5ldyBKc29uQXJyTGVuQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi5hcnJwb3BcbiAgICAgICAqL1xuICAgICAgYXJycG9wOiAoLi4uYXJncykgPT4gbmV3IEpzb25BcnJQb3BDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCksXG4gICAgICAvKipcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9qc29uLmFycnRyaW1cbiAgICAgICAqL1xuICAgICAgYXJydHJpbTogKC4uLmFyZ3MpID0+IG5ldyBKc29uQXJyVHJpbUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uY2xlYXJcbiAgICAgICAqL1xuICAgICAgY2xlYXI6ICguLi5hcmdzKSA9PiBuZXcgSnNvbkNsZWFyQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi5kZWxcbiAgICAgICAqL1xuICAgICAgZGVsOiAoLi4uYXJncykgPT4gbmV3IEpzb25EZWxDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCksXG4gICAgICAvKipcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9qc29uLmZvcmdldFxuICAgICAgICovXG4gICAgICBmb3JnZXQ6ICguLi5hcmdzKSA9PiBuZXcgSnNvbkZvcmdldENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uZ2V0XG4gICAgICAgKi9cbiAgICAgIGdldDogKC4uLmFyZ3MpID0+IG5ldyBKc29uR2V0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi5tZXJnZVxuICAgICAgICovXG4gICAgICBtZXJnZTogKC4uLmFyZ3MpID0+IG5ldyBKc29uTWVyZ2VDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCksXG4gICAgICAvKipcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9qc29uLm1nZXRcbiAgICAgICAqL1xuICAgICAgbWdldDogKC4uLmFyZ3MpID0+IG5ldyBKc29uTUdldENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ubXNldFxuICAgICAgICovXG4gICAgICBtc2V0OiAoLi4uYXJncykgPT4gbmV3IEpzb25NU2V0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi5udW1pbmNyYnlcbiAgICAgICAqL1xuICAgICAgbnVtaW5jcmJ5OiAoLi4uYXJncykgPT4gbmV3IEpzb25OdW1JbmNyQnlDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCksXG4gICAgICAvKipcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9qc29uLm51bW11bHRieVxuICAgICAgICovXG4gICAgICBudW1tdWx0Ynk6ICguLi5hcmdzKSA9PiBuZXcgSnNvbk51bU11bHRCeUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24ub2Jqa2V5c1xuICAgICAgICovXG4gICAgICBvYmprZXlzOiAoLi4uYXJncykgPT4gbmV3IEpzb25PYmpLZXlzQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi5vYmpsZW5cbiAgICAgICAqL1xuICAgICAgb2JqbGVuOiAoLi4uYXJncykgPT4gbmV3IEpzb25PYmpMZW5Db21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCksXG4gICAgICAvKipcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9qc29uLnJlc3BcbiAgICAgICAqL1xuICAgICAgcmVzcDogKC4uLmFyZ3MpID0+IG5ldyBKc29uUmVzcENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24uc2V0XG4gICAgICAgKi9cbiAgICAgIHNldDogKC4uLmFyZ3MpID0+IG5ldyBKc29uU2V0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi5zdHJhcHBlbmRcbiAgICAgICAqL1xuICAgICAgc3RyYXBwZW5kOiAoLi4uYXJncykgPT4gbmV3IEpzb25TdHJBcHBlbmRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCksXG4gICAgICAvKipcbiAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9qc29uLnN0cmxlblxuICAgICAgICovXG4gICAgICBzdHJsZW46ICguLi5hcmdzKSA9PiBuZXcgSnNvblN0ckxlbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2pzb24udG9nZ2xlXG4gICAgICAgKi9cbiAgICAgIHRvZ2dsZTogKC4uLmFyZ3MpID0+IG5ldyBKc29uVG9nZ2xlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpLFxuICAgICAgLyoqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvanNvbi50eXBlXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICguLi5hcmdzKSA9PiBuZXcgSnNvblR5cGVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBXcmFwIGEgbmV3IG1pZGRsZXdhcmUgYXJvdW5kIHRoZSBIVFRQIGNsaWVudC5cbiAgICovXG4gIHVzZSA9IChtaWRkbGV3YXJlKSA9PiB7XG4gICAgY29uc3QgbWFrZVJlcXVlc3QgPSB0aGlzLmNsaWVudC5yZXF1ZXN0LmJpbmQodGhpcy5jbGllbnQpO1xuICAgIHRoaXMuY2xpZW50LnJlcXVlc3QgPSAocmVxKSA9PiBtaWRkbGV3YXJlKHJlcSwgbWFrZVJlcXVlc3QpO1xuICB9O1xuICAvKipcbiAgICogVGVjaG5pY2FsbHkgdGhpcyBpcyBub3QgcHJpdmF0ZSwgd2UgY2FuIGhpZGUgaXQgZnJvbSBpbnRlbGxpc2Vuc2UgYnkgZG9pbmcgdGhpc1xuICAgKi9cbiAgYWRkVGVsZW1ldHJ5ID0gKHRlbGVtZXRyeSkgPT4ge1xuICAgIGlmICghdGhpcy5lbmFibGVUZWxlbWV0cnkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuY2xpZW50Lm1lcmdlVGVsZW1ldHJ5KHRlbGVtZXRyeSk7XG4gICAgfSBjYXRjaCB7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBzY3JpcHQuXG4gICAqXG4gICAqIFNjcmlwdHMgb2ZmZXIgdGhlIGFiaWxpdHkgdG8gb3B0aW1pc3RpY2FsbHkgdHJ5IHRvIGV4ZWN1dGUgYSBzY3JpcHQgd2l0aG91dCBoYXZpbmcgdG8gc2VuZCB0aGVcbiAgICogZW50aXJlIHNjcmlwdCB0byB0aGUgc2VydmVyLiBJZiB0aGUgc2NyaXB0IGlzIGxvYWRlZCBvbiB0aGUgc2VydmVyLCBpdCB0cmllcyBhZ2FpbiBieSBzZW5kaW5nXG4gICAqIHRoZSBlbnRpcmUgc2NyaXB0LiBBZnRlcndhcmRzLCB0aGUgc2NyaXB0IGlzIGNhY2hlZCBvbiB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0gc2NyaXB0IC0gVGhlIHNjcmlwdCB0byBjcmVhdGVcbiAgICogQHBhcmFtIG9wdHMgLSBPcHRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHNjcmlwdCBgeyByZWFkb25seT86IGJvb2xlYW4gfWBcbiAgICogQHJldHVybnMgQSBuZXcgc2NyaXB0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IHJlZGlzID0gbmV3IFJlZGlzKHsuLi59KVxuICAgKlxuICAgKiBjb25zdCBzY3JpcHQgPSByZWRpcy5jcmVhdGVTY3JpcHQ8c3RyaW5nPihcInJldHVybiBBUkdWWzFdO1wiKVxuICAgKiBjb25zdCBhcmcxID0gYXdhaXQgc2NyaXB0LmV2YWwoW10sIFtcIkhlbGxvIFdvcmxkXCJdKVxuICAgKiBleHBlY3QoYXJnMSwgXCJIZWxsbyBXb3JsZFwiKVxuICAgKiBgYGBcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgcmVkaXMgPSBuZXcgUmVkaXMoey4uLn0pXG4gICAqXG4gICAqIGNvbnN0IHNjcmlwdCA9IHJlZGlzLmNyZWF0ZVNjcmlwdDxzdHJpbmc+KFwicmV0dXJuIEFSR1ZbMV07XCIsIHsgcmVhZG9ubHk6IHRydWUgfSlcbiAgICogY29uc3QgYXJnMSA9IGF3YWl0IHNjcmlwdC5ldmFsUm8oW10sIFtcIkhlbGxvIFdvcmxkXCJdKVxuICAgKiBleHBlY3QoYXJnMSwgXCJIZWxsbyBXb3JsZFwiKVxuICAgKiBgYGBcbiAgICovXG4gIGNyZWF0ZVNjcmlwdChzY3JpcHQsIG9wdHMpIHtcbiAgICByZXR1cm4gb3B0cz8ucmVhZG9ubHkgPyBuZXcgU2NyaXB0Uk8odGhpcywgc2NyaXB0KSA6IG5ldyBTY3JpcHQodGhpcywgc2NyaXB0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHBpcGVsaW5lIHRoYXQgYWxsb3dzIHlvdSB0byBzZW5kIHJlcXVlc3RzIGluIGJ1bGsuXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIFBpcGVsaW5lfVxuICAgKi9cbiAgcGlwZWxpbmUgPSAoKSA9PiBuZXcgUGlwZWxpbmUoe1xuICAgIGNsaWVudDogdGhpcy5jbGllbnQsXG4gICAgY29tbWFuZE9wdGlvbnM6IHRoaXMub3B0cyxcbiAgICBtdWx0aUV4ZWM6IGZhbHNlXG4gIH0pO1xuICBhdXRvUGlwZWxpbmUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZUF1dG9QaXBlbGluZVByb3h5KHRoaXMpO1xuICB9O1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHRyYW5zYWN0aW9uIHRvIGFsbG93IGV4ZWN1dGluZyBtdWx0aXBsZSBzdGVwcyBhdG9taWNhbGx5LlxuICAgKlxuICAgKiBBbGwgdGhlIGNvbW1hbmRzIGluIGEgdHJhbnNhY3Rpb24gYXJlIHNlcmlhbGl6ZWQgYW5kIGV4ZWN1dGVkIHNlcXVlbnRpYWxseS4gQSByZXF1ZXN0IHNlbnQgYnlcbiAgICogYW5vdGhlciBjbGllbnQgd2lsbCBuZXZlciBiZSBzZXJ2ZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgZXhlY3V0aW9uIG9mIGEgUmVkaXMgVHJhbnNhY3Rpb24uIFRoaXNcbiAgICogZ3VhcmFudGVlcyB0aGF0IHRoZSBjb21tYW5kcyBhcmUgZXhlY3V0ZWQgYXMgYSBzaW5nbGUgaXNvbGF0ZWQgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBQaXBlbGluZX1cbiAgICovXG4gIG11bHRpID0gKCkgPT4gbmV3IFBpcGVsaW5lKHtcbiAgICBjbGllbnQ6IHRoaXMuY2xpZW50LFxuICAgIGNvbW1hbmRPcHRpb25zOiB0aGlzLm9wdHMsXG4gICAgbXVsdGlFeGVjOiB0cnVlXG4gIH0pO1xuICAvKipcbiAgICogUmV0dXJucyBhbiBpbnN0YW5jZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGV4ZWN1dGUgYEJJVEZJRUxEYCBjb21tYW5kcyBvbiBvbmUga2V5LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIHJlZGlzLnNldChcIm15a2V5XCIsIDApO1xuICAgKiBjb25zdCByZXN1bHQgPSBhd2FpdCByZWRpcy5iaXRmaWVsZChcIm15a2V5XCIpXG4gICAqICAgLnNldChcInU0XCIsIDAsIDE2KVxuICAgKiAgIC5pbmNyKFwidTRcIiwgXCIjMVwiLCAxKVxuICAgKiAgIC5leGVjKCk7XG4gICAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFswLCAxXVxuICAgKiBgYGBcbiAgICpcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2JpdGZpZWxkXG4gICAqL1xuICBiaXRmaWVsZCA9ICguLi5hcmdzKSA9PiBuZXcgQml0RmllbGRDb21tYW5kKGFyZ3MsIHRoaXMuY2xpZW50LCB0aGlzLm9wdHMpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2FwcGVuZFxuICAgKi9cbiAgYXBwZW5kID0gKC4uLmFyZ3MpID0+IG5ldyBBcHBlbmRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvYml0Y291bnRcbiAgICovXG4gIGJpdGNvdW50ID0gKC4uLmFyZ3MpID0+IG5ldyBCaXRDb3VudENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9iaXRvcFxuICAgKi9cbiAgYml0b3AgPSAob3AsIGRlc3RpbmF0aW9uS2V5LCBzb3VyY2VLZXksIC4uLnNvdXJjZUtleXMpID0+IG5ldyBCaXRPcENvbW1hbmQoW29wLCBkZXN0aW5hdGlvbktleSwgc291cmNlS2V5LCAuLi5zb3VyY2VLZXlzXSwgdGhpcy5vcHRzKS5leGVjKFxuICAgIHRoaXMuY2xpZW50XG4gICk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvYml0cG9zXG4gICAqL1xuICBiaXRwb3MgPSAoLi4uYXJncykgPT4gbmV3IEJpdFBvc0NvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9jb3B5XG4gICAqL1xuICBjb3B5ID0gKC4uLmFyZ3MpID0+IG5ldyBDb3B5Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2Ric2l6ZVxuICAgKi9cbiAgZGJzaXplID0gKCkgPT4gbmV3IERCU2l6ZUNvbW1hbmQodGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9kZWNyXG4gICAqL1xuICBkZWNyID0gKC4uLmFyZ3MpID0+IG5ldyBEZWNyQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2RlY3JieVxuICAgKi9cbiAgZGVjcmJ5ID0gKC4uLmFyZ3MpID0+IG5ldyBEZWNyQnlDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZGVsXG4gICAqL1xuICBkZWwgPSAoLi4uYXJncykgPT4gbmV3IERlbENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9lY2hvXG4gICAqL1xuICBlY2hvID0gKC4uLmFyZ3MpID0+IG5ldyBFY2hvQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2V2YWxfcm9cbiAgICovXG4gIGV2YWxSbyA9ICguLi5hcmdzKSA9PiBuZXcgRXZhbFJPQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2V2YWxcbiAgICovXG4gIGV2YWwgPSAoLi4uYXJncykgPT4gbmV3IEV2YWxDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZXZhbHNoYV9yb1xuICAgKi9cbiAgZXZhbHNoYVJvID0gKC4uLmFyZ3MpID0+IG5ldyBFdmFsc2hhUk9Db21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZXZhbHNoYVxuICAgKi9cbiAgZXZhbHNoYSA9ICguLi5hcmdzKSA9PiBuZXcgRXZhbHNoYUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEdlbmVyaWMgbWV0aG9kIHRvIGV4ZWN1dGUgYW55IFJlZGlzIGNvbW1hbmQuXG4gICAqL1xuICBleGVjID0gKGFyZ3MpID0+IG5ldyBFeGVjQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2V4aXN0c1xuICAgKi9cbiAgZXhpc3RzID0gKC4uLmFyZ3MpID0+IG5ldyBFeGlzdHNDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZXhwaXJlXG4gICAqL1xuICBleHBpcmUgPSAoLi4uYXJncykgPT4gbmV3IEV4cGlyZUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9leHBpcmVhdFxuICAgKi9cbiAgZXhwaXJlYXQgPSAoLi4uYXJncykgPT4gbmV3IEV4cGlyZUF0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2ZsdXNoYWxsXG4gICAqL1xuICBmbHVzaGFsbCA9IChhcmdzKSA9PiBuZXcgRmx1c2hBbGxDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZmx1c2hkYlxuICAgKi9cbiAgZmx1c2hkYiA9ICguLi5hcmdzKSA9PiBuZXcgRmx1c2hEQkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9hZGRcbiAgICovXG4gIGdlb2FkZCA9ICguLi5hcmdzKSA9PiBuZXcgR2VvQWRkQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2dlb3Bvc1xuICAgKi9cbiAgZ2VvcG9zID0gKC4uLmFyZ3MpID0+IG5ldyBHZW9Qb3NDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZ2VvZGlzdFxuICAgKi9cbiAgZ2VvZGlzdCA9ICguLi5hcmdzKSA9PiBuZXcgR2VvRGlzdENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZW9oYXNoXG4gICAqL1xuICBnZW9oYXNoID0gKC4uLmFyZ3MpID0+IG5ldyBHZW9IYXNoQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2dlb3NlYXJjaFxuICAgKi9cbiAgZ2Vvc2VhcmNoID0gKC4uLmFyZ3MpID0+IG5ldyBHZW9TZWFyY2hDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZ2Vvc2VhcmNoc3RvcmVcbiAgICovXG4gIGdlb3NlYXJjaHN0b3JlID0gKC4uLmFyZ3MpID0+IG5ldyBHZW9TZWFyY2hTdG9yZUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRcbiAgICovXG4gIGdldCA9ICguLi5hcmdzKSA9PiBuZXcgR2V0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2dldGJpdFxuICAgKi9cbiAgZ2V0Yml0ID0gKC4uLmFyZ3MpID0+IG5ldyBHZXRCaXRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZ2V0ZGVsXG4gICAqL1xuICBnZXRkZWwgPSAoLi4uYXJncykgPT4gbmV3IEdldERlbENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9nZXRleFxuICAgKi9cbiAgZ2V0ZXggPSAoLi4uYXJncykgPT4gbmV3IEdldEV4Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2dldHJhbmdlXG4gICAqL1xuICBnZXRyYW5nZSA9ICguLi5hcmdzKSA9PiBuZXcgR2V0UmFuZ2VDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvZ2V0c2V0XG4gICAqL1xuICBnZXRzZXQgPSAoa2V5LCB2YWx1ZSkgPT4gbmV3IEdldFNldENvbW1hbmQoW2tleSwgdmFsdWVdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hkZWxcbiAgICovXG4gIGhkZWwgPSAoLi4uYXJncykgPT4gbmV3IEhEZWxDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaGV4aXN0c1xuICAgKi9cbiAgaGV4aXN0cyA9ICguLi5hcmdzKSA9PiBuZXcgSEV4aXN0c0NvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9oZXhwaXJlXG4gICAqL1xuICBoZXhwaXJlID0gKC4uLmFyZ3MpID0+IG5ldyBIRXhwaXJlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hleHBpcmVhdFxuICAgKi9cbiAgaGV4cGlyZWF0ID0gKC4uLmFyZ3MpID0+IG5ldyBIRXhwaXJlQXRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaGV4cGlyZXRpbWVcbiAgICovXG4gIGhleHBpcmV0aW1lID0gKC4uLmFyZ3MpID0+IG5ldyBIRXhwaXJlVGltZUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9odHRsXG4gICAqL1xuICBodHRsID0gKC4uLmFyZ3MpID0+IG5ldyBIVHRsQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hwZXhwaXJlXG4gICAqL1xuICBocGV4cGlyZSA9ICguLi5hcmdzKSA9PiBuZXcgSFBFeHBpcmVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaHBleHBpcmVhdFxuICAgKi9cbiAgaHBleHBpcmVhdCA9ICguLi5hcmdzKSA9PiBuZXcgSFBFeHBpcmVBdENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9ocGV4cGlyZXRpbWVcbiAgICovXG4gIGhwZXhwaXJldGltZSA9ICguLi5hcmdzKSA9PiBuZXcgSFBFeHBpcmVUaW1lQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hwdHRsXG4gICAqL1xuICBocHR0bCA9ICguLi5hcmdzKSA9PiBuZXcgSFBUdGxDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaHBlcnNpc3RcbiAgICovXG4gIGhwZXJzaXN0ID0gKC4uLmFyZ3MpID0+IG5ldyBIUGVyc2lzdENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9oZ2V0XG4gICAqL1xuICBoZ2V0ID0gKC4uLmFyZ3MpID0+IG5ldyBIR2V0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hnZXRhbGxcbiAgICovXG4gIGhnZXRhbGwgPSAoLi4uYXJncykgPT4gbmV3IEhHZXRBbGxDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaGluY3JieVxuICAgKi9cbiAgaGluY3JieSA9ICguLi5hcmdzKSA9PiBuZXcgSEluY3JCeUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9oaW5jcmJ5ZmxvYXRcbiAgICovXG4gIGhpbmNyYnlmbG9hdCA9ICguLi5hcmdzKSA9PiBuZXcgSEluY3JCeUZsb2F0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2hrZXlzXG4gICAqL1xuICBoa2V5cyA9ICguLi5hcmdzKSA9PiBuZXcgSEtleXNDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaGxlblxuICAgKi9cbiAgaGxlbiA9ICguLi5hcmdzKSA9PiBuZXcgSExlbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9obWdldFxuICAgKi9cbiAgaG1nZXQgPSAoLi4uYXJncykgPT4gbmV3IEhNR2V0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2htc2V0XG4gICAqL1xuICBobXNldCA9IChrZXksIGt2KSA9PiBuZXcgSE1TZXRDb21tYW5kKFtrZXksIGt2XSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9ocmFuZGZpZWxkXG4gICAqL1xuICBocmFuZGZpZWxkID0gKGtleSwgY291bnQsIHdpdGhWYWx1ZXMpID0+IG5ldyBIUmFuZEZpZWxkQ29tbWFuZChba2V5LCBjb3VudCwgd2l0aFZhbHVlc10sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaHNjYW5cbiAgICovXG4gIGhzY2FuID0gKC4uLmFyZ3MpID0+IG5ldyBIU2NhbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9oc2V0XG4gICAqL1xuICBoc2V0ID0gKGtleSwga3YpID0+IG5ldyBIU2V0Q29tbWFuZChba2V5LCBrdl0sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaHNldG54XG4gICAqL1xuICBoc2V0bnggPSAoa2V5LCBmaWVsZCwgdmFsdWUpID0+IG5ldyBIU2V0TlhDb21tYW5kKFtrZXksIGZpZWxkLCB2YWx1ZV0sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaHN0cmxlblxuICAgKi9cbiAgaHN0cmxlbiA9ICguLi5hcmdzKSA9PiBuZXcgSFN0ckxlbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9odmFsc1xuICAgKi9cbiAgaHZhbHMgPSAoLi4uYXJncykgPT4gbmV3IEhWYWxzQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2luY3JcbiAgICovXG4gIGluY3IgPSAoLi4uYXJncykgPT4gbmV3IEluY3JDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvaW5jcmJ5XG4gICAqL1xuICBpbmNyYnkgPSAoLi4uYXJncykgPT4gbmV3IEluY3JCeUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9pbmNyYnlmbG9hdFxuICAgKi9cbiAgaW5jcmJ5ZmxvYXQgPSAoLi4uYXJncykgPT4gbmV3IEluY3JCeUZsb2F0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2tleXNcbiAgICovXG4gIGtleXMgPSAoLi4uYXJncykgPT4gbmV3IEtleXNDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbGluZGV4XG4gICAqL1xuICBsaW5kZXggPSAoLi4uYXJncykgPT4gbmV3IExJbmRleENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9saW5zZXJ0XG4gICAqL1xuICBsaW5zZXJ0ID0gKGtleSwgZGlyZWN0aW9uLCBwaXZvdCwgdmFsdWUpID0+IG5ldyBMSW5zZXJ0Q29tbWFuZChba2V5LCBkaXJlY3Rpb24sIHBpdm90LCB2YWx1ZV0sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbGxlblxuICAgKi9cbiAgbGxlbiA9ICguLi5hcmdzKSA9PiBuZXcgTExlbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9sbW92ZVxuICAgKi9cbiAgbG1vdmUgPSAoLi4uYXJncykgPT4gbmV3IExNb3ZlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xwb3BcbiAgICovXG4gIGxwb3AgPSAoLi4uYXJncykgPT4gbmV3IExQb3BDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbG1wb3BcbiAgICovXG4gIGxtcG9wID0gKC4uLmFyZ3MpID0+IG5ldyBMbVBvcENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9scG9zXG4gICAqL1xuICBscG9zID0gKC4uLmFyZ3MpID0+IG5ldyBMUG9zQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL2xwdXNoXG4gICAqL1xuICBscHVzaCA9IChrZXksIC4uLmVsZW1lbnRzKSA9PiBuZXcgTFB1c2hDb21tYW5kKFtrZXksIC4uLmVsZW1lbnRzXSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9scHVzaHhcbiAgICovXG4gIGxwdXNoeCA9IChrZXksIC4uLmVsZW1lbnRzKSA9PiBuZXcgTFB1c2hYQ29tbWFuZChba2V5LCAuLi5lbGVtZW50c10sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbHJhbmdlXG4gICAqL1xuICBscmFuZ2UgPSAoLi4uYXJncykgPT4gbmV3IExSYW5nZUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9scmVtXG4gICAqL1xuICBscmVtID0gKGtleSwgY291bnQsIHZhbHVlKSA9PiBuZXcgTFJlbUNvbW1hbmQoW2tleSwgY291bnQsIHZhbHVlXSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9sc2V0XG4gICAqL1xuICBsc2V0ID0gKGtleSwgaW5kZXgsIHZhbHVlKSA9PiBuZXcgTFNldENvbW1hbmQoW2tleSwgaW5kZXgsIHZhbHVlXSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9sdHJpbVxuICAgKi9cbiAgbHRyaW0gPSAoLi4uYXJncykgPT4gbmV3IExUcmltQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL21nZXRcbiAgICovXG4gIG1nZXQgPSAoLi4uYXJncykgPT4gbmV3IE1HZXRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbXNldFxuICAgKi9cbiAgbXNldCA9IChrdikgPT4gbmV3IE1TZXRDb21tYW5kKFtrdl0sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvbXNldG54XG4gICAqL1xuICBtc2V0bnggPSAoa3YpID0+IG5ldyBNU2V0TlhDb21tYW5kKFtrdl0sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGVyc2lzdFxuICAgKi9cbiAgcGVyc2lzdCA9ICguLi5hcmdzKSA9PiBuZXcgUGVyc2lzdENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9wZXhwaXJlXG4gICAqL1xuICBwZXhwaXJlID0gKC4uLmFyZ3MpID0+IG5ldyBQRXhwaXJlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3BleHBpcmVhdFxuICAgKi9cbiAgcGV4cGlyZWF0ID0gKC4uLmFyZ3MpID0+IG5ldyBQRXhwaXJlQXRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGZhZGRcbiAgICovXG4gIHBmYWRkID0gKC4uLmFyZ3MpID0+IG5ldyBQZkFkZENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9wZmNvdW50XG4gICAqL1xuICBwZmNvdW50ID0gKC4uLmFyZ3MpID0+IG5ldyBQZkNvdW50Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3BmbWVyZ2VcbiAgICovXG4gIHBmbWVyZ2UgPSAoLi4uYXJncykgPT4gbmV3IFBmTWVyZ2VDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcGluZ1xuICAgKi9cbiAgcGluZyA9IChhcmdzKSA9PiBuZXcgUGluZ0NvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9wc2V0ZXhcbiAgICovXG4gIHBzZXRleCA9IChrZXksIHR0bCwgdmFsdWUpID0+IG5ldyBQU2V0RVhDb21tYW5kKFtrZXksIHR0bCwgdmFsdWVdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3BzdWJzY3JpYmVcbiAgICovXG4gIHBzdWJzY3JpYmUgPSAocGF0dGVybnMpID0+IHtcbiAgICBjb25zdCBwYXR0ZXJuQXJyYXkgPSBBcnJheS5pc0FycmF5KHBhdHRlcm5zKSA/IHBhdHRlcm5zIDogW3BhdHRlcm5zXTtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmliZXIodGhpcy5jbGllbnQsIHBhdHRlcm5BcnJheSwgdHJ1ZSwgdGhpcy5vcHRzKTtcbiAgfTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9wdHRsXG4gICAqL1xuICBwdHRsID0gKC4uLmFyZ3MpID0+IG5ldyBQVHRsQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3B1Ymxpc2hcbiAgICovXG4gIHB1Ymxpc2ggPSAoLi4uYXJncykgPT4gbmV3IFB1Ymxpc2hDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcmFuZG9ta2V5XG4gICAqL1xuICByYW5kb21rZXkgPSAoKSA9PiBuZXcgUmFuZG9tS2V5Q29tbWFuZCgpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3JlbmFtZVxuICAgKi9cbiAgcmVuYW1lID0gKC4uLmFyZ3MpID0+IG5ldyBSZW5hbWVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvcmVuYW1lbnhcbiAgICovXG4gIHJlbmFtZW54ID0gKC4uLmFyZ3MpID0+IG5ldyBSZW5hbWVOWENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9ycG9wXG4gICAqL1xuICBycG9wID0gKC4uLmFyZ3MpID0+IG5ldyBSUG9wQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3JwdXNoXG4gICAqL1xuICBycHVzaCA9IChrZXksIC4uLmVsZW1lbnRzKSA9PiBuZXcgUlB1c2hDb21tYW5kKFtrZXksIC4uLmVsZW1lbnRzXSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9ycHVzaHhcbiAgICovXG4gIHJwdXNoeCA9IChrZXksIC4uLmVsZW1lbnRzKSA9PiBuZXcgUlB1c2hYQ29tbWFuZChba2V5LCAuLi5lbGVtZW50c10sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2FkZFxuICAgKi9cbiAgc2FkZCA9IChrZXksIG1lbWJlciwgLi4ubWVtYmVycykgPT4gbmV3IFNBZGRDb21tYW5kKFtrZXksIG1lbWJlciwgLi4ubWVtYmVyc10sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIHNjYW4oY3Vyc29yLCBvcHRzKSB7XG4gICAgcmV0dXJuIG5ldyBTY2FuQ29tbWFuZChbY3Vyc29yLCBvcHRzXSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgfVxuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NjYXJkXG4gICAqL1xuICBzY2FyZCA9ICguLi5hcmdzKSA9PiBuZXcgU0NhcmRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2NyaXB0LWV4aXN0c1xuICAgKi9cbiAgc2NyaXB0RXhpc3RzID0gKC4uLmFyZ3MpID0+IG5ldyBTY3JpcHRFeGlzdHNDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2NyaXB0LWZsdXNoXG4gICAqL1xuICBzY3JpcHRGbHVzaCA9ICguLi5hcmdzKSA9PiBuZXcgU2NyaXB0Rmx1c2hDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2NyaXB0LWxvYWRcbiAgICovXG4gIHNjcmlwdExvYWQgPSAoLi4uYXJncykgPT4gbmV3IFNjcmlwdExvYWRDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2RpZmZcbiAgICovXG4gIHNkaWZmID0gKC4uLmFyZ3MpID0+IG5ldyBTRGlmZkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zZGlmZnN0b3JlXG4gICAqL1xuICBzZGlmZnN0b3JlID0gKC4uLmFyZ3MpID0+IG5ldyBTRGlmZlN0b3JlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NldFxuICAgKi9cbiAgc2V0ID0gKGtleSwgdmFsdWUsIG9wdHMpID0+IG5ldyBTZXRDb21tYW5kKFtrZXksIHZhbHVlLCBvcHRzXSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zZXRiaXRcbiAgICovXG4gIHNldGJpdCA9ICguLi5hcmdzKSA9PiBuZXcgU2V0Qml0Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NldGV4XG4gICAqL1xuICBzZXRleCA9IChrZXksIHR0bCwgdmFsdWUpID0+IG5ldyBTZXRFeENvbW1hbmQoW2tleSwgdHRsLCB2YWx1ZV0sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2V0bnhcbiAgICovXG4gIHNldG54ID0gKGtleSwgdmFsdWUpID0+IG5ldyBTZXROeENvbW1hbmQoW2tleSwgdmFsdWVdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NldHJhbmdlXG4gICAqL1xuICBzZXRyYW5nZSA9ICguLi5hcmdzKSA9PiBuZXcgU2V0UmFuZ2VDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc2ludGVyXG4gICAqL1xuICBzaW50ZXIgPSAoLi4uYXJncykgPT4gbmV3IFNJbnRlckNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zaW50ZXJzdG9yZVxuICAgKi9cbiAgc2ludGVyc3RvcmUgPSAoLi4uYXJncykgPT4gbmV3IFNJbnRlclN0b3JlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3Npc21lbWJlclxuICAgKi9cbiAgc2lzbWVtYmVyID0gKGtleSwgbWVtYmVyKSA9PiBuZXcgU0lzTWVtYmVyQ29tbWFuZChba2V5LCBtZW1iZXJdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NtaXNtZW1iZXJcbiAgICovXG4gIHNtaXNtZW1iZXIgPSAoa2V5LCBtZW1iZXJzKSA9PiBuZXcgU01Jc01lbWJlckNvbW1hbmQoW2tleSwgbWVtYmVyc10sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc21lbWJlcnNcbiAgICovXG4gIHNtZW1iZXJzID0gKC4uLmFyZ3MpID0+IG5ldyBTTWVtYmVyc0NvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zbW92ZVxuICAgKi9cbiAgc21vdmUgPSAoc291cmNlLCBkZXN0aW5hdGlvbiwgbWVtYmVyKSA9PiBuZXcgU01vdmVDb21tYW5kKFtzb3VyY2UsIGRlc3RpbmF0aW9uLCBtZW1iZXJdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3Nwb3BcbiAgICovXG4gIHNwb3AgPSAoLi4uYXJncykgPT4gbmV3IFNQb3BDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc3JhbmRtZW1iZXJcbiAgICovXG4gIHNyYW5kbWVtYmVyID0gKC4uLmFyZ3MpID0+IG5ldyBTUmFuZE1lbWJlckNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zcmVtXG4gICAqL1xuICBzcmVtID0gKGtleSwgLi4ubWVtYmVycykgPT4gbmV3IFNSZW1Db21tYW5kKFtrZXksIC4uLm1lbWJlcnNdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3NzY2FuXG4gICAqL1xuICBzc2NhbiA9ICguLi5hcmdzKSA9PiBuZXcgU1NjYW5Db21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvc3RybGVuXG4gICAqL1xuICBzdHJsZW4gPSAoLi4uYXJncykgPT4gbmV3IFN0ckxlbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zdWJzY3JpYmVcbiAgICovXG4gIHN1YnNjcmliZSA9IChjaGFubmVscykgPT4ge1xuICAgIGNvbnN0IGNoYW5uZWxBcnJheSA9IEFycmF5LmlzQXJyYXkoY2hhbm5lbHMpID8gY2hhbm5lbHMgOiBbY2hhbm5lbHNdO1xuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcih0aGlzLmNsaWVudCwgY2hhbm5lbEFycmF5LCBmYWxzZSwgdGhpcy5vcHRzKTtcbiAgfTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9zdW5pb25cbiAgICovXG4gIHN1bmlvbiA9ICguLi5hcmdzKSA9PiBuZXcgU1VuaW9uQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3N1bmlvbnN0b3JlXG4gICAqL1xuICBzdW5pb25zdG9yZSA9ICguLi5hcmdzKSA9PiBuZXcgU1VuaW9uU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvdGltZVxuICAgKi9cbiAgdGltZSA9ICgpID0+IG5ldyBUaW1lQ29tbWFuZCgpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3RvdWNoXG4gICAqL1xuICB0b3VjaCA9ICguLi5hcmdzKSA9PiBuZXcgVG91Y2hDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvdHRsXG4gICAqL1xuICB0dGwgPSAoLi4uYXJncykgPT4gbmV3IFR0bENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy90eXBlXG4gICAqL1xuICB0eXBlID0gKC4uLmFyZ3MpID0+IG5ldyBUeXBlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3VubGlua1xuICAgKi9cbiAgdW5saW5rID0gKC4uLmFyZ3MpID0+IG5ldyBVbmxpbmtDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveGFkZFxuICAgKi9cbiAgeGFkZCA9ICguLi5hcmdzKSA9PiBuZXcgWEFkZENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy94YWNrXG4gICAqL1xuICB4YWNrID0gKC4uLmFyZ3MpID0+IG5ldyBYQWNrQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hkZWxcbiAgICovXG4gIHhkZWwgPSAoLi4uYXJncykgPT4gbmV3IFhEZWxDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveGdyb3VwXG4gICAqL1xuICB4Z3JvdXAgPSAoLi4uYXJncykgPT4gbmV3IFhHcm91cENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy94cmVhZFxuICAgKi9cbiAgeHJlYWQgPSAoLi4uYXJncykgPT4gbmV3IFhSZWFkQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hyZWFkZ3JvdXBcbiAgICovXG4gIHhyZWFkZ3JvdXAgPSAoLi4uYXJncykgPT4gbmV3IFhSZWFkR3JvdXBDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveGluZm9cbiAgICovXG4gIHhpbmZvID0gKC4uLmFyZ3MpID0+IG5ldyBYSW5mb0NvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy94bGVuXG4gICAqL1xuICB4bGVuID0gKC4uLmFyZ3MpID0+IG5ldyBYTGVuQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hwZW5kaW5nXG4gICAqL1xuICB4cGVuZGluZyA9ICguLi5hcmdzKSA9PiBuZXcgWFBlbmRpbmdDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveGNsYWltXG4gICAqL1xuICB4Y2xhaW0gPSAoLi4uYXJncykgPT4gbmV3IFhDbGFpbUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy94YXV0b2NsYWltXG4gICAqL1xuICB4YXV0b2NsYWltID0gKC4uLmFyZ3MpID0+IG5ldyBYQXV0b0NsYWltKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMveHRyaW1cbiAgICovXG4gIHh0cmltID0gKC4uLmFyZ3MpID0+IG5ldyBYVHJpbUNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy94cmFuZ2VcbiAgICovXG4gIHhyYW5nZSA9ICguLi5hcmdzKSA9PiBuZXcgWFJhbmdlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3hyZXZyYW5nZVxuICAgKi9cbiAgeHJldnJhbmdlID0gKC4uLmFyZ3MpID0+IG5ldyBYUmV2UmFuZ2VDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemFkZFxuICAgKi9cbiAgemFkZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKFwic2NvcmVcIiBpbiBhcmdzWzFdKSB7XG4gICAgICByZXR1cm4gbmV3IFpBZGRDb21tYW5kKFthcmdzWzBdLCBhcmdzWzFdLCAuLi5hcmdzLnNsaWNlKDIpXSwgdGhpcy5vcHRzKS5leGVjKFxuICAgICAgICB0aGlzLmNsaWVudFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBaQWRkQ29tbWFuZChcbiAgICAgIFthcmdzWzBdLCBhcmdzWzFdLCAuLi5hcmdzLnNsaWNlKDIpXSxcbiAgICAgIHRoaXMub3B0c1xuICAgICkuZXhlYyh0aGlzLmNsaWVudCk7XG4gIH07XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemNhcmRcbiAgICovXG4gIHpjYXJkID0gKC4uLmFyZ3MpID0+IG5ldyBaQ2FyZENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96Y291bnRcbiAgICovXG4gIHpjb3VudCA9ICguLi5hcmdzKSA9PiBuZXcgWkNvdW50Q29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pkaWZmc3RvcmVcbiAgICovXG4gIHpkaWZmc3RvcmUgPSAoLi4uYXJncykgPT4gbmV3IFpEaWZmU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemluY3JieVxuICAgKi9cbiAgemluY3JieSA9IChrZXksIGluY3JlbWVudCwgbWVtYmVyKSA9PiBuZXcgWkluY3JCeUNvbW1hbmQoW2tleSwgaW5jcmVtZW50LCBtZW1iZXJdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3ppbnRlcnN0b3JlXG4gICAqL1xuICB6aW50ZXJzdG9yZSA9ICguLi5hcmdzKSA9PiBuZXcgWkludGVyU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvemxleGNvdW50XG4gICAqL1xuICB6bGV4Y291bnQgPSAoLi4uYXJncykgPT4gbmV3IFpMZXhDb3VudENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96bXNjb3JlXG4gICAqL1xuICB6bXNjb3JlID0gKC4uLmFyZ3MpID0+IG5ldyBaTVNjb3JlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pwb3BtYXhcbiAgICovXG4gIHpwb3BtYXggPSAoLi4uYXJncykgPT4gbmV3IFpQb3BNYXhDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenBvcG1pblxuICAgKi9cbiAgenBvcG1pbiA9ICguLi5hcmdzKSA9PiBuZXcgWlBvcE1pbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96cmFuZ2VcbiAgICovXG4gIHpyYW5nZSA9ICguLi5hcmdzKSA9PiBuZXcgWlJhbmdlQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pyYW5rXG4gICAqL1xuICB6cmFuayA9IChrZXksIG1lbWJlcikgPT4gbmV3IFpSYW5rQ29tbWFuZChba2V5LCBtZW1iZXJdLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pyZW1cbiAgICovXG4gIHpyZW0gPSAoa2V5LCAuLi5tZW1iZXJzKSA9PiBuZXcgWlJlbUNvbW1hbmQoW2tleSwgLi4ubWVtYmVyc10sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenJlbXJhbmdlYnlsZXhcbiAgICovXG4gIHpyZW1yYW5nZWJ5bGV4ID0gKC4uLmFyZ3MpID0+IG5ldyBaUmVtUmFuZ2VCeUxleENvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96cmVtcmFuZ2VieXJhbmtcbiAgICovXG4gIHpyZW1yYW5nZWJ5cmFuayA9ICguLi5hcmdzKSA9PiBuZXcgWlJlbVJhbmdlQnlSYW5rQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3pyZW1yYW5nZWJ5c2NvcmVcbiAgICovXG4gIHpyZW1yYW5nZWJ5c2NvcmUgPSAoLi4uYXJncykgPT4gbmV3IFpSZW1SYW5nZUJ5U2NvcmVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenJldnJhbmtcbiAgICovXG4gIHpyZXZyYW5rID0gKGtleSwgbWVtYmVyKSA9PiBuZXcgWlJldlJhbmtDb21tYW5kKFtrZXksIG1lbWJlcl0sIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vcmVkaXMuaW8vY29tbWFuZHMvenNjYW5cbiAgICovXG4gIHpzY2FuID0gKC4uLmFyZ3MpID0+IG5ldyBaU2NhbkNvbW1hbmQoYXJncywgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96c2NvcmVcbiAgICovXG4gIHpzY29yZSA9IChrZXksIG1lbWJlcikgPT4gbmV3IFpTY29yZUNvbW1hbmQoW2tleSwgbWVtYmVyXSwgdGhpcy5vcHRzKS5leGVjKHRoaXMuY2xpZW50KTtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy96dW5pb25cbiAgICovXG4gIHp1bmlvbiA9ICguLi5hcmdzKSA9PiBuZXcgWlVuaW9uQ29tbWFuZChhcmdzLCB0aGlzLm9wdHMpLmV4ZWModGhpcy5jbGllbnQpO1xuICAvKipcbiAgICogQHNlZSBodHRwczovL3JlZGlzLmlvL2NvbW1hbmRzL3p1bmlvbnN0b3JlXG4gICAqL1xuICB6dW5pb25zdG9yZSA9ICguLi5hcmdzKSA9PiBuZXcgWlVuaW9uU3RvcmVDb21tYW5kKGFyZ3MsIHRoaXMub3B0cykuZXhlYyh0aGlzLmNsaWVudCk7XG59O1xuXG4vLyB2ZXJzaW9uLnRzXG52YXIgVkVSU0lPTiA9IFwidjEuMzUuNFwiO1xuXG5leHBvcnQge1xuICBlcnJvcl9leHBvcnRzLFxuICBIdHRwQ2xpZW50LFxuICBSZWRpcyxcbiAgVkVSU0lPTlxufTtcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJlcnJvcl9leHBvcnRzIiwiVXBzdGFzaEVycm9yIiwiVXJsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInVybCIsInBhcnNlUmVjdXJzaXZlIiwib2JqIiwicGFyc2VkIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwibyIsIkpTT04iLCJwYXJzZSIsInRvU3RyaW5nIiwicGFyc2VSZXNwb25zZSIsInJlc3VsdCIsImRlc2VyaWFsaXplU2NhblJlc3BvbnNlIiwic2xpY2UiLCJkZXNlcmlhbGl6ZVNjYW5XaXRoVHlwZXNSZXNwb25zZSIsImN1cnNvciIsImtleXMiLCJwYXJzZWRLZXlzIiwiaSIsImxlbmd0aCIsInB1c2giLCJrZXkiLCJ0eXBlIiwibWVyZ2VIZWFkZXJzIiwiaGVhZGVycyIsIm1lcmdlZCIsImhlYWRlciIsInZhbHVlIiwiZW50cmllcyIsIkh0dHBDbGllbnQiLCJjb25maWciLCJ1cHN0YXNoU3luY1Rva2VuIiwib3B0aW9ucyIsImJhY2tlbmQiLCJhZ2VudCIsInJlc3BvbnNlRW5jb2RpbmciLCJjYWNoZSIsInNpZ25hbCIsImtlZXBBbGl2ZSIsInJlYWRZb3VyV3JpdGVzIiwiYmFzZVVybCIsInJlcGxhY2UiLCJ1cmxSZWdleCIsInRlc3QiLCJoYXNDcmVkZW50aWFscyIsIkJvb2xlYW4iLCJhdXRob3JpemF0aW9uIiwic3BsaXQiLCJyZXRyeSIsImF0dGVtcHRzIiwiYmFja29mZiIsInJldHJpZXMiLCJyZXRyeUNvdW50IiwiTWF0aCIsImV4cCIsIm1lcmdlVGVsZW1ldHJ5IiwidGVsZW1ldHJ5IiwibWVyZ2UiLCJydW50aW1lIiwicGxhdGZvcm0iLCJzZGsiLCJyZXF1ZXN0IiwicmVxIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0VXJsIiwicGF0aCIsImpvaW4iLCJpc0V2ZW50U3RyZWFtIiwiQWNjZXB0IiwiaXNTaWduYWxGdW5jdGlvbiIsInJlcXVlc3RPcHRpb25zIiwibWV0aG9kIiwiYm9keSIsInN0cmluZ2lmeSIsImtlZXBhbGl2ZSIsImNvbnNvbGUiLCJ3YXJuIiwibmV3SGVhZGVyIiwicmVzIiwiZXJyb3IiLCJmZXRjaCIsImVycm9yXyIsImFib3J0ZWQiLCJteUJsb2IiLCJCbG9iIiwicmVhc29uIiwibXlPcHRpb25zIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsIlJlc3BvbnNlIiwiUHJvbWlzZSIsInIiLCJzZXRUaW1lb3V0Iiwib2siLCJib2R5MiIsImpzb24iLCJvbk1lc3NhZ2UiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJkb25lIiwicmVhZCIsImNodW5rIiwiZGVjb2RlIiwibGluZXMiLCJsaW5lIiwic3RhcnRzV2l0aCIsImRhdGEiLCJlcnJvcjIiLCJjYW5jZWwiLCJyZXN1bHQyIiwiYmFzZTY0ZGVjb2RlIiwiYjY0IiwiZGVjIiwiYmluU3RyaW5nIiwiYXRvYiIsInNpemUiLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0IiwicmF3IiwidiIsImVsZW1lbnQiLCJkZWZhdWx0U2VyaWFsaXplciIsImMiLCJDb21tYW5kIiwiY29tbWFuZCIsIm9wdHMiLCJzZXJpYWxpemUiLCJkZXNlcmlhbGl6ZSIsImF1dG9tYXRpY0Rlc2VyaWFsaXphdGlvbiIsIngiLCJzdHJlYW1PcHRpb25zIiwiaXNTdHJlYW1pbmciLCJsYXRlbmN5TG9nZ2luZyIsIm9yaWdpbmFsRXhlYyIsImV4ZWMiLCJiaW5kIiwiY2xpZW50Iiwic3RhcnQiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImVuZCIsImxvZ2dlclJlc3VsdCIsInRvRml4ZWQiLCJsb2ciLCJ0b1VwcGVyQ2FzZSIsIlR5cGVFcnJvciIsIkhSYW5kRmllbGRDb21tYW5kIiwiY21kIiwiQXBwZW5kQ29tbWFuZCIsIkJpdENvdW50Q29tbWFuZCIsIkJpdEZpZWxkQ29tbWFuZCIsImFyZ3MiLCJleGVjT3BlcmF0aW9uIiwiY2hhaW4iLCJzZXQiLCJpbmNyYnkiLCJvdmVyZmxvdyIsIkJpdE9wQ29tbWFuZCIsIkJpdFBvc0NvbW1hbmQiLCJDb3B5Q29tbWFuZCIsImRlc3RpbmF0aW9uS2V5IiwiY29tbWFuZE9wdGlvbnMiLCJEQlNpemVDb21tYW5kIiwiRGVjckNvbW1hbmQiLCJEZWNyQnlDb21tYW5kIiwiRGVsQ29tbWFuZCIsIkVjaG9Db21tYW5kIiwiRXZhbFJPQ29tbWFuZCIsInNjcmlwdCIsIkV2YWxDb21tYW5kIiwiRXZhbHNoYVJPQ29tbWFuZCIsInNoYSIsIkV2YWxzaGFDb21tYW5kIiwiRXhlY0NvbW1hbmQiLCJub3JtYWxpemVkQ21kIiwiYXJnIiwiU3RyaW5nIiwiRXhpc3RzQ29tbWFuZCIsIkV4cGlyZUNvbW1hbmQiLCJmaWx0ZXIiLCJFeHBpcmVBdENvbW1hbmQiLCJGbHVzaEFsbENvbW1hbmQiLCJhc3luYyIsIkZsdXNoREJDb21tYW5kIiwiY21kT3B0cyIsIkdlb0FkZENvbW1hbmQiLCJhcmcxIiwiYXJnMiIsIm54IiwieHgiLCJjaCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwibWVtYmVyIiwiZmxhdE1hcCIsIkdlb0Rpc3RDb21tYW5kIiwibWVtYmVyMSIsIm1lbWJlcjIiLCJ1bml0IiwiR2VvSGFzaENvbW1hbmQiLCJtZW1iZXJzIiwiR2VvUG9zQ29tbWFuZCIsInRyYW5zZm9ybSIsImZpbmFsIiwicG9zIiwibG5nIiwiTnVtYmVyIiwicGFyc2VGbG9hdCIsImxhdCIsIkdlb1NlYXJjaENvbW1hbmQiLCJjZW50ZXJQb2ludCIsInNoYXBlIiwib3JkZXIiLCJjb29yZGluYXRlIiwibG9uIiwicmFkaXVzIiwicmFkaXVzVHlwZSIsInJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInJlY3RUeXBlIiwiY291bnQiLCJsaW1pdCIsImFueSIsInRyYW5zZm9ybTIiLCJ3aXRoQ29vcmQiLCJ3aXRoRGlzdCIsIndpdGhIYXNoIiwiY291bnRlciIsImRpc3QiLCJoYXNoIiwiY29vcmQiLCJsb25nIiwiR2VvU2VhcmNoU3RvcmVDb21tYW5kIiwiZGVzdGluYXRpb24iLCJzdG9yZURpc3QiLCJHZXRDb21tYW5kIiwiR2V0Qml0Q29tbWFuZCIsIkdldERlbENvbW1hbmQiLCJHZXRFeENvbW1hbmQiLCJleCIsInB4IiwiZXhhdCIsInB4YXQiLCJwZXJzaXN0IiwiR2V0UmFuZ2VDb21tYW5kIiwiR2V0U2V0Q29tbWFuZCIsIkhEZWxDb21tYW5kIiwiSEV4aXN0c0NvbW1hbmQiLCJIRXhwaXJlQ29tbWFuZCIsImZpZWxkcyIsInNlY29uZHMiLCJvcHRpb24iLCJmaWVsZEFycmF5IiwiSEV4cGlyZUF0Q29tbWFuZCIsInRpbWVzdGFtcCIsIkhFeHBpcmVUaW1lQ29tbWFuZCIsIkhQZXJzaXN0Q29tbWFuZCIsIkhQRXhwaXJlQ29tbWFuZCIsIm1pbGxpc2Vjb25kcyIsIkhQRXhwaXJlQXRDb21tYW5kIiwiSFBFeHBpcmVUaW1lQ29tbWFuZCIsIkhQVHRsQ29tbWFuZCIsIkhHZXRDb21tYW5kIiwiZGVzZXJpYWxpemUyIiwidmFsdWVJc051bWJlckFuZE5vdFNhZmVJbnRlZ2VyIiwiaXNOYU4iLCJpc1NhZmVJbnRlZ2VyIiwiSEdldEFsbENvbW1hbmQiLCJISW5jckJ5Q29tbWFuZCIsIkhJbmNyQnlGbG9hdENvbW1hbmQiLCJIS2V5c0NvbW1hbmQiLCJITGVuQ29tbWFuZCIsImRlc2VyaWFsaXplMyIsImV2ZXJ5IiwiZmllbGQiLCJITUdldENvbW1hbmQiLCJITVNldENvbW1hbmQiLCJrdiIsIkhTY2FuQ29tbWFuZCIsIm1hdGNoIiwiSFNldENvbW1hbmQiLCJIU2V0TlhDb21tYW5kIiwiSFN0ckxlbkNvbW1hbmQiLCJIVHRsQ29tbWFuZCIsIkhWYWxzQ29tbWFuZCIsIkluY3JDb21tYW5kIiwiSW5jckJ5Q29tbWFuZCIsIkluY3JCeUZsb2F0Q29tbWFuZCIsIkpzb25BcnJBcHBlbmRDb21tYW5kIiwiSnNvbkFyckluZGV4Q29tbWFuZCIsIkpzb25BcnJJbnNlcnRDb21tYW5kIiwiSnNvbkFyckxlbkNvbW1hbmQiLCJKc29uQXJyUG9wQ29tbWFuZCIsIkpzb25BcnJUcmltQ29tbWFuZCIsInN0b3AiLCJKc29uQ2xlYXJDb21tYW5kIiwiSnNvbkRlbENvbW1hbmQiLCJKc29uRm9yZ2V0Q29tbWFuZCIsIkpzb25HZXRDb21tYW5kIiwiaW5kZW50IiwibmV3bGluZSIsInNwYWNlIiwiSnNvbk1lcmdlQ29tbWFuZCIsIkpzb25NR2V0Q29tbWFuZCIsIkpzb25NU2V0Q29tbWFuZCIsIkpzb25OdW1JbmNyQnlDb21tYW5kIiwiSnNvbk51bU11bHRCeUNvbW1hbmQiLCJKc29uT2JqS2V5c0NvbW1hbmQiLCJKc29uT2JqTGVuQ29tbWFuZCIsIkpzb25SZXNwQ29tbWFuZCIsIkpzb25TZXRDb21tYW5kIiwiSnNvblN0ckFwcGVuZENvbW1hbmQiLCJKc29uU3RyTGVuQ29tbWFuZCIsIkpzb25Ub2dnbGVDb21tYW5kIiwiSnNvblR5cGVDb21tYW5kIiwiS2V5c0NvbW1hbmQiLCJMSW5kZXhDb21tYW5kIiwiTEluc2VydENvbW1hbmQiLCJMTGVuQ29tbWFuZCIsIkxNb3ZlQ29tbWFuZCIsIkxtUG9wQ29tbWFuZCIsIm51bWtleXMiLCJkaXJlY3Rpb24iLCJMUG9wQ29tbWFuZCIsIkxQb3NDb21tYW5kIiwicmFuayIsIm1heExlbiIsIkxQdXNoQ29tbWFuZCIsIkxQdXNoWENvbW1hbmQiLCJMUmFuZ2VDb21tYW5kIiwiTFJlbUNvbW1hbmQiLCJMU2V0Q29tbWFuZCIsIkxUcmltQ29tbWFuZCIsIk1HZXRDb21tYW5kIiwiTVNldENvbW1hbmQiLCJNU2V0TlhDb21tYW5kIiwiZmxhdCIsIlBlcnNpc3RDb21tYW5kIiwiUEV4cGlyZUNvbW1hbmQiLCJQRXhwaXJlQXRDb21tYW5kIiwiUGZBZGRDb21tYW5kIiwiUGZDb3VudENvbW1hbmQiLCJQZk1lcmdlQ29tbWFuZCIsIlBpbmdDb21tYW5kIiwiUFNldEVYQ29tbWFuZCIsIlBUdGxDb21tYW5kIiwiUHVibGlzaENvbW1hbmQiLCJSYW5kb21LZXlDb21tYW5kIiwiUmVuYW1lQ29tbWFuZCIsIlJlbmFtZU5YQ29tbWFuZCIsIlJQb3BDb21tYW5kIiwiUlB1c2hDb21tYW5kIiwiUlB1c2hYQ29tbWFuZCIsIlNBZGRDb21tYW5kIiwiU2NhbkNvbW1hbmQiLCJ3aXRoVHlwZSIsIlNDYXJkQ29tbWFuZCIsIlNjcmlwdEV4aXN0c0NvbW1hbmQiLCJoYXNoZXMiLCJTY3JpcHRGbHVzaENvbW1hbmQiLCJzeW5jIiwiU2NyaXB0TG9hZENvbW1hbmQiLCJTRGlmZkNvbW1hbmQiLCJTRGlmZlN0b3JlQ29tbWFuZCIsIlNldENvbW1hbmQiLCJrZWVwVHRsIiwiU2V0Qml0Q29tbWFuZCIsIlNldEV4Q29tbWFuZCIsIlNldE54Q29tbWFuZCIsIlNldFJhbmdlQ29tbWFuZCIsIlNJbnRlckNvbW1hbmQiLCJTSW50ZXJTdG9yZUNvbW1hbmQiLCJTSXNNZW1iZXJDb21tYW5kIiwiU01lbWJlcnNDb21tYW5kIiwiU01Jc01lbWJlckNvbW1hbmQiLCJTTW92ZUNvbW1hbmQiLCJTUG9wQ29tbWFuZCIsIlNSYW5kTWVtYmVyQ29tbWFuZCIsIlNSZW1Db21tYW5kIiwiU1NjYW5Db21tYW5kIiwiU3RyTGVuQ29tbWFuZCIsIlNVbmlvbkNvbW1hbmQiLCJTVW5pb25TdG9yZUNvbW1hbmQiLCJUaW1lQ29tbWFuZCIsIlRvdWNoQ29tbWFuZCIsIlR0bENvbW1hbmQiLCJUeXBlQ29tbWFuZCIsIlVubGlua0NvbW1hbmQiLCJYQWNrQ29tbWFuZCIsImdyb3VwIiwiaWQiLCJpZHMiLCJYQWRkQ29tbWFuZCIsIm5vbWtTdHJlYW0iLCJ0cmltIiwiY29tcGFyaXNvbiIsInRocmVzaG9sZCIsImsiLCJYQXV0b0NsYWltIiwiY29uc3VtZXIiLCJtaW5JZGxlVGltZSIsImNvbW1hbmRzIiwianVzdElkIiwiWENsYWltQ29tbWFuZCIsImlkbGVNUyIsInRpbWVNUyIsImZvcmNlIiwibGFzdElkIiwiWERlbENvbW1hbmQiLCJjbWRzIiwiWEdyb3VwQ29tbWFuZCIsIk1LU1RSRUFNIiwiRU5UUklFU1JFQUQiLCJYSW5mb0NvbW1hbmQiLCJYTGVuQ29tbWFuZCIsIlhQZW5kaW5nQ29tbWFuZCIsImNvbnN1bWVycyIsImlkbGVUaW1lIiwiZGVzZXJpYWxpemU0IiwiZSIsInN0cmVhbUlkIiwiaiIsIlhSYW5nZUNvbW1hbmQiLCJVTkJBTEFOQ0VEX1hSRUFEX0VSUiIsIlhSZWFkQ29tbWFuZCIsImJsb2NrTVMiLCJVTkJBTEFOQ0VEX1hSRUFER1JPVVBfRVJSIiwiWFJlYWRHcm91cENvbW1hbmQiLCJOT0FDSyIsIlhSZXZSYW5nZUNvbW1hbmQiLCJkZXNlcmlhbGl6ZTUiLCJYVHJpbUNvbW1hbmQiLCJzdHJhdGVneSIsImV4YWN0bmVzcyIsIlpBZGRDb21tYW5kIiwiaW5jciIsImx0IiwiZ3QiLCJzY29yZSIsIlpDYXJkQ29tbWFuZCIsIlpDb3VudENvbW1hbmQiLCJaSW5jckJ5Q29tbWFuZCIsIlpJbnRlclN0b3JlQ29tbWFuZCIsIm51bUtleXMiLCJrZXlPcktleXMiLCJ3ZWlnaHRzIiwid2VpZ2h0IiwiYWdncmVnYXRlIiwiWkxleENvdW50Q29tbWFuZCIsIlpQb3BNYXhDb21tYW5kIiwiWlBvcE1pbkNvbW1hbmQiLCJaUmFuZ2VDb21tYW5kIiwibWluIiwibWF4IiwiYnlTY29yZSIsImJ5TGV4IiwicmV2Iiwib2Zmc2V0Iiwid2l0aFNjb3JlcyIsIlpSYW5rQ29tbWFuZCIsIlpSZW1Db21tYW5kIiwiWlJlbVJhbmdlQnlMZXhDb21tYW5kIiwiWlJlbVJhbmdlQnlSYW5rQ29tbWFuZCIsIlpSZW1SYW5nZUJ5U2NvcmVDb21tYW5kIiwiWlJldlJhbmtDb21tYW5kIiwiWlNjYW5Db21tYW5kIiwiWlNjb3JlQ29tbWFuZCIsIlpVbmlvbkNvbW1hbmQiLCJaVW5pb25TdG9yZUNvbW1hbmQiLCJaRGlmZlN0b3JlQ29tbWFuZCIsIlpNU2NvcmVDb21tYW5kIiwiUGlwZWxpbmUiLCJtdWx0aUV4ZWMiLCJ2YWx1ZXMiLCJrZWVwRXJyb3JzIiwiYXBwZW5kIiwiYml0Y291bnQiLCJiaXRmaWVsZCIsImJpdG9wIiwib3AiLCJzb3VyY2VLZXkiLCJzb3VyY2VLZXlzIiwiYml0cG9zIiwiY29weSIsInpkaWZmc3RvcmUiLCJkYnNpemUiLCJkZWNyIiwiZGVjcmJ5IiwiZGVsIiwiZWNobyIsImV2YWxSbyIsImV2YWwiLCJldmFsc2hhUm8iLCJldmFsc2hhIiwiZXhpc3RzIiwiZXhwaXJlIiwiZXhwaXJlYXQiLCJmbHVzaGFsbCIsImZsdXNoZGIiLCJnZW9hZGQiLCJnZW9kaXN0IiwiZ2VvcG9zIiwiZ2VvaGFzaCIsImdlb3NlYXJjaCIsImdlb3NlYXJjaHN0b3JlIiwiZ2V0Yml0IiwiZ2V0ZGVsIiwiZ2V0ZXgiLCJnZXRyYW5nZSIsImdldHNldCIsImhkZWwiLCJoZXhpc3RzIiwiaGV4cGlyZSIsImhleHBpcmVhdCIsImhleHBpcmV0aW1lIiwiaHR0bCIsImhwZXhwaXJlIiwiaHBleHBpcmVhdCIsImhwZXhwaXJldGltZSIsImhwdHRsIiwiaHBlcnNpc3QiLCJoZ2V0IiwiaGdldGFsbCIsImhpbmNyYnkiLCJoaW5jcmJ5ZmxvYXQiLCJoa2V5cyIsImhsZW4iLCJobWdldCIsImhtc2V0IiwiaHJhbmRmaWVsZCIsIndpdGhWYWx1ZXMiLCJoc2NhbiIsImhzZXQiLCJoc2V0bngiLCJoc3RybGVuIiwiaHZhbHMiLCJpbmNyYnlmbG9hdCIsImxpbmRleCIsImxpbnNlcnQiLCJwaXZvdCIsImxsZW4iLCJsbW92ZSIsImxwb3AiLCJsbXBvcCIsImxwb3MiLCJscHVzaCIsImVsZW1lbnRzIiwibHB1c2h4IiwibHJhbmdlIiwibHJlbSIsImxzZXQiLCJpbmRleCIsImx0cmltIiwibWdldCIsIm1zZXQiLCJtc2V0bngiLCJwZXhwaXJlIiwicGV4cGlyZWF0IiwicGZhZGQiLCJwZmNvdW50IiwicGZtZXJnZSIsInBpbmciLCJwc2V0ZXgiLCJ0dGwiLCJwdHRsIiwicHVibGlzaCIsInJhbmRvbWtleSIsInJlbmFtZSIsInJlbmFtZW54IiwicnBvcCIsInJwdXNoIiwicnB1c2h4Iiwic2FkZCIsInNjYW4iLCJzY2FyZCIsInNjcmlwdEV4aXN0cyIsInNjcmlwdEZsdXNoIiwic2NyaXB0TG9hZCIsInNkaWZmIiwic2RpZmZzdG9yZSIsInNldGJpdCIsInNldGV4Iiwic2V0bngiLCJzZXRyYW5nZSIsInNpbnRlciIsInNpbnRlcnN0b3JlIiwic2lzbWVtYmVyIiwic21lbWJlcnMiLCJzbWlzbWVtYmVyIiwic21vdmUiLCJzb3VyY2UiLCJzcG9wIiwic3JhbmRtZW1iZXIiLCJzcmVtIiwic3NjYW4iLCJzdHJsZW4iLCJzdW5pb24iLCJzdW5pb25zdG9yZSIsInRpbWUiLCJ0b3VjaCIsInVubGluayIsInphZGQiLCJ4YWRkIiwieGFjayIsInhkZWwiLCJ4Z3JvdXAiLCJ4cmVhZCIsInhyZWFkZ3JvdXAiLCJ4aW5mbyIsInhsZW4iLCJ4cGVuZGluZyIsInhjbGFpbSIsInhhdXRvY2xhaW0iLCJ4dHJpbSIsInhyYW5nZSIsInhyZXZyYW5nZSIsInpjYXJkIiwiemNvdW50IiwiemluY3JieSIsImluY3JlbWVudCIsInppbnRlcnN0b3JlIiwiemxleGNvdW50Iiwiem1zY29yZSIsInpwb3BtYXgiLCJ6cG9wbWluIiwienJhbmdlIiwienJhbmsiLCJ6cmVtIiwienJlbXJhbmdlYnlsZXgiLCJ6cmVtcmFuZ2VieXJhbmsiLCJ6cmVtcmFuZ2VieXNjb3JlIiwienJldnJhbmsiLCJ6c2NhbiIsInpzY29yZSIsInp1bmlvbnN0b3JlIiwienVuaW9uIiwiYXJyYXBwZW5kIiwiYXJyaW5kZXgiLCJhcnJpbnNlcnQiLCJhcnJsZW4iLCJhcnJwb3AiLCJhcnJ0cmltIiwiY2xlYXIiLCJmb3JnZXQiLCJudW1pbmNyYnkiLCJudW1tdWx0YnkiLCJvYmprZXlzIiwib2JqbGVuIiwicmVzcCIsInN0cmFwcGVuZCIsInRvZ2dsZSIsIkVYQ0xVREVfQ09NTUFORFMiLCJTZXQiLCJjcmVhdGVBdXRvUGlwZWxpbmVQcm94eSIsIl9yZWRpcyIsInJlZGlzIiwiYXV0b1BpcGVsaW5lRXhlY3V0b3IiLCJBdXRvUGlwZWxpbmVFeGVjdXRvciIsIlByb3h5IiwicmVkaXMyIiwicGlwZWxpbmVDb3VudGVyIiwiY29tbWFuZEluUmVkaXNCdXROb3RQaXBlbGluZSIsInBpcGVsaW5lIiwiaXNDb21tYW5kRXhjbHVkZWQiLCJoYXMiLCJpc0Z1bmN0aW9uIiwid2l0aEF1dG9QaXBlbGluZSIsInBpcGVsaW5lUHJvbWlzZXMiLCJXZWFrTWFwIiwiYWN0aXZlUGlwZWxpbmUiLCJpbmRleEluQ3VycmVudFBpcGVsaW5lIiwiZXhlY3V0ZVdpdGhQaXBlbGluZSIsInBpcGVsaW5lRG9uZSIsImRlZmVyRXhlY3V0aW9uIiwidGhlbiIsInBpcGVsaW5lUHJvbWlzZSIsInJlc3VsdHMiLCJjb21tYW5kUmVzdWx0IiwicmVzb2x2ZSIsIlBTdWJzY3JpYmVDb21tYW5kIiwic3NlSGVhZGVycyIsIkNvbm5lY3Rpb24iLCJTdWJzY3JpYmVyIiwiRXZlbnRUYXJnZXQiLCJjaGFubmVscyIsImlzUGF0dGVybiIsInN1YnNjcmlwdGlvbnMiLCJNYXAiLCJsaXN0ZW5lcnMiLCJjaGFubmVsIiwic3Vic2NyaWJlVG9QYXR0ZXJuIiwic3Vic2NyaWJlVG9DaGFubmVsIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsIlN1YnNjcmliZUNvbW1hbmQiLCJoYW5kbGVNZXNzYWdlIiwiY2F0Y2giLCJkaXNwYXRjaFRvTGlzdGVuZXJzIiwicGF0dGVybiIsIm1lc3NhZ2VEYXRhIiwiZmlyc3RDb21tYUluZGV4IiwiaW5kZXhPZiIsInNlY29uZENvbW1hSW5kZXgiLCJ0aGlyZENvbW1hSW5kZXgiLCJtZXNzYWdlU3RyIiwicGFyc2VJbnQiLCJsaXN0ZW5lciIsIm9uIiwiYWRkIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwidW5zdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJhYm9ydCIsImRlbGV0ZSIsImdldFN1YnNjcmliZWRDaGFubmVscyIsInN1YnRsZSIsIlNjcmlwdCIsInNoYTEiLCJpbml0IiwiZGlnZXN0IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInMiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImhhc2hCdWZmZXIiLCJoYXNoQXJyYXkiLCJiIiwicGFkU3RhcnQiLCJzdWJ0bGUyIiwiU2NyaXB0Uk8iLCJSZWRpcyIsInVzZSIsIm1pZGRsZXdhcmUiLCJtYWtlUmVxdWVzdCIsImFkZFRlbGVtZXRyeSIsImVuYWJsZVRlbGVtZXRyeSIsImF1dG9QaXBlbGluZSIsIm11bHRpIiwicHN1YnNjcmliZSIsInBhdHRlcm5zIiwicGF0dGVybkFycmF5Iiwic3Vic2NyaWJlIiwiY2hhbm5lbEFycmF5IiwiZW5hYmxlQXV0b1BpcGVsaW5pbmciLCJyZWFkWW91cldyaXRlc1N5bmNUb2tlbiIsInNlc3Npb24iLCJjcmVhdGVTY3JpcHQiLCJyZWFkb25seSIsIlZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/redis/chunk-XJQAWEWD.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@upstash/redis/nodejs.mjs":
/*!************************************************!*\
  !*** ./node_modules/@upstash/redis/nodejs.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Redis: () => (/* binding */ Redis2),\n/* harmony export */   errors: () => (/* reexport safe */ _chunk_XJQAWEWD_mjs__WEBPACK_IMPORTED_MODULE_0__.error_exports)\n/* harmony export */ });\n/* harmony import */ var _chunk_XJQAWEWD_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-XJQAWEWD.mjs */ \"(rsc)/./node_modules/@upstash/redis/chunk-XJQAWEWD.mjs\");\n\n// platforms/nodejs.ts\nif (typeof atob === \"undefined\") {\n    global.atob = (b64)=>Buffer.from(b64, \"base64\").toString(\"utf8\");\n}\nvar Redis2 = class _Redis extends _chunk_XJQAWEWD_mjs__WEBPACK_IMPORTED_MODULE_0__.Redis {\n    /**\n   * Create a new redis client by providing a custom `Requester` implementation\n   *\n   * @example\n   * ```ts\n   *\n   * import { UpstashRequest, Requester, UpstashResponse, Redis } from \"@upstash/redis\"\n   *\n   *  const requester: Requester = {\n   *    request: <TResult>(req: UpstashRequest): Promise<UpstashResponse<TResult>> => {\n   *      // ...\n   *    }\n   *  }\n   *\n   * const redis = new Redis(requester)\n   * ```\n   */ constructor(configOrRequester){\n        if (\"request\" in configOrRequester) {\n            super(configOrRequester);\n            return;\n        }\n        if (!configOrRequester.url) {\n            console.warn(`[Upstash Redis] The 'url' property is missing or undefined in your Redis config.`);\n        } else if (configOrRequester.url.startsWith(\" \") || configOrRequester.url.endsWith(\" \") || /\\r|\\n/.test(configOrRequester.url)) {\n            console.warn(\"[Upstash Redis] The redis url contains whitespace or newline, which can cause errors!\");\n        }\n        if (!configOrRequester.token) {\n            console.warn(`[Upstash Redis] The 'token' property is missing or undefined in your Redis config.`);\n        } else if (configOrRequester.token.startsWith(\" \") || configOrRequester.token.endsWith(\" \") || /\\r|\\n/.test(configOrRequester.token)) {\n            console.warn(\"[Upstash Redis] The redis token contains whitespace or newline, which can cause errors!\");\n        }\n        const client = new _chunk_XJQAWEWD_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpClient({\n            baseUrl: configOrRequester.url,\n            retry: configOrRequester.retry,\n            headers: {\n                authorization: `Bearer ${configOrRequester.token}`\n            },\n            agent: configOrRequester.agent,\n            responseEncoding: configOrRequester.responseEncoding,\n            cache: configOrRequester.cache ?? \"no-store\",\n            signal: configOrRequester.signal,\n            keepAlive: configOrRequester.keepAlive,\n            readYourWrites: configOrRequester.readYourWrites\n        });\n        super(client, {\n            automaticDeserialization: configOrRequester.automaticDeserialization,\n            enableTelemetry: !process.env.UPSTASH_DISABLE_TELEMETRY,\n            latencyLogging: configOrRequester.latencyLogging,\n            enableAutoPipelining: configOrRequester.enableAutoPipelining\n        });\n        this.addTelemetry({\n            runtime: // @ts-expect-error to silence compiler\n            typeof EdgeRuntime === \"string\" ? \"edge-light\" : `node@${process.version}`,\n            platform: process.env.UPSTASH_CONSOLE ? \"console\" : process.env.VERCEL ? \"vercel\" : process.env.AWS_REGION ? \"aws\" : \"unknown\",\n            sdk: `@upstash/redis@${_chunk_XJQAWEWD_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION}`\n        });\n        if (this.enableAutoPipelining) {\n            return this.autoPipeline();\n        }\n    }\n    /**\n   * Create a new Upstash Redis instance from environment variables.\n   *\n   * Use this to automatically load connection secrets from your environment\n   * variables. For instance when using the Vercel integration.\n   *\n   * This tries to load `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN` from\n   * your environment using `process.env`.\n   */ static fromEnv(config) {\n        if (process.env === void 0) {\n            throw new TypeError('[Upstash Redis] Unable to get environment variables, `process.env` is undefined. If you are deploying to cloudflare, please import from \"@upstash/redis/cloudflare\" instead');\n        }\n        const url = process.env.UPSTASH_REDIS_REST_URL || process.env.KV_REST_API_URL;\n        if (!url) {\n            console.warn(\"[Upstash Redis] Unable to find environment variable: `UPSTASH_REDIS_REST_URL`\");\n        }\n        const token = process.env.UPSTASH_REDIS_REST_TOKEN || process.env.KV_REST_API_TOKEN;\n        if (!token) {\n            console.warn(\"[Upstash Redis] Unable to find environment variable: `UPSTASH_REDIS_REST_TOKEN`\");\n        }\n        return new _Redis({\n            ...config,\n            url,\n            token\n        });\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/redis/nodejs.mjs\n");

/***/ })

};
;